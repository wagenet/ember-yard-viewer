YardViewer.load(
{
    "@context": {
        "type":                         "@type",
        "y_ld":                         "http://sparqly.cfcl.com/y_ld/",
        "yard":                         "http://sparqly.cfcl.com/yard/",

        "y_ld:children":                { "@type":    "@id" },
        "y_ld:namespace":               { "@type":    "@id" },
        "y_ld:superclass":              { "@type":    "@id" },

        "yard:path":                    "@id",

        "aliases":                      "yard:aliases",
        "attributes":                   "yard:attributes",
        "children":                     "yard:children",
        "class_mixins":                 "yard:class_mixins",
        "current_file_has_comments":    "yard:current_file_has_comments",
        "docstring":                    "yard:docstring",
        "docstring_extra":              "yard:docstring_extra",
        "docstring_extra_tags":         "yard:docstring_extra_tags",
        "dynamic":                      "yard:dynamic",
        "explicit":                     "yard:explicit",
        "files":                        "yard:files",
        "group":                        "yard:group",
        "groups":                       "yard:groups",
        "instance_mixins":              "yard:instance_mixins",
        "macro_data":                   "yard:macro_data",
        "method_object":                "yard:method_object",
        "name":                         "yard:name",
        "namespace":                    "yard:namespace",
        "parameters":                   "yard:parameters",
        "path":                         "yard:path",
        "scope":                        "yard:scope",
        "signature":                    "yard:signature",
        "source":                       "yard:source",
        "source_type":                  "yard:source_type",
        "superclass":                   "yard:superclass",
        "type":                         "yard:type",
        "value":                        "yard:value",
        "visibility":                   "yard:visibility"
    },

    "@graph": [
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD","#P","#log","yard.default_attr","#__p","yard.tag","yard.directive","yard.tag.transitive","File","Hash","yard.handlers.process","Array","Module","String","Insertion","SymbolHash","macro.expand"],
            "docstring":                    "",
            "groups":                       ["Global Convenience Methods"],
            "name":                         "root",
            "path":                         "",
            "source_type":                  "ruby",
            "type":                         "root",
            "visibility":                   "public",
            "y_ld:children":                ["YARD","%23P","%23log",".macro.yard.default_attr","%23__p",".macro.yard.tag",".macro.yard.directive",".macro.yard.tag.transitive","File","Hash",".macro.yard.handlers.process","Array","Module","String","Insertion","SymbolHash",".macro.macro.expand"],
            "y_ld:level":                   1,
            "y_ld:path":                    ""
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Shortcut for creating a YARD::CodeObjects::Proxy via a path",
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/globals.rb"}],
            "group":                        "Global Convenience Methods",
            "name":                         "P",
            "namespace":                    "",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":"nil","parm_name":"name"}],
            "path":                         "#P",
            "scope":                        "instance",
            "signature":                    "def P(namespace, name = nil)",
            "source":                       "def P(namespace, name = nil)\n  namespace, name = nil, namespace if name.nil?\n  YARD::Registry.resolve(namespace, name, false, true)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fglobals.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "%23P"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "explicit":                     true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/autoload.rb"}],
            "name":                         "__p",
            "namespace":                    "",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "#__p",
            "scope":                        "instance",
            "signature":                    "def __p(path) File.join(YARD::ROOT, 'yard', *path.split('/')) end",
            "source":                       "def __p(path) File.join(YARD::ROOT, 'yard', *path.split('/')) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fautoload.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "%23__p"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The global {YARD::Logger} instance",
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/globals.rb"}],
            "group":                        "Global Convenience Methods",
            "name":                         "log",
            "namespace":                    "",
            "path":                         "#log",
            "scope":                        "instance",
            "signature":                    "def log",
            "source":                       "def log\n  YARD::Logger.instance\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fglobals.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "%23log"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["Array#place"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/core_ext/array.rb"}],
            "name":                         "Array",
            "namespace":                    "",
            "path":                         "Array",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["Array%23place"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fcore_ext%2Farray.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "Array",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Places values before or after another object (by value) in\nan array. This is used in tandem with the before and after\nmethods of the {Insertion} class.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/core_ext/array.rb"}],
            "name":                         "place",
            "namespace":                    "Array",
            "parameters":                   [{"parm_type":null,"parm_name":"*values"}],
            "path":                         "Array#place",
            "scope":                        "instance",
            "signature":                    "def place(*values) Insertion.new(self, values) end",
            "source":                       "def place(*values) Insertion.new(self, values) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcore_ext%2Farray.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Array%23place"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["File::RELATIVE_PARENTDIR","File::RELATIVE_SAMEDIR","File.relative_path","File.cleanpath","File.open!","File.read_binary"],
            "docstring":                    "",
            "files":                        [{"file_line":3,"file_path":"lib/yard/core_ext/file.rb"}],
            "groups":                       ["Manipulating Paths","Reading Files"],
            "name":                         "File",
            "namespace":                    "",
            "path":                         "File",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["File%3A%3ARELATIVE_PARENTDIR","File%3A%3ARELATIVE_SAMEDIR","File.relative_path","File.cleanpath","File.open%21","File.read_binary"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "File",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Cleans a path by removing extraneous '..', '.' and '/' characters",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/core_ext/file.rb"}],
            "group":                        "Manipulating Paths",
            "name":                         "cleanpath",
            "namespace":                    "File",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "File.cleanpath",
            "scope":                        "class",
            "signature":                    "def self.cleanpath(path)",
            "source":                       "def self.cleanpath(path)\n  path = path.split(SEPARATOR)\n  path = path.inject([]) do |acc, comp|\n    next acc if comp == RELATIVE_SAMEDIR\n    if comp == RELATIVE_PARENTDIR && acc.size > 0 && acc.last != RELATIVE_PARENTDIR\n      acc.pop\n      next acc\n    end\n    acc << comp\n  end\n  File.join(*path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File.cleanpath"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Forces opening a file (for writing) by first creating the file's directory",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/core_ext/file.rb"}],
            "group":                        "Reading Files",
            "name":                         "open!",
            "namespace":                    "File",
            "parameters":                   [{"parm_type":null,"parm_name":"file"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "File.open!",
            "scope":                        "class",
            "signature":                    "def self.open!(file, *args, &block)",
            "source":                       "def self.open!(file, *args, &block)\n  dir = dirname(file)\n  FileUtils.mkdir_p(dir) unless directory?(dir)\n  open(file, *args, &block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File.open%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Reads a file with binary encoding",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/core_ext/file.rb"}],
            "group":                        "Reading Files",
            "name":                         "read_binary",
            "namespace":                    "File",
            "parameters":                   [{"parm_type":null,"parm_name":"file"}],
            "path":                         "File.read_binary",
            "scope":                        "class",
            "signature":                    "def self.read_binary(file)",
            "source":                       "def self.read_binary(file)\n  File.open(file, 'rb') {|f| f.read }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File.read_binary"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Turns a path +to+ into a relative path from starting\npoint +from+. The argument +from+ is assumed to be\na filename. To treat it as a directory, make sure it\nends in +File::SEPARATOR+ ('/' on UNIX filesystems).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/core_ext/file.rb"}],
            "group":                        "Manipulating Paths",
            "name":                         "relative_path",
            "namespace":                    "File",
            "parameters":                   [{"parm_type":null,"parm_name":"from"},{"parm_type":null,"parm_name":"to"}],
            "path":                         "File.relative_path",
            "scope":                        "class",
            "signature":                    "def self.relative_path(from, to)",
            "source":                       "def self.relative_path(from, to)\n  from = expand_path(from).split(SEPARATOR)\n  to = expand_path(to).split(SEPARATOR)\n  from.length.times do\n    break if from[0] != to[0]\n    from.shift; to.shift\n  end\n  fname = from.pop\n  join(*(from.map { RELATIVE_PARENTDIR } + to))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File.relative_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/core_ext/file.rb"}],
            "name":                         "RELATIVE_PARENTDIR",
            "namespace":                    "File",
            "path":                         "File::RELATIVE_PARENTDIR",
            "signature":                    "RELATIVE_PARENTDIR = '..'",
            "source":                       "RELATIVE_PARENTDIR = '..'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'..'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File%3A%3ARELATIVE_PARENTDIR"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/core_ext/file.rb"}],
            "name":                         "RELATIVE_SAMEDIR",
            "namespace":                    "File",
            "path":                         "File::RELATIVE_SAMEDIR",
            "signature":                    "RELATIVE_SAMEDIR = '.'",
            "source":                       "RELATIVE_SAMEDIR = '.'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'.'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcore_ext%2Ffile.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "File%3A%3ARELATIVE_SAMEDIR"
        },
        {
            "aliases":                      {"Hash.create_186":"[]","Hash.[]":"create"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["Hash.create","Hash.create_186","Hash.[]"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/core_ext/hash.rb"}],
            "name":                         "Hash",
            "namespace":                    "",
            "path":                         "Hash",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["Hash.create","Hash.create_186","Hash.%5B%5D"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fcore_ext%2Fhash.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "Hash",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/core_ext/hash.rb"}],
            "name":                         "[]",
            "namespace":                    "Hash",
            "path":                         "Hash.[]",
            "scope":                        "class",
            "signature":                    "def create(*args)",
            "source":                       "def create(*args)\n  if args.first.is_a?(Array) && args.size == 1\n    obj = new\n    args.first.each {|k, v| obj[k] = v }\n    obj\n  else\n    create_186(*args)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcore_ext%2Fhash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Hash.%5B%5D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/core_ext/hash.rb"}],
            "name":                         "create",
            "namespace":                    "Hash",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "Hash.create",
            "scope":                        "class",
            "signature":                    "def create(*args)",
            "source":                       "def create(*args)\n  if args.first.is_a?(Array) && args.size == 1\n    obj = new\n    args.first.each {|k, v| obj[k] = v }\n    obj\n  else\n    create_186(*args)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fcore_ext%2Fhash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Hash.create"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/core_ext/hash.rb"}],
            "name":                         "create_186",
            "namespace":                    "Hash",
            "path":                         "Hash.create_186",
            "scope":                        "class",
            "signature":                    "def create_186",
            "source":                       "alias :create_186 :[]",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcore_ext%2Fhash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Hash.create_186"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["Insertion#initialize","Insertion#before","Insertion#after","Insertion#before_any","Insertion#after_any","Insertion#insertion"],
            "current_file_has_comments":    true,
            "docstring":                    "The Insertion class inserts a value before or after another\nvalue in a list.",
            "files":                        [{"file_line":6,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "Insertion",
            "namespace":                    "",
            "path":                         "Insertion",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["Insertion%23initialize","Insertion%23before","Insertion%23after","Insertion%23before_any","Insertion%23after_any","Insertion%23insertion"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "Insertion",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Inserts the value after +val+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "after",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"val"},{"parm_type":"false","parm_name":"recursive"}],
            "path":                         "Insertion#after",
            "scope":                        "instance",
            "signature":                    "def after(val, recursive = false) insertion(val, 1, recursive) end",
            "source":                       "def after(val, recursive = false) insertion(val, 1, recursive) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23after"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Alias for {#after} with +recursive+ set to true",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "after_any",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"val"}],
            "path":                         "Insertion#after_any",
            "scope":                        "instance",
            "signature":                    "def after_any(val) insertion(val, 1, true) end",
            "source":                       "def after_any(val) insertion(val, 1, true) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23after_any"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Inserts the value before +val+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "before",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"val"},{"parm_type":"false","parm_name":"recursive"}],
            "path":                         "Insertion#before",
            "scope":                        "instance",
            "signature":                    "def before(val, recursive = false) insertion(val, 0, recursive) end",
            "source":                       "def before(val, recursive = false) insertion(val, 0, recursive) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23before"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Alias for {#before} with +recursive+ set to true",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "before_any",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"val"}],
            "path":                         "Insertion#before_any",
            "scope":                        "instance",
            "signature":                    "def before_any(val) insertion(val, 0, true) end",
            "source":                       "def before_any(val) insertion(val, 0, true) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23before_any"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates an insertion object on a list with a value to be\ninserted. To finalize the insertion, call {#before} or\n{#after} on the object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "initialize",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"list"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "Insertion#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(list, value) @list, @values = list, (Array === value ? value : [value]) end",
            "source":                       "def initialize(list, value) @list, @values = list, (Array === value ? value : [value]) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This method performs the actual insertion",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/core_ext/insertion.rb"}],
            "name":                         "insertion",
            "namespace":                    "Insertion",
            "parameters":                   [{"parm_type":null,"parm_name":"val"},{"parm_type":null,"parm_name":"rel"},{"parm_type":"false","parm_name":"recursive"},{"parm_type":"@list","parm_name":"list"}],
            "path":                         "Insertion#insertion",
            "scope":                        "instance",
            "signature":                    "def insertion(val, rel, recursive = false, list = @list)",
            "source":                       "def insertion(val, rel, recursive = false, list = @list)\n  if recursive\n    list.each do |item|\n      next unless item.is_a?(Array)\n      tmp = item.dup\n      insertion(val, rel, recursive, item)\n      return(list) unless item == tmp\n    end\n  end\n\n  if index = list.index(val)\n    list[index+rel,0] = @values\n  end\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fcore_ext%2Finsertion.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Insertion%23insertion"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["Module#class_name","Module#namespace_name"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/core_ext/module.rb"}],
            "name":                         "Module",
            "namespace":                    "",
            "path":                         "Module",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["Module%23class_name","Module%23namespace_name"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fcore_ext%2Fmodule.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "Module",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the class name of a full module namespace path",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/core_ext/module.rb"}],
            "name":                         "class_name",
            "namespace":                    "Module",
            "path":                         "Module#class_name",
            "scope":                        "instance",
            "signature":                    "def class_name",
            "source":                       "def class_name\n  name.split(\"::\").last\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcore_ext%2Fmodule.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Module%23class_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the module namespace path minus the class/module name",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/core_ext/module.rb"}],
            "name":                         "namespace_name",
            "namespace":                    "Module",
            "path":                         "Module#namespace_name",
            "scope":                        "instance",
            "signature":                    "def namespace_name",
            "source":                       "def namespace_name\n  name.split(\"::\")[0..-2].join(\"::\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcore_ext%2Fmodule.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "Module%23namespace_name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["String#shell_split"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/core_ext/string.rb"}],
            "name":                         "String",
            "namespace":                    "",
            "path":                         "String",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["String%23shell_split"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fcore_ext%2Fstring.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "String",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Splits text into tokens the way a shell would, handling quoted\ntext as a single token. Use '\\\"' and \"\\'\" to escape quotes and\n'\\\\' to escape a backslash.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/core_ext/string.rb"}],
            "name":                         "shell_split",
            "namespace":                    "String",
            "path":                         "String#shell_split",
            "scope":                        "instance",
            "signature":                    "def shell_split",
            "source":                       "def shell_split\n  out = [\"\"]\n  state = :none\n  escape_next = false\n  quote = \"\"\n  strip.split(//).each do |char|\n    case state\n    when :none, :space\n      case char\n      when /\\s/\n        out << \"\" unless state == :space\n        state = :space\n        escape_next = false\n      when \"\\\\\"\n        if escape_next\n          out.last << char\n          escape_next = false\n        else\n          escape_next = true\n        end\n      when '\"', \"'\"\n        if escape_next\n          out.last << char\n          escape_next = false\n        else\n          state = char\n          quote = \"\"\n        end\n      else\n        state = :none\n        out.last << char\n        escape_next = false\n      end\n    when '\"', \"'\"\n      case char\n      when '\"', \"'\"\n        if escape_next\n          quote << char\n          escape_next = false\n        elsif char == state\n          out.last << quote\n          state = :none\n        else\n          quote << char\n        end\n      when '\\\\'\n        if escape_next\n          quote << char\n          escape_next = false\n        else\n          escape_next = true\n        end\n      else\n        quote << char\n        escape_next = false\n      end\n    end\n  end\n  out\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcore_ext%2Fstring.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "String%23shell_split"
        },
        {
            "aliases":                      {"SymbolHash#merge!":"update"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["SymbolHash#initialize","SymbolHash.[]","SymbolHash#[]=","SymbolHash#[]","SymbolHash#delete","SymbolHash#has_key?","SymbolHash#update","SymbolHash#merge!","SymbolHash#merge"],
            "current_file_has_comments":    true,
            "docstring":                    "A subclass of Hash where all keys are converted into Symbols, and\noptionally, all String values are converted into Symbols.",
            "files":                        [{"file_line":3,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "SymbolHash",
            "namespace":                    "",
            "path":                         "SymbolHash",
            "source_type":                  "ruby",
            "superclass":                   "Hash",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["SymbolHash%23initialize","SymbolHash.%5B%5D","SymbolHash%23%5B%5D%3D","SymbolHash%23%5B%5D","SymbolHash%23delete","SymbolHash%23has_key%3F","SymbolHash%23update","SymbolHash%23merge%21","SymbolHash%23merge"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "SymbolHash",
            "y_ld:superclass":              "Hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Accessed a symbolized key",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "[]",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "SymbolHash#[]",
            "scope":                        "instance",
            "signature":                    "def [](key) super(key.to_sym) end",
            "source":                       "def [](key) super(key.to_sym) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23%5B%5D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Assigns a value to a symbolized key",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "[]=",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"key"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "SymbolHash#[]=",
            "scope":                        "instance",
            "signature":                    "def []=(key, value)",
            "source":                       "def []=(key, value)\n  super(key.to_sym, value.instance_of?(String) && @symbolize_value ? value.to_sym : value)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23%5B%5D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deleted a key and value associated with it",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "delete",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "SymbolHash#delete",
            "scope":                        "instance",
            "signature":                    "def delete(key) super(key.to_sym) end",
            "source":                       "def delete(key) super(key.to_sym) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23delete"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if a symbolized key exists",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "has_key?",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "SymbolHash#has_key?",
            "scope":                        "instance",
            "signature":                    "def has_key?(key) super(key.to_sym) end",
            "source":                       "def has_key?(key) super(key.to_sym) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23has_key%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new SymbolHash object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "initialize",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":"true","parm_name":"symbolize_value"}],
            "path":                         "SymbolHash#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(symbolize_value = true)",
            "source":                       "def initialize(symbolize_value = true)\n  @symbolize_value = symbolize_value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Merges the contents of another hash into a new SymbolHash object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "merge",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"hash"}],
            "path":                         "SymbolHash#merge",
            "scope":                        "instance",
            "signature":                    "def merge(hash) dup.merge!(hash) end",
            "source":                       "def merge(hash) dup.merge!(hash) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23merge"
        },
        {
            "docstring":                    "Updates the object with the contents of another Hash object.\nThis method modifies the original SymbolHash object",
            "dynamic":                      true,
            "files":                        [{"file_line":66,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "merge!",
            "namespace":                    "SymbolHash",
            "path":                         "SymbolHash#merge!",
            "scope":                        "instance",
            "signature":                    "def update(hash) hash.each {|k,v| self[k] = v }; self end",
            "source":                       "def update(hash) hash.each {|k,v| self[k] = v }; self end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":66,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23merge%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Updates the object with the contents of another Hash object.\nThis method modifies the original SymbolHash object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "update",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"hash"}],
            "path":                         "SymbolHash#update",
            "scope":                        "instance",
            "signature":                    "def update(hash) hash.each {|k,v| self[k] = v }; self end",
            "source":                       "def update(hash) hash.each {|k,v| self[k] = v }; self end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash%23update"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/core_ext/symbol_hash.rb"}],
            "name":                         "[]",
            "namespace":                    "SymbolHash",
            "parameters":                   [{"parm_type":null,"parm_name":"*hsh"}],
            "path":                         "SymbolHash.[]",
            "scope":                        "class",
            "signature":                    "def self.[](*hsh)",
            "source":                       "def self.[](*hsh)\n  obj = new;\n  if hsh.size == 1 && hsh.first.is_a?(Hash)\n    hsh.first.each {|k,v| obj[k] = v }\n  else\n    0.step(hsh.size, 2) {|n| obj[hsh[n]] = hsh[n+1] }\n  end\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fcore_ext%2Fsymbol_hash.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "SymbolHash.%5B%5D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::VERSION","YARD::ROOT","YARD::TEMPLATE_ROOT","YARD::CONFIG_DIR","YARD.parse","YARD.parse_string","YARD.load_plugins","YARD::Config","YARD::Server","YARD::CLI","YARD::Logger","YARD::Options","YARD::Registry","YARD::CodeObjects","YARD::Handlers","YARD::I18n","YARD::Parser","YARD::Rake","YARD::Serializers","YARD::Tags","YARD::Templates","YARD::Verifier","YARD::Docstring","YARD::RegistryStore","YARD::DocstringParser","YARD::StubProxy"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard.rb"},{"file_line":1,"file_path":"lib/yard/config.rb"},{"file_line":1,"file_path":"lib/yard/server.rb"},{"file_line":3,"file_path":"lib/yard/cli/yri.rb"},{"file_line":3,"file_path":"lib/yard/logging.rb"},{"file_line":1,"file_path":"lib/yard/options.rb"},{"file_line":3,"file_path":"lib/yard/cli/i18n.rb"},{"file_line":1,"file_path":"lib/yard/cli/help.rb"},{"file_line":1,"file_path":"lib/yard/cli/gems.rb"},{"file_line":1,"file_path":"lib/yard/cli/list.rb"},{"file_line":5,"file_path":"lib/yard/cli/diff.rb"},{"file_line":4,"file_path":"lib/yard/registry.rb"},{"file_line":4,"file_path":"lib/yard/autoload.rb"},{"file_line":1,"file_path":"lib/yard/tags/tag.rb"},{"file_line":1,"file_path":"lib/yard/verifier.rb"},{"file_line":1,"file_path":"lib/yard/i18n/text.rb"},{"file_line":1,"file_path":"lib/yard/cli/stats.rb"},{"file_line":1,"file_path":"lib/yard/cli/graph.rb"},{"file_line":1,"file_path":"lib/yard/docstring.rb"},{"file_line":4,"file_path":"lib/yard/cli/yardoc.rb"},{"file_line":1,"file_path":"lib/yard/cli/config.rb"},{"file_line":1,"file_path":"lib/yard/cli/server.rb"},{"file_line":3,"file_path":"lib/yard/cli/command.rb"},{"file_line":1,"file_path":"lib/yard/parser/base.rb"},{"file_line":1,"file_path":"lib/yard/tags/ref_tag.rb"},{"file_line":1,"file_path":"lib/yard/tags/library.rb"},{"file_line":3,"file_path":"lib/yard/i18n/message.rb"},{"file_line":1,"file_path":"lib/yard/handlers/base.rb"},{"file_line":1,"file_path":"lib/yard/server/router.rb"},{"file_line":1,"file_path":"lib/yard/i18n/messages.rb"},{"file_line":1,"file_path":"lib/yard/server/adapter.rb"},{"file_line":3,"file_path":"lib/yard/registry_store.rb"},{"file_line":3,"file_path":"lib/yard/tags/directives.rb"},{"file_line":1,"file_path":"lib/yard/tags/option_tag.rb"},{"file_line":1,"file_path":"lib/yard/handlers/c/base.rb"},{"file_line":1,"file_path":"lib/yard/serializers/base.rb"},{"file_line":4,"file_path":"lib/yard/rake/yardoc_task.rb"},{"file_line":3,"file_path":"lib/yard/templates/engine.rb"},{"file_line":3,"file_path":"lib/yard/docstring_parser.rb"},{"file_line":1,"file_path":"lib/yard/tags/default_tag.rb"},{"file_line":1,"file_path":"lib/yard/parser/c/c_parser.rb"},{"file_line":1,"file_path":"lib/yard/templates/section.rb"},{"file_line":1,"file_path":"lib/yard/tags/ref_tag_list.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/base.rb"},{"file_line":1,"file_path":"lib/yard/tags/overload_tag.rb"},{"file_line":3,"file_path":"lib/yard/handlers/processor.rb"},{"file_line":1,"file_path":"lib/yard/cli/command_parser.rb"},{"file_line":3,"file_path":"lib/yard/i18n/pot_generator.rb"},{"file_line":1,"file_path":"lib/yard/handlers/ruby/base.rb"},{"file_line":3,"file_path":"lib/yard/templates/template.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/proxy.rb"},{"file_line":1,"file_path":"lib/yard/parser/c/statement.rb"},{"file_line":1,"file_path":"lib/yard/templates/erb_cache.rb"},{"file_line":4,"file_path":"lib/yard/server/rack_adapter.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/base.rb"},{"file_line":1,"file_path":"lib/yard/tags/default_factory.rb"},{"file_line":1,"file_path":"lib/yard/parser/ruby/ast_node.rb"},{"file_line":4,"file_path":"lib/yard/parser/source_parser.rb"},{"file_line":1,"file_path":"lib/yard/tags/tag_format_error.rb"},{"file_line":1,"file_path":"lib/yard/server/static_caching.rb"},{"file_line":3,"file_path":"lib/yard/server/library_version.rb"},{"file_line":3,"file_path":"lib/yard/server/webrick_adapter.rb"},{"file_line":3,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":1,"file_path":"lib/yard/parser/c/comment_parser.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/root_object.rb"},{"file_line":1,"file_path":"lib/yard/server/doc_server_helper.rb"},{"file_line":1,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"},{"file_line":3,"file_path":"lib/yard/code_objects/macro_object.rb"},{"file_line":1,"file_path":"lib/yard/handlers/ruby/dsl_handler.rb"},{"file_line":3,"file_path":"lib/yard/templates/template_options.rb"},{"file_line":1,"file_path":"lib/yard/handlers/c/handler_methods.rb"},{"file_line":4,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/list_command.rb"},{"file_line":3,"file_path":"lib/yard/server/doc_server_serializer.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/uml_helper.rb"},{"file_line":1,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"},{"file_line":1,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"},{"file_line":1,"file_path":"lib/yard/serializers/yardoc_serializer.rb"},{"file_line":1,"file_path":"lib/yard/serializers/stdout_serializer.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/text_helper.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/html_helper.rb"},{"file_line":1,"file_path":"lib/yard/serializers/process_serializer.rb"},{"file_line":1,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/search_command.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/frames_command.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/module_helper.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/library_command.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/method_helper.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/filter_helper.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/markup_helper.rb"},{"file_line":1,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"},{"file_line":1,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"},{"file_line":1,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"},{"file_line":1,"file_path":"lib/yard/serializers/file_system_serializer.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/static_file_command.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/display_file_command.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/library_index_command.rb"},{"file_line":1,"file_path":"lib/yard/server/commands/display_object_command.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "YARD",
            "namespace":                    "",
            "path":                         "YARD",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AVERSION","YARD%3A%3AROOT","YARD%3A%3ATEMPLATE_ROOT","YARD%3A%3ACONFIG_DIR","YARD.parse","YARD.parse_string","YARD.load_plugins","YARD%3A%3AConfig","YARD%3A%3AServer","YARD%3A%3ACLI","YARD%3A%3ALogger","YARD%3A%3AOptions","YARD%3A%3ARegistry","YARD%3A%3ACodeObjects","YARD%3A%3AHandlers","YARD%3A%3AI18n","YARD%3A%3AParser","YARD%3A%3ARake","YARD%3A%3ASerializers","YARD%3A%3ATags","YARD%3A%3ATemplates","YARD%3A%3AVerifier","YARD%3A%3ADocstring","YARD%3A%3ARegistryStore","YARD%3A%3ADocstringParser","YARD%3A%3AStubProxy"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fconfig.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Flogging.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Foptions.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fhelp.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Flist.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fregistry.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fverifier.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fi18n%2Ftext.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fdocstring.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Fref_tag.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fregistry_store.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Fdefault_tag.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Ferb_cache.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftags%2Ftag_format_error.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fstatic_caching.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flist_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_serializer.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserializers%2Fprocess_serializer.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fframes_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmodule_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_file_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   2,
            "y_ld:path":                    "YARD"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Config.load_plugins",
            "docstring_extra":              "",
            "docstring_extra_tags":         ["#<YARD::Tags::Tag:0x101543588>"],
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard.rb"}],
            "name":                         "load_plugins",
            "namespace":                    "YARD",
            "path":                         "YARD.load_plugins",
            "scope":                        "class",
            "signature":                    "def self.load_plugins; YARD::Config.load_plugins end",
            "source":                       "def self.load_plugins; YARD::Config.load_plugins end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD.load_plugins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "An alias to {Parser::SourceParser}'s parsing method",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD.parse",
            "scope":                        "class",
            "signature":                    "def self.parse(*args) Parser::SourceParser.parse(*args) end",
            "source":                       "def self.parse(*args) Parser::SourceParser.parse(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD.parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "An alias to {Parser::SourceParser}'s parsing method",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard.rb"}],
            "name":                         "parse_string",
            "namespace":                    "YARD",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD.parse_string",
            "scope":                        "class",
            "signature":                    "def self.parse_string(*args) Parser::SourceParser.parse_string(*args) end",
            "source":                       "def self.parse_string(*args) Parser::SourceParser.parse_string(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD.parse_string"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::YRI","YARD::CLI::I18n","YARD::CLI::Help","YARD::CLI::Gems","YARD::CLI::List","YARD::CLI::Diff","YARD::CLI::Stats","YARD::CLI::Graph","YARD::CLI::YardocOptions","YARD::CLI::Yardoc","YARD::CLI::Config","YARD::CLI::Server","YARD::CLI::Command","YARD::CLI::CommandParser"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for command-line interface components",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/autoload.rb"},{"file_line":4,"file_path":"lib/yard/cli/yri.rb"},{"file_line":4,"file_path":"lib/yard/cli/i18n.rb"},{"file_line":2,"file_path":"lib/yard/cli/help.rb"},{"file_line":2,"file_path":"lib/yard/cli/gems.rb"},{"file_line":2,"file_path":"lib/yard/cli/list.rb"},{"file_line":6,"file_path":"lib/yard/cli/diff.rb"},{"file_line":2,"file_path":"lib/yard/cli/stats.rb"},{"file_line":2,"file_path":"lib/yard/cli/graph.rb"},{"file_line":5,"file_path":"lib/yard/cli/yardoc.rb"},{"file_line":2,"file_path":"lib/yard/cli/config.rb"},{"file_line":2,"file_path":"lib/yard/cli/server.rb"},{"file_line":4,"file_path":"lib/yard/cli/command.rb"},{"file_line":2,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "CLI",
            "namespace":                    "YARD",
            "path":                         "YARD::CLI",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AYRI","YARD%3A%3ACLI%3A%3AI18n","YARD%3A%3ACLI%3A%3AHelp","YARD%3A%3ACLI%3A%3AGems","YARD%3A%3ACLI%3A%3AList","YARD%3A%3ACLI%3A%3ADiff","YARD%3A%3ACLI%3A%3AStats","YARD%3A%3ACLI%3A%3AGraph","YARD%3A%3ACLI%3A%3AYardocOptions","YARD%3A%3ACLI%3A%3AYardoc","YARD%3A%3ACLI%3A%3AConfig","YARD%3A%3ACLI%3A%3AServer","YARD%3A%3ACLI%3A%3ACommand","YARD%3A%3ACLI%3A%3ACommandParser"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fhelp.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Flist.rb"},{"file_line":6,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ACLI"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::Command.run","YARD::CLI::Command#description","YARD::CLI::Command#common_options","YARD::CLI::Command#parse_options","YARD::CLI::Command#load_script"],
            "current_file_has_comments":    true,
            "docstring":                    "Abstract base class for CLI utilities. Provides some helper methods for\nthe option parser",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "Command",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Command",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3ACommand.run","YARD%3A%3ACLI%3A%3ACommand%23description","YARD%3A%3ACLI%3A%3ACommand%23common_options","YARD%3A%3ACLI%3A%3ACommand%23parse_options","YARD%3A%3ACLI%3A%3ACommand%23load_script"],
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a set of common options to the tail of the OptionParser",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "common_options",
            "namespace":                    "YARD::CLI::Command",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Command#common_options",
            "scope":                        "instance",
            "signature":                    "def common_options(opts)",
            "source":                       "def common_options(opts)\n  opts.separator \"\"\n  opts.separator \"Other options:\"\n  opts.on('-e', '--load FILE', 'A Ruby script to load before running command.') do |file|\n    load_script(file)\n  end\n  opts.on('--plugin PLUGIN', 'Load a YARD plugin (gem with `yard-\\' prefix)') do |name|\n    # Not actually necessary to load here, this is done at boot in YARD::Config.load_plugins\n    # YARD::Config.load_plugin(name)\n  end\n  opts.on('--legacy', 'Use old style Ruby parser and handlers. ',\n                      '  Always on in 1.8.x.') do\n    YARD::Parser::SourceParser.parser_type = :ruby18\n  end\n  opts.on('--safe', 'Enable safe mode for this instance') do\n    # Parsed in YARD::Config.load\n  end\n  opts.on_tail('-q', '--quiet', 'Show no warnings.') { log.level = Logger::ERROR }\n  opts.on_tail('--verbose', 'Show more information.') { log.level = Logger::INFO }\n  opts.on_tail('--debug', 'Show debugging information.') { log.level = Logger::DEBUG }\n  opts.on_tail('--backtrace', 'Show stack traces') { log.show_backtraces = true }\n  opts.on_tail('-v', '--version', 'Show version.') { puts \"yard #{YARD::VERSION}\"; exit }\n  opts.on_tail('-h', '--help', 'Show this help.')  { puts opts; exit }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand%23common_options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Command",
            "path":                         "YARD::CLI::Command#description",
            "scope":                        "instance",
            "signature":                    "def description; '' end",
            "source":                       "def description; '' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads a Ruby script. If <tt>Config.options[:safe_mode]</tt> is enabled,\nthis method will do nothing.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "load_script",
            "namespace":                    "YARD::CLI::Command",
            "parameters":                   [{"parm_type":null,"parm_name":"file"}],
            "path":                         "YARD::CLI::Command#load_script",
            "scope":                        "instance",
            "signature":                    "def load_script(file)",
            "source":                       "def load_script(file)\n  return if YARD::Config.options[:safe_mode]\n  load(file)\nrescue LoadError => load_exception\n  log.error \"The file `#{file}' could not be loaded:\\n#{load_exception}\"\n  exit\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand%23load_script"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the option and gracefully handles invalid switches",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "parse_options",
            "namespace":                    "YARD::CLI::Command",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"},{"parm_type":null,"parm_name":"args"}],
            "path":                         "YARD::CLI::Command#parse_options",
            "scope":                        "instance",
            "signature":                    "def parse_options(opts, args)",
            "source":                       "def parse_options(opts, args)\n  opts.parse!(args)\nrescue OptionParser::ParseError => err\n  log.warn \"Unrecognized/#{err.message}\"\n  args.shift if args.first && args.first[0,1] != '-'\n  retry\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand%23parse_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Helper method to run the utility on an instance.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Command",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Command.run",
            "scope":                        "class",
            "signature":                    "def self.run(*args) new.run(*args) end",
            "source":                       "def self.run(*args) new.run(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fcommand.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommand.run"
        },
        {
            "attributes":                   {"class":{"commands":{"write":"YARD::CLI::CommandParser.commands=","read":"YARD::CLI::CommandParser.commands"},"default_command":{"write":"YARD::CLI::CommandParser.default_command=","read":"YARD::CLI::CommandParser.default_command"}},"instance":{}},
            "children":                     ["YARD::CLI::CommandParser.commands=","YARD::CLI::CommandParser.commands","YARD::CLI::CommandParser.default_command=","YARD::CLI::CommandParser.default_command","YARD::CLI::CommandParser.run","YARD::CLI::CommandParser#initialize","YARD::CLI::CommandParser#run","YARD::CLI::CommandParser#commands","YARD::CLI::CommandParser#list_commands"],
            "current_file_has_comments":    true,
            "docstring":                    "This class parses a command name out of the +yard+ CLI command and calls\nthat command in the form:\n\n  $ yard command_name [options]\n\nIf no command or arguments are specified, or if the arguments immediately\nbegin with a +--opt+ (not +--help+), the {default_command} will be used\n(which itself defaults to +:doc+).\n\n== Adding a Command\n\nTo add a custom command via plugin, create a mapping in {commands} from\nthe Symbolic command name to the {Command} class that implements the\ncommand. To implement a command, see the documentation for the {Command}\nclass.",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "CommandParser",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::CommandParser",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3ACommandParser.commands%3D","YARD%3A%3ACLI%3A%3ACommandParser.commands","YARD%3A%3ACLI%3A%3ACommandParser.default_command%3D","YARD%3A%3ACLI%3A%3ACommandParser.default_command","YARD%3A%3ACLI%3A%3ACommandParser.run","YARD%3A%3ACLI%3A%3ACommandParser%23initialize","YARD%3A%3ACLI%3A%3ACommandParser%23run","YARD%3A%3ACLI%3A%3ACommandParser%23commands","YARD%3A%3ACLI%3A%3ACommandParser%23list_commands"],
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "commands",
            "namespace":                    "YARD::CLI::CommandParser",
            "path":                         "YARD::CLI::CommandParser#commands",
            "scope":                        "instance",
            "signature":                    "def commands; self.class.commands end",
            "source":                       "def commands; self.class.commands end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser%23commands"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::CommandParser",
            "path":                         "YARD::CLI::CommandParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  log.show_backtraces = false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":79,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "list_commands",
            "namespace":                    "YARD::CLI::CommandParser",
            "path":                         "YARD::CLI::CommandParser#list_commands",
            "scope":                        "instance",
            "signature":                    "def list_commands",
            "source":                       "def list_commands\n  puts \"Usage: yard <command> [options]\"\n  puts\n  puts \"Commands:\"\n  commands.keys.sort_by {|k| k.to_s }.each do |command_name|\n    command = commands[command_name].new\n    puts \"%-8s %s\" % [command_name, command.description]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":79,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser%23list_commands"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the {Command} object matching the command name of the first\nargument.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::CommandParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::CommandParser#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  unless args == ['--help']\n    if args.size == 0 || args.first =~ /^-/\n      command_name = self.class.default_command\n    else\n      command_name = args.first.to_sym\n      args.shift\n    end\n    if commands.has_key?(command_name)\n      return commands[command_name].run(*args)\n    end\n  end\n  list_commands\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "commands",
            "namespace":                    "YARD::CLI::CommandParser",
            "path":                         "YARD::CLI::CommandParser.commands",
            "scope":                        "class",
            "signature":                    "def commands",
            "source":                       "def commands\n  @commands\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser.commands"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "commands=",
            "namespace":                    "YARD::CLI::CommandParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::CommandParser.commands=",
            "scope":                        "class",
            "signature":                    "def commands=(value)",
            "source":                       "def commands=(value)\n  @commands = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser.commands%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "default_command",
            "namespace":                    "YARD::CLI::CommandParser",
            "path":                         "YARD::CLI::CommandParser.default_command",
            "scope":                        "class",
            "signature":                    "def default_command",
            "source":                       "def default_command\n  @default_command\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser.default_command"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "default_command=",
            "namespace":                    "YARD::CLI::CommandParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::CommandParser.default_command=",
            "scope":                        "class",
            "signature":                    "def default_command=(value)",
            "source":                       "def default_command=(value)\n  @default_command = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser.default_command%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Convenience method to create a new CommandParser and call {#run}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/cli/command_parser.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::CommandParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::CommandParser.run",
            "scope":                        "class",
            "signature":                    "def self.run(*args) new.run(*args) end",
            "source":                       "def self.run(*args) new.run(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fcli%2Fcommand_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ACommandParser.run"
        },
        {
            "attributes":                   {"class":{},"instance":{"key":{"write":"YARD::CLI::Config#key=","read":"YARD::CLI::Config#key"},"append":{"write":"YARD::CLI::Config#append=","read":"YARD::CLI::Config#append"},"values":{"write":"YARD::CLI::Config#values=","read":"YARD::CLI::Config#values"},"reset":{"write":"YARD::CLI::Config#reset=","read":"YARD::CLI::Config#reset"},"as_list":{"write":"YARD::CLI::Config#as_list=","read":"YARD::CLI::Config#as_list"}}},
            "children":                     ["YARD::CLI::Config#key=","YARD::CLI::Config#key","YARD::CLI::Config#values=","YARD::CLI::Config#values","YARD::CLI::Config#reset=","YARD::CLI::Config#reset","YARD::CLI::Config#as_list=","YARD::CLI::Config#as_list","YARD::CLI::Config#append=","YARD::CLI::Config#append","YARD::CLI::Config#initialize","YARD::CLI::Config#description","YARD::CLI::Config#run","YARD::CLI::Config#modify_item","YARD::CLI::Config#view_item","YARD::CLI::Config#list_configuration","YARD::CLI::Config#encode_values","YARD::CLI::Config#encode_value","YARD::CLI::Config#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "CLI command to view or edit configuration options",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "Config",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Config",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AConfig%23key%3D","YARD%3A%3ACLI%3A%3AConfig%23key","YARD%3A%3ACLI%3A%3AConfig%23values%3D","YARD%3A%3ACLI%3A%3AConfig%23values","YARD%3A%3ACLI%3A%3AConfig%23reset%3D","YARD%3A%3ACLI%3A%3AConfig%23reset","YARD%3A%3ACLI%3A%3AConfig%23as_list%3D","YARD%3A%3ACLI%3A%3AConfig%23as_list","YARD%3A%3ACLI%3A%3AConfig%23append%3D","YARD%3A%3ACLI%3A%3AConfig%23append","YARD%3A%3ACLI%3A%3AConfig%23initialize","YARD%3A%3ACLI%3A%3AConfig%23description","YARD%3A%3ACLI%3A%3AConfig%23run","YARD%3A%3ACLI%3A%3AConfig%23modify_item","YARD%3A%3ACLI%3A%3AConfig%23view_item","YARD%3A%3ACLI%3A%3AConfig%23list_configuration","YARD%3A%3ACLI%3A%3AConfig%23encode_values","YARD%3A%3ACLI%3A%3AConfig%23encode_value","YARD%3A%3ACLI%3A%3AConfig%23optparse"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "append",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#append",
            "scope":                        "instance",
            "signature":                    "def append",
            "source":                       "def append\n  @append\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23append"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "append=",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#append=",
            "scope":                        "instance",
            "signature":                    "def append=(value)",
            "source":                       "def append=(value)\n  @append = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23append%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "as_list",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#as_list",
            "scope":                        "instance",
            "signature":                    "def as_list",
            "source":                       "def as_list\n  @as_list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23as_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "as_list=",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#as_list=",
            "scope":                        "instance",
            "signature":                    "def as_list=(value)",
            "source":                       "def as_list=(value)\n  @as_list = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23as_list%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  'Views or edits current global configuration'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "encode_value",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#encode_value",
            "scope":                        "instance",
            "signature":                    "def encode_value(value)",
            "source":                       "def encode_value(value)\n  case value\n  when /^-?\\d+/; value.to_i\n  when \"true\"; true\n  when \"false\"; false\n  else value\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23encode_value"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "encode_values",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#encode_values",
            "scope":                        "instance",
            "signature":                    "def encode_values",
            "source":                       "def encode_values\n  if values.size == 1 && !as_list\n    encode_value(values.first)\n  else\n    values.map {|v| encode_value(v) }\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23encode_values"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  self.key = nil\n  self.values = []\n  self.reset = false\n  self.append = false\n  self.as_list = false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "key",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#key",
            "scope":                        "instance",
            "signature":                    "def key",
            "source":                       "def key\n  @key\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23key"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "key=",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#key=",
            "scope":                        "instance",
            "signature":                    "def key=(value)",
            "source":                       "def key=(value)\n  @key = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23key%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "list_configuration",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#list_configuration",
            "scope":                        "instance",
            "signature":                    "def list_configuration",
            "source":                       "def list_configuration\n  log.debug \"Listing configuration\"\n  require 'yaml'\n  puts YAML.dump(YARD::Config.options).sub(/\\A--.*\\n/, '').gsub(/\\n\\n/, \"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23list_configuration"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "modify_item",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#modify_item",
            "scope":                        "instance",
            "signature":                    "def modify_item",
            "source":                       "def modify_item\n  if reset\n    log.debug \"Resetting #{key}\"\n    YARD::Config.options[key] = YARD::Config::DEFAULT_CONFIG_OPTIONS[key]\n  else\n    log.debug \"Setting #{key} to #{values.inspect}\"\n    items, current_items = encode_values, YARD::Config.options[key]\n    items = [current_items].flatten + [items].flatten if append\n    YARD::Config.options[key] = items\n  end\n  YARD::Config.save\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23modify_item"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Config#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  list = false\n  self.as_list = false\n  self.append = false\n  opts = OptionParser.new\n  opts.banner = \"Usage: yard config [options] [item [value ...]]\"\n  opts.separator \"\"\n  opts.separator \"Example: yard config load_plugins true\"\n  opts.separator \"\"\n  opts.separator \"Views and sets configuration items. If an item is provided\"\n  opts.separator \"With no value, the item is viewed. If a value is provided,\"\n  opts.separator \"the item is modified. Specifying no item is equivalent to --list.\"\n  opts.separator \"If you specify multiple space delimited values, these are\"\n  opts.separator \"parsed as an array of values.\"\n  opts.separator \"\"\n  opts.separator \"Note that `true` and `false` are reserved words.\"\n  opts.separator \"\"\n  opts.separator \"General options:\"\n\n  opts.on('-l', '--list', 'List current configuration') do\n    list = true\n  end\n  opts.on('-r', '--reset', 'Resets the specific item to default') do\n    self.reset = true\n  end\n\n  opts.separator \"\"\n  opts.separator \"Modifying keys:\"\n\n  opts.on('-a', '--append', 'Appends items to existing key values') do\n    self.append = true\n  end\n  opts.on('--as-list', 'Forces the value(s) to be wrapped in an array') do\n    self.as_list = true\n  end\n\n  common_options(opts)\n  parse_options(opts, args)\n  args = [] if list\n  self.key = args.shift.to_sym if args.size >= 1\n  self.values = args if args.size >= 1\n  args\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "reset",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#reset",
            "scope":                        "instance",
            "signature":                    "def reset",
            "source":                       "def reset\n  @reset\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23reset"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "reset=",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#reset=",
            "scope":                        "instance",
            "signature":                    "def reset=(value)",
            "source":                       "def reset=(value)\n  @reset = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23reset%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Config#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  optparse(*args)\n  if key\n    if reset || values.size > 0\n      modify_item\n    else\n      view_item\n    end\n  else\n    list_configuration\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "values",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#values",
            "scope":                        "instance",
            "signature":                    "def values",
            "source":                       "def values\n  @values\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23values"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "values=",
            "namespace":                    "YARD::CLI::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Config#values=",
            "scope":                        "instance",
            "signature":                    "def values=(value)",
            "source":                       "def values=(value)\n  @values = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23values%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/cli/config.rb"}],
            "name":                         "view_item",
            "namespace":                    "YARD::CLI::Config",
            "path":                         "YARD::CLI::Config#view_item",
            "scope":                        "instance",
            "signature":                    "def view_item",
            "source":                       "def view_item\n  log.debug \"Viewing #{key}\"\n  puts YARD::Config.options[key].inspect\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fcli%2Fconfig.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AConfig%23view_item"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::Diff#initialize","YARD::CLI::Diff#description","YARD::CLI::Diff#run","YARD::CLI::Diff#load_git_commit","YARD::CLI::Diff#load_gem_data","YARD::CLI::Diff#expand_and_parse","YARD::CLI::Diff#generate_yardoc","YARD::CLI::Diff#expand_gem","YARD::CLI::Diff#require_rubygems","YARD::CLI::Diff#cleanup","YARD::CLI::Diff#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "CLI command to return the objects that were added/removed from 2 versions\nof a project (library, gem, working copy).",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "Diff",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Diff",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3ADiff%23initialize","YARD%3A%3ACLI%3A%3ADiff%23description","YARD%3A%3ACLI%3A%3ADiff%23run","YARD%3A%3ACLI%3A%3ADiff%23load_git_commit","YARD%3A%3ACLI%3A%3ADiff%23load_gem_data","YARD%3A%3ACLI%3A%3ADiff%23expand_and_parse","YARD%3A%3ACLI%3A%3ADiff%23generate_yardoc","YARD%3A%3ACLI%3A%3ADiff%23expand_gem","YARD%3A%3ACLI%3A%3ADiff%23require_rubygems","YARD%3A%3ACLI%3A%3ADiff%23cleanup","YARD%3A%3ACLI%3A%3ADiff%23optparse"],
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":168,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "cleanup",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"gemfile"}],
            "path":                         "YARD::CLI::Diff#cleanup",
            "scope":                        "instance",
            "signature":                    "def cleanup(gemfile)",
            "source":                       "def cleanup(gemfile)\n  dir = File.join(Dir.tmpdir, gemfile)\n  log.info \"Cleaning up #{dir}...\"\n  FileUtils.rm_rf(dir)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":168,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23cleanup"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Diff",
            "path":                         "YARD::CLI::Diff#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  'Returns the object diff of two gems or .yardoc files'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":135,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "expand_and_parse",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"gemfile"},{"parm_type":null,"parm_name":"io"}],
            "path":                         "YARD::CLI::Diff#expand_and_parse",
            "scope":                        "instance",
            "signature":                    "def expand_and_parse(gemfile, io)",
            "source":                       "def expand_and_parse(gemfile, io)\n  dir = expand_gem(gemfile, io)\n  generate_yardoc(dir)\n  cleanup(gemfile)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":135,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23expand_and_parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":148,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "expand_gem",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"gemfile"},{"parm_type":null,"parm_name":"io"}],
            "path":                         "YARD::CLI::Diff#expand_gem",
            "scope":                        "instance",
            "signature":                    "def expand_gem(gemfile, io)",
            "source":                       "def expand_gem(gemfile, io)\n  tmpdir = File.join(Dir.tmpdir, gemfile)\n  log.info \"Expanding #{gemfile} to #{tmpdir}...\"\n  FileUtils.mkdir_p(tmpdir)\n  Gem::Package.open(io) do |pkg|\n    pkg.each do |entry|\n      pkg.extract_entry(tmpdir, entry)\n    end\n  end\n  tmpdir\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":148,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23expand_gem"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":141,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "generate_yardoc",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"dir"}],
            "path":                         "YARD::CLI::Diff#generate_yardoc",
            "scope":                        "instance",
            "signature":                    "def generate_yardoc(dir)",
            "source":                       "def generate_yardoc(dir)\n  olddir = Dir.pwd\n  Dir.chdir(dir)\n  log.enter_level(Logger::ERROR) { Yardoc.run('-n', '--no-save') }\n  Dir.chdir(olddir)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":141,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23generate_yardoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Diff",
            "path":                         "YARD::CLI::Diff#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  @list_all = false\n  @use_git = false\n  @old_git_commit = nil\n  @old_path = Dir.pwd\n  log.show_backtraces = true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "load_gem_data",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"gemfile"}],
            "path":                         "YARD::CLI::Diff#load_gem_data",
            "scope":                        "instance",
            "signature":                    "def load_gem_data(gemfile)",
            "source":                       "def load_gem_data(gemfile)\n  require_rubygems\n  Registry.clear\n\n  # First check for argument as .yardoc file\n  [File.join(gemfile, '.yardoc'), gemfile].each do |yardoc|\n    log.info \"Searching for .yardoc db at #{yardoc}\"\n    if File.directory?(yardoc)\n      Registry.load_yardoc(yardoc)\n      Registry.load_all\n      return true\n    end\n  end\n\n  # Next check installed RubyGems\n  gemfile_without_ext = gemfile.sub(/\\.gem$/, '')\n  log.info \"Searching for installed gem #{gemfile_without_ext}\"\n  Gem.source_index.find_name('').find do |spec|\n    if spec.full_name == gemfile_without_ext\n      if yardoc = Registry.yardoc_file_for_gem(spec.name, \"= #{spec.version}\")\n        Registry.load_yardoc(yardoc)\n        Registry.load_all\n      else\n        log.enter_level(Logger::ERROR) do\n          olddir = Dir.pwd\n          Gems.run(spec.name, spec.version.to_s)\n          Dir.chdir(olddir)\n        end\n      end\n      return true\n    end\n  end\n\n  # Look for local .gem file\n  gemfile += '.gem' unless gemfile =~ /\\.gem$/\n  log.info \"Searching for local gem file #{gemfile}\"\n  if File.exist?(gemfile)\n    File.open(gemfile, 'rb') do |io|\n      expand_and_parse(gemfile, io)\n    end\n    return true\n  end\n\n  # Remote gemfile from rubygems.org\n  url = \"http://rubygems.org/downloads/#{gemfile}\"\n  log.info \"Searching for remote gem file #{url}\"\n  begin\n    open(url) {|io| expand_and_parse(gemfile, io) }\n    return true\n  rescue OpenURI::HTTPError\n  end\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23load_gem_data"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "load_git_commit",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"commit"}],
            "path":                         "YARD::CLI::Diff#load_git_commit",
            "scope":                        "instance",
            "signature":                    "def load_git_commit(commit)",
            "source":                       "def load_git_commit(commit)\n  commit_path = 'git_commit' + commit.gsub(/\\W/, '_')\n  tmpdir = File.join(Dir.tmpdir, commit_path)\n  log.info \"Expanding #{commit} to #{tmpdir}...\"\n  Dir.chdir(@old_path)\n  FileUtils.mkdir_p(tmpdir)\n  FileUtils.cp_r('.', tmpdir)\n  Dir.chdir(tmpdir)\n  log.info(\"git says: \" + `git reset --hard #{commit}`.chomp)\n  generate_yardoc(tmpdir)\n  Dir.chdir(@old_path)\n  cleanup(commit_path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23load_git_commit"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":174,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Diff#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = \"Usage: yard diff [options] oldgem newgem\"\n  opts.separator \"\"\n  opts.separator \"Example: yard diff yard-0.5.6 yard-0.5.8\"\n  opts.separator \"\"\n  opts.separator \"If the files don't exist locally, they will be grabbed using the `gem fetch`\"\n  opts.separator \"command. If the gem is a .yardoc directory, it will be used. Finally, if the\"\n  opts.separator \"gem name matches an installed gem (full name-version syntax), that gem will be used.\"\n\n  opts.on('-a', '--all', 'List all objects, even if they are inside added/removed module/class') do\n    @list_all = true\n  end\n  opts.on('--git', 'Compare versions from two git commit/branches') do\n    @use_git = true\n  end\n  common_options(opts)\n  parse_options(opts, args)\n  unless args.size == 2\n    puts opts.banner\n    exit(0)\n  end\n\n  args\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":174,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23optparse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":160,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "require_rubygems",
            "namespace":                    "YARD::CLI::Diff",
            "path":                         "YARD::CLI::Diff#require_rubygems",
            "scope":                        "instance",
            "signature":                    "def require_rubygems",
            "source":                       "def require_rubygems\n  require 'rubygems'\n  require 'rubygems/package'\nrescue LoadError => e\n  log.error \"Missing RubyGems, cannot run this command.\"\n  raise(e)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":160,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23require_rubygems"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/diff.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Diff",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Diff#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  registry = optparse(*args).map do |gemfile|\n    if @use_git\n      load_git_commit(gemfile)\n      Registry.all.map {|o| o.path }\n    else\n      if load_gem_data(gemfile)\n        log.info \"Found #{gemfile}\"\n        Registry.all.map {|o| o.path }\n      else\n        log.error \"Cannot find gem #{gemfile}\"\n        nil\n      end\n    end\n  end.compact\n\n  return if registry.size != 2\n\n  [   [\"Added objects\", registry[1] - registry[0]],\n      [\"Removed objects\", registry[0] - registry[1]]].each do |name, objects|\n    next if objects.empty?\n    last_object = nil\n    all_objects_notice = false\n    puts name + \":\"\n    objects.sort.each do |object|\n      if !@list_all && last_object && object =~ /#{Regexp.quote last_object}(::|\\.|#)/\n        print \" (...)\" unless all_objects_notice\n        all_objects_notice = true\n        next\n      else\n        puts\n      end\n      all_objects_notice = false\n      print \"  \" + object\n      last_object = object\n    end\n    puts\n    puts\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fdiff.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3ADiff%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::Gems#initialize","YARD::CLI::Gems#description","YARD::CLI::Gems#run","YARD::CLI::Gems#build_gems","YARD::CLI::Gems#add_gems","YARD::CLI::Gems#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "Gems",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Gems",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AGems%23initialize","YARD%3A%3ACLI%3A%3AGems%23description","YARD%3A%3ACLI%3A%3AGems%23run","YARD%3A%3ACLI%3A%3AGems%23build_gems","YARD%3A%3ACLI%3A%3AGems%23add_gems","YARD%3A%3ACLI%3A%3AGems%23optparse"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "add_gems",
            "namespace":                    "YARD::CLI::Gems",
            "parameters":                   [{"parm_type":null,"parm_name":"gems"}],
            "path":                         "YARD::CLI::Gems#add_gems",
            "scope":                        "instance",
            "signature":                    "def add_gems(gems)",
            "source":                       "def add_gems(gems)\n  0.step(gems.size - 1, 2) do |index|\n    gem, ver_require = gems[index], gems[index + 1] || \">= 0\"\n    specs = Gem.source_index.find_name(gem, ver_require)\n    if specs.empty?\n      log.warn \"#{gem} #{ver_require} could not be found in RubyGems index\"\n    else\n      @gems += specs\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23add_gems"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Builds .yardoc files for all non-existing gems",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "build_gems",
            "namespace":                    "YARD::CLI::Gems",
            "path":                         "YARD::CLI::Gems#build_gems",
            "scope":                        "instance",
            "signature":                    "def build_gems",
            "source":                       "def build_gems\n  require 'rubygems'\n  @gems.each do |spec|\n    ver = \"= #{spec.version}\"\n    dir = Registry.yardoc_file_for_gem(spec.name, ver)\n    if dir && File.directory?(dir) && !@rebuild\n      log.debug \"#{spec.name} index already exists at '#{dir}'\"\n    else\n      yfile = Registry.yardoc_file_for_gem(spec.name, ver, true)\n      next unless yfile\n      next unless File.directory?(spec.full_gem_path)\n      Registry.clear\n      Dir.chdir(spec.full_gem_path)\n      log.info \"Building yardoc index for gem: #{spec.full_name}\"\n      Yardoc.run('--no-stats', '-n', '-b', yfile)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23build_gems"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Gems",
            "path":                         "YARD::CLI::Gems#description",
            "scope":                        "instance",
            "signature":                    "def description; \"Builds YARD index for gems\" end",
            "source":                       "def description; \"Builds YARD index for gems\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Gems",
            "path":                         "YARD::CLI::Gems#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  @rebuild = false\n  @gems = []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Gems",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Gems#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = 'Usage: yard gems [options] [gem_name [version]]'\n  opts.separator \"\"\n  opts.separator \"#{description}. If no gem_name is given,\"\n  opts.separator \"all gems are built.\"\n  opts.separator \"\"\n  opts.on('--rebuild', 'Rebuilds index') do\n    @rebuild = true\n  end\n\n  common_options(opts)\n  parse_options(opts, args)\n  add_gems(args)\n\n\n  if !args.empty? && @gems.empty?\n    log.error \"No specified gems could be found for command\"\n  elsif @gems.empty?\n    @gems += Gem.source_index.find_name('') if @gems.empty?\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the commandline utility, parsing arguments and generating\nYARD indexes for gems.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/cli/gems.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Gems",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Gems#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  require 'rubygems'\n  optparse(*args)\n  build_gems\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fcli%2Fgems.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGems%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{"objects":{"write":null,"read":"YARD::CLI::Graph#objects"},"options":{"write":null,"read":"YARD::CLI::Graph#options"}}},
            "children":                     ["YARD::CLI::Graph#options","YARD::CLI::Graph#objects","YARD::CLI::Graph#initialize","YARD::CLI::Graph#description","YARD::CLI::Graph#run","YARD::CLI::Graph#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "A command-line utility to generate Graphviz graphs from\na set of objects",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "Graph",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Graph",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AGraph%23options","YARD%3A%3ACLI%3A%3AGraph%23objects","YARD%3A%3ACLI%3A%3AGraph%23initialize","YARD%3A%3ACLI%3A%3AGraph%23description","YARD%3A%3ACLI%3A%3AGraph%23run","YARD%3A%3ACLI%3A%3AGraph%23optparse"],
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Graph",
            "path":                         "YARD::CLI::Graph#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  \"Graphs class diagram using Graphviz\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new instance of the command-line utility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Graph",
            "path":                         "YARD::CLI::Graph#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  @serializer = YARD::Serializers::StdoutSerializer.new\n  @options = SymbolHash[:format => :dot]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The set of objects to include\u0003 in the graph.",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "objects",
            "namespace":                    "YARD::CLI::Graph",
            "path":                         "YARD::CLI::Graph#objects",
            "scope":                        "instance",
            "signature":                    "def objects",
            "source":                       "def objects\n  @objects\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23objects"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The options parsed out of the commandline.\nDefault options are:\n  :format => :dot",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::CLI::Graph",
            "path":                         "YARD::CLI::Graph#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses commandline options.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Graph",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Graph#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  visibilities = []\n  opts = OptionParser.new\n\n  opts.separator \"\"\n  opts.separator \"General Options:\"\n\n  opts.on('-b', '--db FILE', 'Use a specified .yardoc db to load from or save to. (defaults to .yardoc)') do |yfile|\n    YARD::Registry.yardoc_file = yfile\n  end\n\n  opts.on('--full', 'Full class diagrams (show methods and attributes).') do\n    options[:full] = true\n  end\n\n  opts.on('-d', '--dependencies', 'Show mixins in dependency graph.') do\n    options[:dependencies] = true\n  end\n\n  opts.on('--no-public', \"Don't show public methods. (default shows public)\") do\n    visibilities.delete(:public)\n  end\n\n  opts.on('--protected', \"Show or don't show protected methods. (default hides protected)\") do\n    visibilities.push(:protected)\n  end\n\n  opts.on('--private', \"Show or don't show private methods. (default hides private)\") do\n    visibilities.push(:private)\n  end\n\n  opts.separator \"\"\n  opts.separator \"Output options:\"\n\n  opts.on('--dot [OPTIONS]', 'Send the results directly to `dot` with optional arguments.') do |dotopts|\n    @serializer = Serializers::ProcessSerializer.new('dot ' + dotopts.to_s)\n  end\n\n  opts.on('-f', '--file [FILE]', 'Writes output to a file instead of stdout.') do |file|\n    @serializer = Serializers::FileSystemSerializer.new(:basepath => '.', :extension => nil)\n    @serializer.instance_eval \"def serialized_path(object) #{file.inspect} end\"\n  end\n\n  common_options(opts)\n  parse_options(opts, args)\n\n  @verifier = Verifier.new(\"object.type != :method || #{visibilities.uniq.inspect}.include?(object.visibility)\")\n  if args.first\n    @objects = args.map {|o| Registry.at(o) }.compact\n  else\n    @objects = [Registry.root]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the command-line utility.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/cli/graph.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Graph",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Graph#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  Registry.load\n  optparse(*args)\n\n  contents = objects.map {|o| o.format(options) }.join(\"\\n\")\n  Templates::Engine.render(:format => :dot, :type => :layout,\n    :verifier => @verifier, :serializer => @serializer,\n    :contents => contents)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fcli%2Fgraph.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AGraph%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::Help#description","YARD::CLI::Help#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles help for commands",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/cli/help.rb"}],
            "name":                         "Help",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Help",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AHelp%23description","YARD%3A%3ACLI%3A%3AHelp%23run"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fhelp.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AHelp",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/cli/help.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Help",
            "path":                         "YARD::CLI::Help#description",
            "scope":                        "instance",
            "signature":                    "def description; \"Retrieves help for a command\" end",
            "source":                       "def description; \"Retrieves help for a command\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcli%2Fhelp.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AHelp%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/cli/help.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Help",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Help#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  if args.first && cmd = CommandParser.commands[args.first.to_sym]\n    cmd.run('--help')\n  else\n    puts \"Command #{args.first} not found.\" if args.first\n    CommandParser.run('--help')\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcli%2Fhelp.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AHelp%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::I18n#initialize","YARD::CLI::I18n#description","YARD::CLI::I18n#run","YARD::CLI::I18n#general_options","YARD::CLI::I18n#generate_pot"],
            "current_file_has_comments":    true,
            "docstring":                    "CLI command to support internationalization (a.k.a. i18n).\nI18n feature is based on gettext technology.\nThis command generates .pot file from docstring and extra\ndocumentation.",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "I18n",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::I18n",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Yardoc",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AI18n%23initialize","YARD%3A%3ACLI%3A%3AI18n%23description","YARD%3A%3ACLI%3A%3AI18n%23run","YARD%3A%3ACLI%3A%3AI18n%23general_options","YARD%3A%3ACLI%3A%3AI18n%23generate_pot"],
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3AYardoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::I18n",
            "path":                         "YARD::CLI::I18n#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  'Generates .pot file from source code and extra documentation'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "general_options",
            "namespace":                    "YARD::CLI::I18n",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::I18n#general_options",
            "scope":                        "instance",
            "signature":                    "def general_options(opts)",
            "source":                       "def general_options(opts)\n  opts.banner = \"Usage: yard i18n [options] [source_files [- extra_files]]\"\n  opts.top.list.clear\n  opts.separator \"(if a list of source files is omitted, \"\n  opts.separator \"  {lib,app}/**/*.rb ext/**/*.c is used.)\"\n  opts.separator \"\"\n  opts.separator \"Example: yard i18n -o yard.pot - FAQ LICENSE\"\n  opts.separator \"  The above example outputs .pot file for files in\"\n  opts.separator \"  lib/**/*.rb to yard.pot including the extra files\"\n  opts.separator \"  FAQ and LICENSE.\"\n  opts.separator \"\"\n  opts.separator \"A base set of options can be specified by adding a .yardopts\"\n  opts.separator \"file to your base path containing all extra options separated\"\n  opts.separator \"by whitespace.\"\n  super(opts)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n%23general_options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "generate_pot",
            "namespace":                    "YARD::CLI::I18n",
            "parameters":                   [{"parm_type":null,"parm_name":"relative_base_path"}],
            "path":                         "YARD::CLI::I18n#generate_pot",
            "scope":                        "instance",
            "signature":                    "def generate_pot(relative_base_path)",
            "source":                       "def generate_pot(relative_base_path)\n  generator = YARD::I18n::PotGenerator.new(relative_base_path)\n  objects = run_verifier(all_objects)\n  generator.parse_objects(objects)\n  generator.parse_files(options.files || [])\n  generator.generate\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n%23generate_pot"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::I18n",
            "path":                         "YARD::CLI::I18n#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  @options.serializer.basepath = \"po/yard.pot\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/cli/i18n.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::I18n",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::I18n#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  if args.size == 0 || !args.first.nil?\n    # fail early if arguments are not valid\n    return unless parse_arguments(*args)\n  end\n\n  YARD.parse(files, excluded)\n\n  serializer = options.serializer\n  pot_file_path = Pathname.new(serializer.basepath).expand_path\n  pot_file_dir_path, pot_file_basename = pot_file_path.split\n  relative_base_path = Pathname.pwd.relative_path_from(pot_file_dir_path)\n  serializer.basepath = pot_file_dir_path.to_s\n  serializer.serialize(pot_file_basename.to_s,\n                       generate_pot(relative_base_path.to_s))\n\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fcli%2Fi18n.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AI18n%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::List#description","YARD::CLI::List#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Lists all constant and method names in the codebase. Uses {Yardoc} --list.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/cli/list.rb"}],
            "name":                         "List",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::List",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AList%23description","YARD%3A%3ACLI%3A%3AList%23run"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Flist.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AList",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/cli/list.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::List",
            "path":                         "YARD::CLI::List#description",
            "scope":                        "instance",
            "signature":                    "def description; 'Lists all constant and methods. Uses `yard doc --list`' end",
            "source":                       "def description; 'Lists all constant and methods. Uses `yard doc --list`' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Flist.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AList%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the commandline utility, parsing arguments and displaying a\nlist of objects",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/cli/list.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::List",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::List#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  if args.include?('--help')\n    puts \"Usage: yard list [yardoc_options]\"\n    puts \"Takes the same arguments as yardoc. See yardoc --help\"\n  else\n    Yardoc.run('-c', '--list', *args)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcli%2Flist.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AList%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{"template_paths":{"write":"YARD::CLI::Server#template_paths=","read":"YARD::CLI::Server#template_paths"},"libraries":{"write":"YARD::CLI::Server#libraries=","read":"YARD::CLI::Server#libraries"},"server_options":{"write":"YARD::CLI::Server#server_options=","read":"YARD::CLI::Server#server_options"},"scripts":{"write":"YARD::CLI::Server#scripts=","read":"YARD::CLI::Server#scripts"},"options":{"write":"YARD::CLI::Server#options=","read":"YARD::CLI::Server#options"},"adapter":{"write":"YARD::CLI::Server#adapter=","read":"YARD::CLI::Server#adapter"}}},
            "children":                     ["YARD::CLI::Server#options=","YARD::CLI::Server#options","YARD::CLI::Server#server_options=","YARD::CLI::Server#server_options","YARD::CLI::Server#libraries=","YARD::CLI::Server#libraries","YARD::CLI::Server#adapter=","YARD::CLI::Server#adapter","YARD::CLI::Server#scripts=","YARD::CLI::Server#scripts","YARD::CLI::Server#template_paths=","YARD::CLI::Server#template_paths","YARD::CLI::Server#initialize","YARD::CLI::Server#description","YARD::CLI::Server#run","YARD::CLI::Server#load_scripts","YARD::CLI::Server#load_template_paths","YARD::CLI::Server#select_adapter","YARD::CLI::Server#add_libraries","YARD::CLI::Server#add_gems","YARD::CLI::Server#add_gems_from_gemfile","YARD::CLI::Server#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "A local documentation server",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "Server",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Server",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AServer%23options%3D","YARD%3A%3ACLI%3A%3AServer%23options","YARD%3A%3ACLI%3A%3AServer%23server_options%3D","YARD%3A%3ACLI%3A%3AServer%23server_options","YARD%3A%3ACLI%3A%3AServer%23libraries%3D","YARD%3A%3ACLI%3A%3AServer%23libraries","YARD%3A%3ACLI%3A%3AServer%23adapter%3D","YARD%3A%3ACLI%3A%3AServer%23adapter","YARD%3A%3ACLI%3A%3AServer%23scripts%3D","YARD%3A%3ACLI%3A%3AServer%23scripts","YARD%3A%3ACLI%3A%3AServer%23template_paths%3D","YARD%3A%3ACLI%3A%3AServer%23template_paths","YARD%3A%3ACLI%3A%3AServer%23initialize","YARD%3A%3ACLI%3A%3AServer%23description","YARD%3A%3ACLI%3A%3AServer%23run","YARD%3A%3ACLI%3A%3AServer%23load_scripts","YARD%3A%3ACLI%3A%3AServer%23load_template_paths","YARD%3A%3ACLI%3A%3AServer%23select_adapter","YARD%3A%3ACLI%3A%3AServer%23add_libraries","YARD%3A%3ACLI%3A%3AServer%23add_gems","YARD%3A%3ACLI%3A%3AServer%23add_gems_from_gemfile","YARD%3A%3ACLI%3A%3AServer%23optparse"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "adapter",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#adapter",
            "scope":                        "instance",
            "signature":                    "def adapter",
            "source":                       "def adapter\n  @adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23adapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "adapter=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#adapter=",
            "scope":                        "instance",
            "signature":                    "def adapter=(value)",
            "source":                       "def adapter=(value)\n  @adapter = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23adapter%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":86,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "add_gems",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#add_gems",
            "scope":                        "instance",
            "signature":                    "def add_gems",
            "source":                       "def add_gems\n  require 'rubygems'\n  Gem.source_index.find_name('').each do |spec|\n    libraries[spec.name] ||= []\n    libraries[spec.name] |= [YARD::Server::LibraryVersion.new(spec.name, spec.version.to_s, nil, :gem)]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":86,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23add_gems"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":94,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "add_gems_from_gemfile",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":"nil","parm_name":"gemfile"}],
            "path":                         "YARD::CLI::Server#add_gems_from_gemfile",
            "scope":                        "instance",
            "signature":                    "def add_gems_from_gemfile(gemfile = nil)",
            "source":                       "def add_gems_from_gemfile(gemfile = nil)\n  require 'bundler'\n  gemfile ||= \"Gemfile\"\n  if File.exists?(\"#{gemfile}.lock\")\n    Bundler::LockfileParser.new(File.read(\"#{gemfile}.lock\")).specs.each do |spec|\n      libraries[spec.name] ||= []\n      libraries[spec.name] |= [YARD::Server::LibraryVersion.new(spec.name, spec.version.to_s, nil, :gem)]\n    end\n  else\n    log.warn \"Cannot find #{gemfile}.lock, ignoring --gemfile option\"\n  end\nrescue LoadError\n  log.error \"Bundler not available, ignoring --gemfile option\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":94,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23add_gems_from_gemfile"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "add_libraries",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"args"}],
            "path":                         "YARD::CLI::Server#add_libraries",
            "scope":                        "instance",
            "signature":                    "def add_libraries(args)",
            "source":                       "def add_libraries(args)\n  (0...args.size).step(2) do |index|\n    library, yardoc = args[index], args[index + 1]\n    yardoc ||= '.yardoc'\n    yardoc = File.expand_path(yardoc)\n    if File.exist?(yardoc)\n      libraries[library] ||= []\n      libraries[library] |= [YARD::Server::LibraryVersion.new(library, nil, yardoc)]\n    else\n      log.warn \"Cannot find yardoc db for #{library}: #{yardoc}\"\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23add_libraries"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  \"Runs a local documentation server\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new instance of the Server command line utility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  self.scripts = []\n  self.template_paths = []\n  self.libraries = {}\n  self.options = SymbolHash.new(false).update(\n    :single_library => true,\n    :caching => false\n  )\n  self.server_options = {:Port => 8808}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "libraries",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#libraries",
            "scope":                        "instance",
            "signature":                    "def libraries",
            "source":                       "def libraries\n  @libraries\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23libraries"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "libraries=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#libraries=",
            "scope":                        "instance",
            "signature":                    "def libraries=(value)",
            "source":                       "def libraries=(value)\n  @libraries = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23libraries%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "load_scripts",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#load_scripts",
            "scope":                        "instance",
            "signature":                    "def load_scripts",
            "source":                       "def load_scripts\n  scripts.each {|file| load_script(file) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23load_scripts"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "load_template_paths",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#load_template_paths",
            "scope":                        "instance",
            "signature":                    "def load_template_paths",
            "source":                       "def load_template_paths\n  return if YARD::Config.options[:safe_mode]\n  Templates::Engine.template_paths |= template_paths\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23load_template_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23options%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Server#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = 'Usage: yard server [options] [[library yardoc_file] ...]'\n  opts.separator ''\n  opts.separator 'Example: yard server -m yard .yardoc ruby-core ../ruby/.yardoc'\n  opts.separator 'The above example serves documentation for YARD and Ruby-core'\n  opts.separator ''\n  opts.separator 'If no library/yardoc_file is specified, the server uses'\n  opts.separator 'the name of the current directory and `.yardoc` respectively'\n  opts.separator ''\n  opts.separator \"General Options:\"\n  opts.on('-m', '--multi-library', 'Serves documentation for multiple libraries') do\n    options[:single_library] = false\n  end\n  opts.on('-c', '--cache', 'Caches all documentation to document root (see --docroot)') do\n    options[:caching] = true\n  end\n  opts.on('-r', '--reload', 'Reparses the library code on each request') do\n    options[:incremental] = true\n  end\n  opts.on('-g', '--gems', 'Serves documentation for installed gems') do\n    add_gems\n  end\n  opts.on('-G', '--gemfile [GEMFILE]', 'Serves documentation for gems from Gemfile') do |gemfile|\n    add_gems_from_gemfile(gemfile)\n  end\n  opts.on('-t', '--template-path PATH',\n          'The template path to look for templates in. (used with -t).') do |path|\n    self.template_paths << path\n  end\n  opts.separator ''\n  opts.separator \"Web Server Options:\"\n  opts.on('-d', '--daemon', 'Daemonizes the server process') do\n    server_options[:daemonize] = true\n  end\n  opts.on('-p PORT', '--port', 'Serves documentation on PORT') do |port|\n    server_options[:Port] = port.to_i\n  end\n  opts.on('--docroot DOCROOT', 'Uses DOCROOT as document root') do |docroot|\n    server_options[:DocumentRoot] = File.expand_path(docroot)\n  end\n  opts.on('-a', '--adapter ADAPTER', 'Use the ADAPTER (full Ruby class) for web server') do |adapter|\n    if adapter.downcase == 'webrick'\n      self.adapter = YARD::Server::WebrickAdapter\n    elsif adapter.downcase == 'rack'\n      self.adapter = YARD::Server::RackAdapter\n    else\n      self.adapter = eval(adapter)\n    end\n  end\n  opts.on('-s', '--server TYPE', 'Use a specific server type eg. thin,mongrel,cgi (Rack specific)') do |type|\n    server_options[:server] = type\n  end\n  common_options(opts)\n  opts.on('-e', '--load FILE', 'A Ruby script to load before the source tree is parsed.') do |file|\n    self.scripts << file\n  end\n  parse_options(opts, args)\n\n  if args.empty? && libraries.empty?\n    if !File.exist? File.expand_path('.yardoc')\n      log.enter_level(Logger::INFO) do\n        log.info \"No .yardoc file found in current directory, parsing source before starting server...\"\n      end\n      Yardoc.run('-n')\n    end\n    add_libraries([File.basename(Dir.pwd), File.expand_path('.yardoc')])\n  else\n    add_libraries(args)\n    options[:single_library] = false if libraries.size > 1\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23optparse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Server#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  optparse(*args)\n\n  select_adapter.setup\n  load_scripts\n  load_template_paths\n  adapter.new(libraries, options, server_options).start\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "scripts",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#scripts",
            "scope":                        "instance",
            "signature":                    "def scripts",
            "source":                       "def scripts\n  @scripts\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23scripts"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "scripts=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#scripts=",
            "scope":                        "instance",
            "signature":                    "def scripts=(value)",
            "source":                       "def scripts=(value)\n  @scripts = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23scripts%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":63,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "select_adapter",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#select_adapter",
            "scope":                        "instance",
            "signature":                    "def select_adapter",
            "source":                       "def select_adapter\n  return adapter if adapter\n  require 'rubygems'\n  require 'rack'\n  self.adapter = YARD::Server::RackAdapter\nrescue LoadError\n  self.adapter = YARD::Server::WebrickAdapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":63,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23select_adapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "server_options",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#server_options",
            "scope":                        "instance",
            "signature":                    "def server_options",
            "source":                       "def server_options\n  @server_options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23server_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "server_options=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#server_options=",
            "scope":                        "instance",
            "signature":                    "def server_options=(value)",
            "source":                       "def server_options=(value)\n  @server_options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23server_options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "template_paths",
            "namespace":                    "YARD::CLI::Server",
            "path":                         "YARD::CLI::Server#template_paths",
            "scope":                        "instance",
            "signature":                    "def template_paths",
            "source":                       "def template_paths\n  @template_paths\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23template_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/server.rb"}],
            "name":                         "template_paths=",
            "namespace":                    "YARD::CLI::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Server#template_paths=",
            "scope":                        "instance",
            "signature":                    "def template_paths=(value)",
            "source":                       "def template_paths=(value)\n  @template_paths = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fserver.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AServer%23template_paths%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{"parse":{"write":"YARD::CLI::Stats#parse=","read":"YARD::CLI::Stats#parse"}}},
            "children":                     ["YARD::CLI::Stats::STATS_ORDER","YARD::CLI::Stats#parse=","YARD::CLI::Stats#parse","YARD::CLI::Stats#initialize","YARD::CLI::Stats#description","YARD::CLI::Stats#run","YARD::CLI::Stats#print_statistics","YARD::CLI::Stats#print_undocumented_objects","YARD::CLI::Stats#all_objects","YARD::CLI::Stats#stats_for_files","YARD::CLI::Stats#stats_for_modules","YARD::CLI::Stats#stats_for_classes","YARD::CLI::Stats#stats_for_constants","YARD::CLI::Stats#stats_for_methods","YARD::CLI::Stats#output","YARD::CLI::Stats#type_statistics","YARD::CLI::Stats#optparse","YARD::CLI::Stats#general_options"],
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/cli/stats.rb"}],
            "instance_mixins":              ["YARD::Templates::Helpers::BaseHelper"],
            "name":                         "Stats",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Stats",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Yardoc",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AStats%3A%3ASTATS_ORDER","YARD%3A%3ACLI%3A%3AStats%23parse%3D","YARD%3A%3ACLI%3A%3AStats%23parse","YARD%3A%3ACLI%3A%3AStats%23initialize","YARD%3A%3ACLI%3A%3AStats%23description","YARD%3A%3ACLI%3A%3AStats%23run","YARD%3A%3ACLI%3A%3AStats%23print_statistics","YARD%3A%3ACLI%3A%3AStats%23print_undocumented_objects","YARD%3A%3ACLI%3A%3AStats%23all_objects","YARD%3A%3ACLI%3A%3AStats%23stats_for_files","YARD%3A%3ACLI%3A%3AStats%23stats_for_modules","YARD%3A%3ACLI%3A%3AStats%23stats_for_classes","YARD%3A%3ACLI%3A%3AStats%23stats_for_constants","YARD%3A%3ACLI%3A%3AStats%23stats_for_methods","YARD%3A%3ACLI%3A%3AStats%23output","YARD%3A%3ACLI%3A%3AStats%23type_statistics","YARD%3A%3ACLI%3A%3AStats%23optparse","YARD%3A%3ACLI%3A%3AStats%23general_options"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3AYardoc"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":99,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "all_objects",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#all_objects",
            "scope":                        "instance",
            "signature":                    "def all_objects",
            "source":                       "def all_objects\n  @all_objects ||= run_verifier Registry.all\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":99,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23all_objects"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  \"Prints documentation statistics on a set of files\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23description"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":179,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "general_options",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Stats#general_options",
            "scope":                        "instance",
            "signature":                    "def general_options(opts)",
            "source":                       "def general_options(opts)\n  super(opts)\n\n  opts.on('--list-undoc', 'List all undocumented objects') do\n    @undoc_list = []\n  end\n\n  opts.on('--compact', 'Compact undocumented objects listing') do\n    @compact = true\n  end\n\n  opts.on('--no-public', \"Don't include public methods in statistics.\") do\n    visibilities.delete(:public)\n  end\n\n  opts.on('--protected', \"Include protected methods in statistics.\") do\n    visibilities.push(:protected)\n  end\n\n  opts.on('--private', \"Include private methods in statistics.\") do\n    visibilities.push(:private)\n  end\n\n  opts.on('--no-private', \"Don't include objects with @private tag in statistics.\") do\n    options[:verifier].add_expressions '!object.tag(:private) &&\n      (object.namespace.type == :proxy || !object.namespace.tag(:private))'\n  end\n\n  opts.on('--query QUERY', \"Only includes objects that match a specific query\") do |query|\n    options[:verifier].add_expressions(query.taint)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":179,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23general_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":"true","parm_name":"parse"}],
            "path":                         "YARD::CLI::Stats#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(parse = true)",
            "source":                       "def initialize(parse = true)\n  super()\n  @parse = parse\n  @undoc_list = nil\n  @compact = false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses commandline options.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Stats#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = \"Usage: yard stats [options] [source_files]\"\n\n  opts.separator \"(if a list of source files is omitted, lib/**/*.rb ext/**/*.c is used.)\"\n\n  general_options(opts)\n  output_options(opts)\n  tag_options(opts)\n  common_options(opts)\n  parse_options(opts, args)\n  parse_files(*args) unless args.empty?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints a statistic to standard out. This method is optimized for\ngetting Integer values, though it allows any data to be printed.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "output",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"data"},{"parm_type":"nil","parm_name":"undoc"}],
            "path":                         "YARD::CLI::Stats#output",
            "scope":                        "instance",
            "signature":                    "def output(name, data, undoc = nil)",
            "source":                       "def output(name, data, undoc = nil)\n  @total += data if data.is_a?(Integer) && undoc\n  @undocumented += undoc if undoc.is_a?(Integer)\n  if undoc\n    data = (\"%5s (% 5d undocumented)\" % [data, undoc])\n  else\n    data = \"%5s\" % data\n  end\n  puts(\"%-12s %s\" % [name + \":\", data])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23output"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  @parse\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "parse=",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Stats#parse=",
            "scope":                        "instance",
            "signature":                    "def parse=(value)",
            "source":                       "def parse=(value)\n  @parse = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23parse%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints statistics for different object types\n\nTo add statistics for a specific type, add a method +#stats_for_TYPE+\nto this class that calls {#output}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "print_statistics",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#print_statistics",
            "scope":                        "instance",
            "signature":                    "def print_statistics",
            "source":                       "def print_statistics\n  @total, @undocumented = 0, 0\n  meths = methods.map {|m| m.to_s }.grep(/^stats_for_/)\n  STATS_ORDER.each do |meth|\n    mname = \"stats_for_#{meth}\"\n    if meths.include?(mname)\n      send(mname)\n      meths.delete(mname)\n    end\n  end\n  meths.each {|m| send(m) }\n  if @total == 0\n    total = 0\n  else\n    total = (@total - @undocumented).to_f / @total.to_f * 100\n  end\n  puts(\"% 3.2f%% documented\" % total)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23print_statistics"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints list of undocumented objects",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "print_undocumented_objects",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#print_undocumented_objects",
            "scope":                        "instance",
            "signature":                    "def print_undocumented_objects",
            "source":                       "def print_undocumented_objects\n  return if !@undoc_list || @undoc_list.empty?\n  puts\n  puts \"Undocumented Objects:\"\n\n  objects = @undoc_list.sort_by {|o| o.file }\n  max = objects.sort_by {|o| o.path.length }.last.path.length\n  if @compact\n    objects.each do |object|\n      puts(\"%-#{max}s     (%s)\" % [object.path,\n        [object.file, object.line].compact.join(\":\")])\n    end\n  else\n    last_file = nil\n    objects.each do |object|\n      if object.file != last_file\n        puts\n        puts \"(in file: #{object.file})\"\n      end\n      puts object.path\n      last_file = object.file\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23print_undocumented_objects"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the commandline utility, parsing arguments and generating\noutput if set.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Stats#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  parse_arguments(*args)\n\n  if use_cache\n    Registry.load!\n  elsif parse\n    YARD.parse(files, excluded)\n    Registry.save(use_cache) if save_yardoc\n  end\n\n  print_statistics\n  print_undocumented_objects\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Statistics for classes",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":116,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "stats_for_classes",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#stats_for_classes",
            "scope":                        "instance",
            "signature":                    "def stats_for_classes",
            "source":                       "def stats_for_classes\n  output \"Classes\", *type_statistics(:class)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":116,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23stats_for_classes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Statistics for constants",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":121,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "stats_for_constants",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#stats_for_constants",
            "scope":                        "instance",
            "signature":                    "def stats_for_constants",
            "source":                       "def stats_for_constants\n  output \"Constants\", *type_statistics(:constant)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":121,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23stats_for_constants"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Statistics for files",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":104,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "stats_for_files",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#stats_for_files",
            "scope":                        "instance",
            "signature":                    "def stats_for_files",
            "source":                       "def stats_for_files\n  files = []\n  all_objects.each {|o| files |= [o.file] }\n  output \"Files\", files.size\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":104,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23stats_for_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Statistics for methods",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":126,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "stats_for_methods",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#stats_for_methods",
            "scope":                        "instance",
            "signature":                    "def stats_for_methods",
            "source":                       "def stats_for_methods\n  objs = all_objects.select {|m| m.type == :method }\n  objs.reject! {|m| m.is_alias? || !m.is_explicit? }\n  undoc = objs.select {|m| m.docstring.blank? && !m.overridden_method }\n  @undoc_list |= undoc if @undoc_list\n  output \"Methods\", objs.size, undoc.size\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":126,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23stats_for_methods"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Statistics for modules",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "stats_for_modules",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats#stats_for_modules",
            "scope":                        "instance",
            "signature":                    "def stats_for_modules",
            "source":                       "def stats_for_modules\n  output \"Modules\", *type_statistics(:module)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23stats_for_modules"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":156,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "type_statistics",
            "namespace":                    "YARD::CLI::Stats",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::CLI::Stats#type_statistics",
            "scope":                        "instance",
            "signature":                    "def type_statistics(type)",
            "source":                       "def type_statistics(type)\n  objs = all_objects.select {|m| m.type == type }\n  undoc = objs.find_all {|m| m.docstring.blank? }\n  @undoc_list |= undoc if @undoc_list\n  [objs.size, undoc.size]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":156,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%23type_statistics"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Maintains the order in which +stats_for_+ statistics methods should be\nprinted.",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/cli/stats.rb"}],
            "name":                         "STATS_ORDER",
            "namespace":                    "YARD::CLI::Stats",
            "path":                         "YARD::CLI::Stats::STATS_ORDER",
            "signature":                    "STATS_ORDER = [:files, :modules, :classes, :constants, :methods]",
            "source":                       "STATS_ORDER = [:files, :modules, :classes, :constants, :methods]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[:files, :modules, :classes, :constants, :methods]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fcli%2Fstats.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AStats%3A%3ASTATS_ORDER"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CLI::YRI::CACHE_FILE","YARD::CLI::YRI::SEARCH_PATHS_FILE","YARD::CLI::YRI::DEFAULT_SEARCH_PATHS","YARD::CLI::YRI.run","YARD::CLI::YRI#initialize","YARD::CLI::YRI#description","YARD::CLI::YRI#run","YARD::CLI::YRI#print_usage","YARD::CLI::YRI#cache_object","YARD::CLI::YRI#print_object","YARD::CLI::YRI#find_object","YARD::CLI::YRI#try_load_object","YARD::CLI::YRI#load_cache","YARD::CLI::YRI#add_gem_paths","YARD::CLI::YRI#add_default_paths","YARD::CLI::YRI#optparse"],
            "current_file_has_comments":    true,
            "docstring":                    "A tool to view documentation in the console like `ri`",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "YRI",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::YRI",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AYRI%3A%3ACACHE_FILE","YARD%3A%3ACLI%3A%3AYRI%3A%3ASEARCH_PATHS_FILE","YARD%3A%3ACLI%3A%3AYRI%3A%3ADEFAULT_SEARCH_PATHS","YARD%3A%3ACLI%3A%3AYRI.run","YARD%3A%3ACLI%3A%3AYRI%23initialize","YARD%3A%3ACLI%3A%3AYRI%23description","YARD%3A%3ACLI%3A%3AYRI%23run","YARD%3A%3ACLI%3A%3AYRI%23print_usage","YARD%3A%3ACLI%3A%3AYRI%23cache_object","YARD%3A%3ACLI%3A%3AYRI%23print_object","YARD%3A%3ACLI%3A%3AYRI%23find_object","YARD%3A%3ACLI%3A%3AYRI%23try_load_object","YARD%3A%3ACLI%3A%3AYRI%23load_cache","YARD%3A%3ACLI%3A%3AYRI%23add_gem_paths","YARD%3A%3ACLI%3A%3AYRI%23add_default_paths","YARD%3A%3ACLI%3A%3AYRI%23optparse"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds paths in {SEARCH_PATHS_FILE}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":180,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "add_default_paths",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#add_default_paths",
            "scope":                        "instance",
            "signature":                    "def add_default_paths",
            "source":                       "def add_default_paths\n  @search_paths.push(*DEFAULT_SEARCH_PATHS)\n  return unless File.file?(SEARCH_PATHS_FILE)\n  paths = File.readlines(SEARCH_PATHS_FILE).map {|l| l.strip }\n  @search_paths.push(*paths)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":180,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23add_default_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds all RubyGems yardoc files to search paths",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "add_gem_paths",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#add_gem_paths",
            "scope":                        "instance",
            "signature":                    "def add_gem_paths",
            "source":                       "def add_gem_paths\n  require 'rubygems'\n  gem_paths = []\n  Gem.source_index.find_name('').each do |spec|\n    if yfile = Registry.yardoc_file_for_gem(spec.name)\n      if spec.name =~ /^yard-doc-/\n        gem_paths.unshift(yfile)\n      else\n        gem_paths.push(yfile)\n      end\n    end\n  end\n  @search_paths += gem_paths\nrescue LoadError\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23add_gem_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Caches the .yardoc file where an object can be found in the {CACHE_FILE}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "cache_object",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::CLI::YRI#cache_object",
            "scope":                        "instance",
            "signature":                    "def cache_object(name, path)",
            "source":                       "def cache_object(name, path)\n  return if path == Registry.yardoc_file\n  @cache[name] = path\n\n  File.open!(CACHE_FILE, 'w') do |file|\n    @cache.each do |key, value|\n      file.puts(\"#{key} #{value}\")\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23cache_object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  \"A tool to view documentation in the console like `ri`\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Locates an object by name starting in the cached paths and then\nsearching through any search paths.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "find_object",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::CLI::YRI#find_object",
            "scope":                        "instance",
            "signature":                    "def find_object(name)",
            "source":                       "def find_object(name)\n  @search_paths.unshift(@cache[name]) if @cache[name]\n  @search_paths.unshift(Registry.yardoc_file)\n\n  # Try to load it from in memory cache\n  log.debug \"Searching for #{name} in memory\"\n  if obj = try_load_object(name, nil)\n    return obj\n  end\n\n  log.debug \"Searching for #{name} in search paths\"\n  @search_paths.each do |path|\n    next unless File.exist?(path)\n    log.debug \"Searching for #{name} in #{path}...\"\n    Registry.load(path)\n    if obj = try_load_object(name, path)\n      return obj\n    end\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23find_object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  @cache = {}\n  @search_paths = []\n  add_default_paths\n  add_gem_paths\n  load_cache\n  @search_paths.uniq!\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads {CACHE_FILE}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "load_cache",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#load_cache",
            "scope":                        "instance",
            "signature":                    "def load_cache",
            "source":                       "def load_cache\n  return unless File.file?(CACHE_FILE)\n  File.readlines(CACHE_FILE).each do |line|\n    line = line.strip.split(/\\s+/)\n    @cache[line[0]] = line[1]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23load_cache"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses commandline options.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":189,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::YRI#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = \"Usage: yri [options] <Path to object>\"\n  opts.separator \"Example: yri String#gsub\"\n  opts.separator \"\"\n  opts.separator \"General Options:\"\n\n  opts.on('-b', '--db FILE', 'Use a specified .yardoc db to search in') do |yfile|\n    @search_paths.unshift(yfile)\n  end\n\n  opts.on('-T', '--no-pager', 'No pager') do\n    @serializer = YARD::Serializers::StdoutSerializer.new\n  end\n\n  opts.on('-p PAGER', '--pager') do |pager|\n    @serializer = YARD::Serializers::ProcessSerializer.new(pager)\n  end\n\n  common_options(opts)\n  parse_options(opts, args)\n  @name = args.first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":189,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":94,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "print_object",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::CLI::YRI#print_object",
            "scope":                        "instance",
            "signature":                    "def print_object(object)",
            "source":                       "def print_object(object)\n  if object.type == :method && object.is_alias?\n    tmp = P(object.namespace, (object.scope == :instance ? \"#\" : \"\") +\n      object.namespace.aliases[object].to_s)\n    object = tmp unless YARD::CodeObjects::Proxy === tmp\n  end\n  object.format(:serializer => @serializer)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":94,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23print_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints the command usage",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "print_usage",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI#print_usage",
            "scope":                        "instance",
            "signature":                    "def print_usage",
            "source":                       "def print_usage\n  puts \"Usage: yri [options] <Path to object>\"\n  puts \"See yri --help for more options.\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23print_usage"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the command-line utility.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::YRI#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  optparse(*args)\n\n  if ::RbConfig::CONFIG['host_os'] =~ /mingw|win32/\n    @serializer ||= YARD::Serializers::StdoutSerializer.new\n  else\n    @serializer ||= YARD::Serializers::ProcessSerializer.new('less')\n  end\n\n  if @name.nil? || @name.strip.empty?\n    print_usage\n    exit(1)\n  elsif object = find_object(@name)\n    print_object(object)\n  else\n    STDERR.puts \"No documentation for `#{@name}'\"\n    exit(1)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tries to load the object with name. If successful, caches the object\nwith the cache_path",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":141,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "try_load_object",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"cache_path"}],
            "path":                         "YARD::CLI::YRI#try_load_object",
            "scope":                        "instance",
            "signature":                    "def try_load_object(name, cache_path)",
            "source":                       "def try_load_object(name, cache_path)\n  if obj = Registry.at(name)\n    if cache_path\n      cache_object(name, cache_path)\n    end\n    return obj\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":141,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%23try_load_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Helper method to run the utility on an instance.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::YRI",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::YRI.run",
            "scope":                        "class",
            "signature":                    "def self.run(*args) new.run(*args) end",
            "source":                       "def self.run(*args) new.run(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI.run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The location in {YARD::CONFIG_DIR} where the YRI cache file is loaded\nfrom.",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "CACHE_FILE",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI::CACHE_FILE",
            "signature":                    "CACHE_FILE = File.expand_path('~/.yard/yri_cache')",
            "source":                       "CACHE_FILE = File.expand_path('~/.yard/yri_cache')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path('~/.yard/yri_cache')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%3A%3ACACHE_FILE"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Default search paths that should be loaded dynamically into YRI. These paths\ntake precedence over all other paths ({SEARCH_PATHS_FILE} and RubyGems\npaths). To add a path, call:\n\n  DEFAULT_SEARCH_PATHS.push(\"/path/to/.yardoc\")",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "DEFAULT_SEARCH_PATHS",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI::DEFAULT_SEARCH_PATHS",
            "signature":                    "DEFAULT_SEARCH_PATHS = []",
            "source":                       "DEFAULT_SEARCH_PATHS = []",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%3A%3ADEFAULT_SEARCH_PATHS"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "A file containing all paths, delimited by newlines, to search for\nyardoc databases.",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/cli/yri.rb"}],
            "name":                         "SEARCH_PATHS_FILE",
            "namespace":                    "YARD::CLI::YRI",
            "path":                         "YARD::CLI::YRI::SEARCH_PATHS_FILE",
            "signature":                    "SEARCH_PATHS_FILE = File.expand_path('~/.yard/yri_search_paths')",
            "source":                       "SEARCH_PATHS_FILE = File.expand_path('~/.yard/yri_search_paths')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path('~/.yard/yri_search_paths')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcli%2Fyri.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYRI%3A%3ASEARCH_PATHS_FILE"
        },
        {
            "attributes":                   {"class":{},"instance":{"use_yardopts_file":{"write":"YARD::CLI::Yardoc#use_yardopts_file=","read":"YARD::CLI::Yardoc#use_yardopts_file"},"generate":{"write":"YARD::CLI::Yardoc#generate=","read":"YARD::CLI::Yardoc#generate"},"hidden_tags":{"write":"YARD::CLI::Yardoc#hidden_tags=","read":"YARD::CLI::Yardoc#hidden_tags"},"use_document_file":{"write":"YARD::CLI::Yardoc#use_document_file=","read":"YARD::CLI::Yardoc#use_document_file"},"statistics":{"write":"YARD::CLI::Yardoc#statistics=","read":"YARD::CLI::Yardoc#statistics"},"save_yardoc":{"write":"YARD::CLI::Yardoc#save_yardoc=","read":"YARD::CLI::Yardoc#save_yardoc"},"assets":{"write":"YARD::CLI::Yardoc#assets=","read":"YARD::CLI::Yardoc#assets"},"files":{"write":"YARD::CLI::Yardoc#files=","read":"YARD::CLI::Yardoc#files"},"list":{"write":"YARD::CLI::Yardoc#list=","read":"YARD::CLI::Yardoc#list"},"options_file":{"write":"YARD::CLI::Yardoc#options_file=","read":"YARD::CLI::Yardoc#options_file"},"has_markup":{"write":"YARD::CLI::Yardoc#has_markup=","read":"YARD::CLI::Yardoc#has_markup"},"excluded":{"write":"YARD::CLI::Yardoc#excluded=","read":"YARD::CLI::Yardoc#excluded"},"visibilities":{"write":"YARD::CLI::Yardoc#visibilities=","read":"YARD::CLI::Yardoc#visibilities"},"options":{"write":null,"read":"YARD::CLI::Yardoc#options"},"use_cache":{"write":"YARD::CLI::Yardoc#use_cache=","read":"YARD::CLI::Yardoc#use_cache"},"apis":{"write":"YARD::CLI::Yardoc#apis=","read":"YARD::CLI::Yardoc#apis"}}},
            "children":                     ["YARD::CLI::Yardoc::DEFAULT_YARDOPTS_FILE","YARD::CLI::Yardoc#options","YARD::CLI::Yardoc#files=","YARD::CLI::Yardoc#files","YARD::CLI::Yardoc#excluded=","YARD::CLI::Yardoc#excluded","YARD::CLI::Yardoc#use_cache=","YARD::CLI::Yardoc#use_cache","YARD::CLI::Yardoc#use_yardopts_file=","YARD::CLI::Yardoc#use_yardopts_file","YARD::CLI::Yardoc#use_document_file=","YARD::CLI::Yardoc#use_document_file","YARD::CLI::Yardoc#save_yardoc=","YARD::CLI::Yardoc#save_yardoc","YARD::CLI::Yardoc#generate=","YARD::CLI::Yardoc#generate","YARD::CLI::Yardoc#list=","YARD::CLI::Yardoc#list","YARD::CLI::Yardoc#options_file=","YARD::CLI::Yardoc#options_file","YARD::CLI::Yardoc#visibilities=","YARD::CLI::Yardoc#visibilities","YARD::CLI::Yardoc#apis=","YARD::CLI::Yardoc#apis","YARD::CLI::Yardoc#hidden_tags=","YARD::CLI::Yardoc#hidden_tags","YARD::CLI::Yardoc#statistics=","YARD::CLI::Yardoc#statistics","YARD::CLI::Yardoc#assets=","YARD::CLI::Yardoc#assets","YARD::CLI::Yardoc#has_markup=","YARD::CLI::Yardoc#has_markup","YARD::CLI::Yardoc#initialize","YARD::CLI::Yardoc#description","YARD::CLI::Yardoc#run","YARD::CLI::Yardoc#parse_arguments","YARD::CLI::Yardoc#all_objects","YARD::CLI::Yardoc#yardopts","YARD::CLI::Yardoc#run_generate","YARD::CLI::Yardoc#verify_markup_options","YARD::CLI::Yardoc#copy_assets","YARD::CLI::Yardoc#print_list","YARD::CLI::Yardoc#parse_yardopts_options","YARD::CLI::Yardoc#support_rdoc_document_file!","YARD::CLI::Yardoc#add_extra_files","YARD::CLI::Yardoc#parse_files","YARD::CLI::Yardoc#add_visibility_verifier","YARD::CLI::Yardoc#add_api_verifier","YARD::CLI::Yardoc#run_verifier","YARD::CLI::Yardoc#add_tag","YARD::CLI::Yardoc#optparse","YARD::CLI::Yardoc#general_options","YARD::CLI::Yardoc#yardopts_options","YARD::CLI::Yardoc#output_options","YARD::CLI::Yardoc#tag_options"],
            "current_file_has_comments":    true,
            "docstring":                    "Yardoc is the default YARD CLI command (+yard doc+ and historic +yardoc+\nexecutable) used to generate and output (mainly) HTML documentation given\na set of source files.\n\n== Usage\n\nMain usage for this command is:\n\n  $ yardoc [options] [source_files [- extra_files]]\n\nSee +yardoc --help+ for details on valid options.\n\n== Options File (+.yardopts+)\n\nIf a +.yardopts+ file is found in the source directory being processed,\nYARD will use the contents of the file as arguments to the command,\ntreating newlines as spaces. You can use shell-style quotations to\ngroup space delimited arguments, just like on the command line.\n\nA valid +.yardopts+ file might look like:\n\n  --no-private\n  --title \"My Title\"\n  --exclude foo --exclude bar\n  lib/**/*.erb\n  lib/**/*.rb -\n  HACKING.rdoc LEGAL COPYRIGHT\n\nNote that Yardoc also supports the legacy RDoc style +.document+ file,\nthough this file can only specify source globs to parse, not options.\n\n== Queries (+--query+)\n\nYardoc supports queries to select specific code objects for which to\ngenerate documentation. For example, you might want to generate\ndocumentation only for your public API. If you've documented your public\nmethods with +@api public+, you can use the following query to select\nall of these objects:\n\n  --query '@api.text == \"public\"'\n\nNote that the syntax for queries is mostly Ruby with a few syntactic\nsimplifications for meta-data tags. See the {Verifier} class for an\noverview of this syntax.\n\n== Adding Custom Ad-Hoc Meta-data Tags (+--tag+)\n\nYARD allows specification of {file:docs/Tags.md meta-data tags}\nprogrammatically via the {YARD::Tags::Library} class, but often this is not\npractical for users writing documentation. To make adding custom tags\neasier, Yardoc has a few command-line switches for creating basic tags\nand displaying them in generated HTML output.\n\nTo specify a custom tag to be displayed in output, use any of the\nfollowing:\n\n* +--tag+ TAG:TITLE\n* +--name-tag+ TAG:TITLE\n* +--type-tag+ TAG:TITLE\n* +--type-name-tag+ TAG:TITLE\n* +--title-tag+ TAG:TITLE\n\n\"TAG:TITLE\" is of the form: name:\"Display Title\", for example:\n\n  --tag overload:\"Overloaded Method\"\n\nSee +yardoc --help+ for a description of the various options.\n\nTags added in this way are automatically displayed in output. To add\na meta-data tag that does not show up in output, use +--hide-tag TAG+.\nNote that you can also use this option on existing tags to hide\nbuiltin tags, for instance.\n\n== Processed Data Storage (+.yardoc+ directory)\n\nWhen Yardoc parses a source directory, it creates a +.yardoc+ directory\n(by default, override with +-b+) at the root of the project. This directory\ncontains marshal dumps for all raw object data in the source, so that\nyou can access it later for various commands (+stats+, +graph+, etc.).\nThis directory is also used as a cache for any future calls to +yardoc+\nso as to process only the files which have changed since the last call.\n\nWhen Yardoc uses the cache in subsequent calls to +yardoc+, methods\nor classes that have been deleted from source since the last parsing\nwill not be erased from the cache (YARD never deletes objects). In such\na case, you should wipe the cache and do a clean parsing of the source tree.\nYou can do this by deleting the +.yardoc+ directory manually, or running\nYardoc without +--use-cache+ (+-c+).",
            "dynamic":                      true,
            "files":                        [{"file_line":141,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "Yardoc",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::Yardoc",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::Command",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AYardoc%3A%3ADEFAULT_YARDOPTS_FILE","YARD%3A%3ACLI%3A%3AYardoc%23options","YARD%3A%3ACLI%3A%3AYardoc%23files%3D","YARD%3A%3ACLI%3A%3AYardoc%23files","YARD%3A%3ACLI%3A%3AYardoc%23excluded%3D","YARD%3A%3ACLI%3A%3AYardoc%23excluded","YARD%3A%3ACLI%3A%3AYardoc%23use_cache%3D","YARD%3A%3ACLI%3A%3AYardoc%23use_cache","YARD%3A%3ACLI%3A%3AYardoc%23use_yardopts_file%3D","YARD%3A%3ACLI%3A%3AYardoc%23use_yardopts_file","YARD%3A%3ACLI%3A%3AYardoc%23use_document_file%3D","YARD%3A%3ACLI%3A%3AYardoc%23use_document_file","YARD%3A%3ACLI%3A%3AYardoc%23save_yardoc%3D","YARD%3A%3ACLI%3A%3AYardoc%23save_yardoc","YARD%3A%3ACLI%3A%3AYardoc%23generate%3D","YARD%3A%3ACLI%3A%3AYardoc%23generate","YARD%3A%3ACLI%3A%3AYardoc%23list%3D","YARD%3A%3ACLI%3A%3AYardoc%23list","YARD%3A%3ACLI%3A%3AYardoc%23options_file%3D","YARD%3A%3ACLI%3A%3AYardoc%23options_file","YARD%3A%3ACLI%3A%3AYardoc%23visibilities%3D","YARD%3A%3ACLI%3A%3AYardoc%23visibilities","YARD%3A%3ACLI%3A%3AYardoc%23apis%3D","YARD%3A%3ACLI%3A%3AYardoc%23apis","YARD%3A%3ACLI%3A%3AYardoc%23hidden_tags%3D","YARD%3A%3ACLI%3A%3AYardoc%23hidden_tags","YARD%3A%3ACLI%3A%3AYardoc%23statistics%3D","YARD%3A%3ACLI%3A%3AYardoc%23statistics","YARD%3A%3ACLI%3A%3AYardoc%23assets%3D","YARD%3A%3ACLI%3A%3AYardoc%23assets","YARD%3A%3ACLI%3A%3AYardoc%23has_markup%3D","YARD%3A%3ACLI%3A%3AYardoc%23has_markup","YARD%3A%3ACLI%3A%3AYardoc%23initialize","YARD%3A%3ACLI%3A%3AYardoc%23description","YARD%3A%3ACLI%3A%3AYardoc%23run","YARD%3A%3ACLI%3A%3AYardoc%23parse_arguments","YARD%3A%3ACLI%3A%3AYardoc%23all_objects","YARD%3A%3ACLI%3A%3AYardoc%23yardopts","YARD%3A%3ACLI%3A%3AYardoc%23run_generate","YARD%3A%3ACLI%3A%3AYardoc%23verify_markup_options","YARD%3A%3ACLI%3A%3AYardoc%23copy_assets","YARD%3A%3ACLI%3A%3AYardoc%23print_list","YARD%3A%3ACLI%3A%3AYardoc%23parse_yardopts_options","YARD%3A%3ACLI%3A%3AYardoc%23support_rdoc_document_file%21","YARD%3A%3ACLI%3A%3AYardoc%23add_extra_files","YARD%3A%3ACLI%3A%3AYardoc%23parse_files","YARD%3A%3ACLI%3A%3AYardoc%23add_visibility_verifier","YARD%3A%3ACLI%3A%3AYardoc%23add_api_verifier","YARD%3A%3ACLI%3A%3AYardoc%23run_verifier","YARD%3A%3ACLI%3A%3AYardoc%23add_tag","YARD%3A%3ACLI%3A%3AYardoc%23optparse","YARD%3A%3ACLI%3A%3AYardoc%23general_options","YARD%3A%3ACLI%3A%3AYardoc%23yardopts_options","YARD%3A%3ACLI%3A%3AYardoc%23output_options","YARD%3A%3ACLI%3A%3AYardoc%23tag_options"],
            "y_ld:files":                   [{"file_line":141,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3ACommand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds verifier rule for APIs",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":481,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "add_api_verifier",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#add_api_verifier",
            "scope":                        "instance",
            "signature":                    "def add_api_verifier",
            "source":                       "def add_api_verifier\n  return if apis.empty?\n  no_api = true if apis.delete('')\n  expr = \"#{apis.uniq.inspect}.include?(@api.text)\"\n  expr += \" || !@api\" if no_api\n  options.verifier.add_expressions(expr)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":481,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23add_api_verifier"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a set of extra documentation files to be processed",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":433,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "add_extra_files",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*files"}],
            "path":                         "YARD::CLI::Yardoc#add_extra_files",
            "scope":                        "instance",
            "signature":                    "def add_extra_files(*files)",
            "source":                       "def add_extra_files(*files)\n  files.map! {|f| f.include?(\"*\") ? Dir.glob(f) : f }.flatten!\n  files.each do |file|\n    if File.file?(file)\n      options.files << CodeObjects::ExtraFileObject.new(file)\n    else\n      log.warn \"Could not find extra file: #{file}\"\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":433,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23add_extra_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":495,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "add_tag",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_data"},{"parm_type":"nil","parm_name":"factory_method"}],
            "path":                         "YARD::CLI::Yardoc#add_tag",
            "scope":                        "instance",
            "signature":                    "def add_tag(tag_data, factory_method = nil)",
            "source":                       "def add_tag(tag_data, factory_method = nil)\n  tag, title = *tag_data.split(':')\n  title ||= tag.capitalize\n  Tags::Library.define_tag(title, tag.to_sym, factory_method)\n  Tags::Library.visible_tags |= [tag.to_sym]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":495,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23add_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds verifier rule for visibilities",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":473,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "add_visibility_verifier",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#add_visibility_verifier",
            "scope":                        "instance",
            "signature":                    "def add_visibility_verifier",
            "source":                       "def add_visibility_verifier\n  vis_expr = \"#{visibilities.uniq.inspect}.include?(object.visibility)\"\n  options.verifier.add_expressions(vis_expr)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":473,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23add_visibility_verifier"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The list of all objects to process. Override this method to change\nwhich objects YARD should generate documentation for.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":318,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "all_objects",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#all_objects",
            "scope":                        "instance",
            "signature":                    "def all_objects",
            "source":                       "def all_objects\n  Registry.all(:root, :module, :class)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":318,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23all_objects"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Keep track of which APIs are to be shown",
            "dynamic":                      true,
            "files":                        [{"file_line":189,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "apis",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#apis",
            "scope":                        "instance",
            "signature":                    "def apis",
            "source":                       "def apis\n  @apis\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":189,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23apis"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Keep track of which APIs are to be shown",
            "dynamic":                      true,
            "files":                        [{"file_line":189,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "apis=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#apis=",
            "scope":                        "instance",
            "signature":                    "def apis=(value)",
            "source":                       "def apis=(value)\n  @apis = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":189,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23apis%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":201,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "assets",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#assets",
            "scope":                        "instance",
            "signature":                    "def assets",
            "source":                       "def assets\n  @assets\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":201,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23assets"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":201,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "assets=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#assets=",
            "scope":                        "instance",
            "signature":                    "def assets=(value)",
            "source":                       "def assets=(value)\n  @assets = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":201,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23assets%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Copies any assets to the output directory",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":385,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "copy_assets",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#copy_assets",
            "scope":                        "instance",
            "signature":                    "def copy_assets",
            "source":                       "def copy_assets\n  return unless options.serializer\n  outpath = options.serializer.basepath\n  assets.each do |from, to|\n    to = File.join(outpath, to)\n    log.debug \"Copying asset '#{from}' to '#{to}'\"\n    from += '/.' if File.directory?(from)\n    FileUtils.cp_r(from, to)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":385,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23copy_assets"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":233,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "description",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#description",
            "scope":                        "instance",
            "signature":                    "def description",
            "source":                       "def description\n  \"Generates documentation\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":233,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23description"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "excluded",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#excluded",
            "scope":                        "instance",
            "signature":                    "def excluded",
            "source":                       "def excluded\n  @excluded\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23excluded"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "excluded=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#excluded=",
            "scope":                        "instance",
            "signature":                    "def excluded=(value)",
            "source":                       "def excluded=(value)\n  @excluded = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23excluded%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":150,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "files",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#files",
            "scope":                        "instance",
            "signature":                    "def files",
            "source":                       "def files\n  @files\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":150,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":150,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "files=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#files=",
            "scope":                        "instance",
            "signature":                    "def files=(value)",
            "source":                       "def files=(value)\n  @files = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":150,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23files%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds general options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":529,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "general_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Yardoc#general_options",
            "scope":                        "instance",
            "signature":                    "def general_options(opts)",
            "source":                       "def general_options(opts)\n  opts.separator \"\"\n  opts.separator \"General Options:\"\n\n  opts.on('-b', '--db FILE', 'Use a specified .yardoc db to load from or save to',\n                '  (defaults to .yardoc)') do |yfile|\n    YARD::Registry.yardoc_file = yfile\n  end\n\n  opts.on('--[no-]single-db', 'Whether code objects should be stored to single',\n                              '  database file (advanced)') do |use_single_db|\n    Registry.single_object_db = use_single_db\n  end\n\n  opts.on('-n', '--no-output', 'Only generate .yardoc database, no documentation.') do\n    self.generate = false\n  end\n\n  opts.on('-c', '--use-cache [FILE]',\n          \"Use the cached .yardoc db to generate documentation.\",\n          \"  (defaults to no cache)\") do |file|\n    YARD::Registry.yardoc_file = file if file\n    self.use_cache = true\n  end\n\n  opts.on('--no-cache', \"Clear .yardoc db before parsing source.\") do\n    self.use_cache = false\n  end\n\n  yardopts_options(opts)\n\n  opts.on('--no-save', 'Do not save the parsed data to the yardoc db') do\n    self.save_yardoc = false\n  end\n\n  opts.on('--exclude REGEXP', 'Ignores a file if it matches path match (regexp)') do |path|\n    self.excluded << path\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":529,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23general_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":171,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "generate",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#generate",
            "scope":                        "instance",
            "signature":                    "def generate",
            "source":                       "def generate\n  @generate\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":171,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23generate"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":171,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "generate=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#generate=",
            "scope":                        "instance",
            "signature":                    "def generate=(value)",
            "source":                       "def generate=(value)\n  @generate = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":171,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23generate%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":205,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "has_markup",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#has_markup",
            "scope":                        "instance",
            "signature":                    "def has_markup",
            "source":                       "def has_markup\n  @has_markup\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":205,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23has_markup"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":205,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "has_markup=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#has_markup=",
            "scope":                        "instance",
            "signature":                    "def has_markup=(value)",
            "source":                       "def has_markup=(value)\n  @has_markup = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":205,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23has_markup%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":193,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "hidden_tags",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#hidden_tags",
            "scope":                        "instance",
            "signature":                    "def hidden_tags",
            "source":                       "def hidden_tags\n  @hidden_tags\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":193,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23hidden_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":193,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "hidden_tags=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#hidden_tags=",
            "scope":                        "instance",
            "signature":                    "def hidden_tags=(value)",
            "source":                       "def hidden_tags=(value)\n  @hidden_tags = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":193,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23hidden_tags%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new instance of the commandline utility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":208,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  super\n  @options = YardocOptions.new\n  @options.reset_defaults\n  @visibilities = [:public]\n  @apis = []\n  @assets = {}\n  @excluded = []\n  @files = []\n  @hidden_tags = []\n  @use_cache = false\n  @use_yardopts_file = true\n  @use_document_file = true\n  @generate = true\n  @options_file = DEFAULT_YARDOPTS_FILE\n  @statistics = true\n  @list = false\n  @save_yardoc = true\n  @has_markup = false\n\n  if defined?(::Encoding) && ::Encoding.respond_to?(:default_external=)\n    ::Encoding.default_external, ::Encoding.default_internal = 'utf-8', 'utf-8'\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":208,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":175,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "list",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#list",
            "scope":                        "instance",
            "signature":                    "def list",
            "source":                       "def list\n  @list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":175,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":175,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "list=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#list=",
            "scope":                        "instance",
            "signature":                    "def list=(value)",
            "source":                       "def list=(value)\n  @list = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":175,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23list%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":147,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":147,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The options file name (defaults to {DEFAULT_YARDOPTS_FILE})",
            "dynamic":                      true,
            "files":                        [{"file_line":179,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "options_file",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#options_file",
            "scope":                        "instance",
            "signature":                    "def options_file",
            "source":                       "def options_file\n  @options_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":179,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23options_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The options file name (defaults to {DEFAULT_YARDOPTS_FILE})",
            "dynamic":                      true,
            "files":                        [{"file_line":179,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "options_file=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#options_file=",
            "scope":                        "instance",
            "signature":                    "def options_file=(value)",
            "source":                       "def options_file=(value)\n  @options_file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":179,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23options_file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses commandline options.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":504,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "optparse",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Yardoc#optparse",
            "scope":                        "instance",
            "signature":                    "def optparse(*args)",
            "source":                       "def optparse(*args)\n  opts = OptionParser.new\n  opts.banner = \"Usage: yard doc [options] [source_files [- extra_files]]\"\n\n  opts.separator \"(if a list of source files is omitted, \"\n  opts.separator \"  {lib,app}/**/*.rb ext/**/*.c is used.)\"\n  opts.separator \"\"\n  opts.separator \"Example: yardoc -o documentation/ - FAQ LICENSE\"\n  opts.separator \"  The above example outputs documentation for files in\"\n  opts.separator \"  lib/**/*.rb to documentation/ including the extra files\"\n  opts.separator \"  FAQ and LICENSE.\"\n  opts.separator \"\"\n  opts.separator \"A base set of options can be specified by adding a .yardopts\"\n  opts.separator \"file to your base path containing all extra options separated\"\n  opts.separator \"by whitespace.\"\n\n  general_options(opts)\n  output_options(opts)\n  tag_options(opts)\n  common_options(opts)\n  parse_options(opts, args)\n  parse_files(*args) unless args.empty?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":504,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23optparse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds output options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":589,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "output_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Yardoc#output_options",
            "scope":                        "instance",
            "signature":                    "def output_options(opts)",
            "source":                       "def output_options(opts)\n  opts.separator \"\"\n  opts.separator \"Output options:\"\n\n  opts.on('--one-file', 'Generates output as a single file') do\n    options.onefile = true\n  end\n\n  opts.on('--list', 'List objects to standard out (implies -n)') do |format|\n    self.generate = false\n    self.list = true\n  end\n\n  opts.on('--no-public', \"Don't show public methods. (default shows public)\") do\n    visibilities.delete(:public)\n  end\n\n  opts.on('--protected', \"Show protected methods. (default hides protected)\") do\n    visibilities.push(:protected)\n  end\n\n  opts.on('--private', \"Show private methods. (default hides private)\") do\n    visibilities.push(:private)\n  end\n\n  opts.on('--no-private', \"Hide objects with @private tag\") do\n    options.verifier.add_expressions '!object.tag(:private) &&\n      (object.namespace.is_a?(CodeObjects::Proxy) || !object.namespace.tag(:private))'\n  end\n\n  opts.on('--[no-]api API', 'Generates documentation for a given API',\n                            '(objects which define the correct @api tag).',\n                            'If --no-api is given, displays objects with',\n                            'no @api tag.') do |api|\n    api = '' if api == false\n    apis.push(api)\n  end\n\n  opts.on('--embed-mixins', \"Embeds mixin methods into class documentation\") do\n    options.embed_mixins << '*'\n  end\n\n  opts.on('--embed-mixin [MODULE]', \"Embeds mixin methods from a particular\",\n                                    \" module into class documentation\") do |mod|\n    options.embed_mixins << mod\n  end\n\n  opts.on('--no-highlight', \"Don't highlight code blocks in output.\") do\n    options.highlight = false\n  end\n\n  opts.on('--default-return TYPE', \"Shown if method has no return type. \",\n                                   \"  (defaults to 'Object')\") do |type|\n    options.default_return = type\n  end\n\n  opts.on('--hide-void-return', \"Hides return types specified as 'void'. \",\n                                \"  (default is shown)\") do\n    options.hide_void_return = true\n  end\n\n  opts.on('--query QUERY', \"Only show objects that match a specific query\") do |query|\n    next if YARD::Config.options[:safe_mode]\n    options.verifier.add_expressions(query.taint)\n  end\n\n  opts.on('--title TITLE', 'Add a specific title to HTML documents') do |title|\n    options.title = title\n  end\n\n  opts.on('-r', '--readme FILE', '--main FILE', 'The readme file used as the title page',\n                                                '  of documentation.') do |readme|\n    if File.file?(readme)\n      options.readme = CodeObjects::ExtraFileObject.new(readme)\n    else\n      log.warn \"Could not find readme file: #{readme}\"\n    end\n  end\n\n  opts.on('--files FILE1,FILE2,...', 'Any extra comma separated static files to be ',\n                                     '  included (eg. FAQ)') do |files|\n    add_extra_files(*files.split(\",\"))\n  end\n\n  opts.on('--asset FROM[:TO]', 'A file or directory to copy over to output ',\n                               '  directory after generating') do |asset|\n    re = /^(?:\\.\\.\\/|\\/)/\n    from, to = *asset.split(':').map {|f| File.cleanpath(f) }\n    to ||= from\n    if from =~ re || to =~ re\n      log.warn \"Invalid file '#{asset}'\"\n    else\n      assets[from] = to\n    end\n  end\n\n  opts.on('-o', '--output-dir PATH',\n          'The output directory. (defaults to ./doc)') do |dir|\n    options.serializer.basepath = dir\n  end\n\n  opts.on('-m', '--markup MARKUP',\n          'Markup style used in documentation, like textile, ',\n          '  markdown or rdoc. (defaults to rdoc)') do |markup|\n    self.has_markup = true\n    options.markup = markup.to_sym\n  end\n\n  opts.on('-M', '--markup-provider MARKUP_PROVIDER',\n          'Overrides the library used to process markup ',\n          '  formatting (specify the gem name)') do |markup_provider|\n    options.markup_provider = markup_provider.to_sym\n  end\n\n  opts.on('--charset ENC', 'Character set to use when parsing files ',\n                           '  (default is system locale)') do |encoding|\n    begin\n      if defined?(Encoding) && Encoding.respond_to?(:default_external=)\n        Encoding.default_external, Encoding.default_internal = encoding, encoding\n      end\n    rescue ArgumentError => e\n      raise OptionParser::InvalidOption, e\n    end\n  end\n\n  opts.on('-t', '--template TEMPLATE',\n          'The template to use. (defaults to \"default\")') do |template|\n    options.template = template.to_sym\n  end\n\n  opts.on('-p', '--template-path PATH',\n          'The template path to look for templates in.',\n          '  (used with -t).') do |path|\n    next if YARD::Config.options[:safe_mode]\n    YARD::Templates::Engine.register_template_path(File.expand_path(path))\n  end\n\n  opts.on('-f', '--format FORMAT',\n          'The output format for the template.',\n          '  (defaults to html)') do |format|\n    options.format = format.to_sym\n  end\n\n  opts.on('--no-stats', 'Don\\'t print statistics') do\n    self.statistics = false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":589,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23output_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses commandline arguments",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":278,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "parse_arguments",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Yardoc#parse_arguments",
            "scope":                        "instance",
            "signature":                    "def parse_arguments(*args)",
            "source":                       "def parse_arguments(*args)\n  parse_yardopts_options(*args)\n\n  # Parse files and then command line arguments\n  optparse(*support_rdoc_document_file!) if use_document_file\n  optparse(*yardopts) if use_yardopts_file\n  optparse(*args)\n\n  # Last minute modifications\n  self.files = ['{lib,app}/**/*.rb', 'ext/**/*.c'] if self.files.empty?\n  self.files.delete_if {|x| x =~ /\\A\\s*\\Z/ } # remove empty ones\n  readme = Dir.glob('README*').first\n  readme ||= Dir.glob(files.first).first if options.onefile\n  options.readme ||= CodeObjects::ExtraFileObject.new(readme) if readme\n  options.files.unshift(options.readme).uniq! if options.readme\n\n  Tags::Library.visible_tags -= hidden_tags\n  add_visibility_verifier\n  add_api_verifier\n\n  # US-ASCII is invalid encoding for onefile\n  if defined?(::Encoding) && options.onefile\n    if ::Encoding.default_internal == ::Encoding::US_ASCII\n      log.warn \"--one-file is not compatible with US-ASCII encoding, using ASCII-8BIT\"\n      ::Encoding.default_external, ::Encoding.default_internal = ['ascii-8bit'] * 2\n    end\n  end\n\n  if generate && !verify_markup_options\n    false\n  else\n    true\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":278,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23parse_arguments"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the file arguments into Ruby files and extra files, which are\nseparated by a '-' element.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":453,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "parse_files",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*files"}],
            "path":                         "YARD::CLI::Yardoc#parse_files",
            "scope":                        "instance",
            "signature":                    "def parse_files(*files)",
            "source":                       "def parse_files(*files)\n  seen_extra_files_marker = false\n\n  files.each do |file|\n    if file == \"-\"\n      seen_extra_files_marker = true\n      next\n    end\n\n    if seen_extra_files_marker\n      add_extra_files(file)\n    else\n      self.files << file\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":453,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23parse_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses out the yardopts/document options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":408,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "parse_yardopts_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Yardoc#parse_yardopts_options",
            "scope":                        "instance",
            "signature":                    "def parse_yardopts_options(*args)",
            "source":                       "def parse_yardopts_options(*args)\n  opts = OptionParser.new\n  opts.base.long.clear # HACK: why are --help and --version defined?\n  yardopts_options(opts)\n  begin\n    opts.parse(args)\n  rescue OptionParser::ParseError => err\n    idx = args.index(err.args.first)\n    args = args[(idx+1)..-1]\n    args.shift while args.first && args.first[0,1] != '-'\n    retry\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":408,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23parse_yardopts_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints a list of all objects",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":399,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "print_list",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#print_list",
            "scope":                        "instance",
            "signature":                    "def print_list",
            "source":                       "def print_list\n  Registry.load_all\n  run_verifier(Registry.all).\n    sort_by {|item| [item.file || '', item.line || 0] }.each do |item|\n    puts \"#{item.file}:#{item.line}: #{item.path}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":399,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23print_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs the commandline utility, parsing arguments and generating\noutput if set.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":243,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::CLI::Yardoc#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  if args.size == 0 || !args.first.nil?\n    # fail early if arguments are not valid\n    return unless parse_arguments(*args)\n  end\n\n  checksums = nil\n  if use_cache\n    Registry.load\n    checksums = Registry.checksums.dup\n  end\n  YARD.parse(files, excluded)\n  Registry.save(use_cache) if save_yardoc\n\n  if generate\n    run_generate(checksums)\n    copy_assets\n  elsif list\n    print_list\n  end\n\n  if !list && statistics && log.level < Logger::ERROR\n    Registry.load_all\n    log.enter_level(Logger::ERROR) do\n      Stats.new(false).run(*args)\n    end\n  end\n\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":243,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Generates output for objects",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":337,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "run_generate",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"checksums"}],
            "path":                         "YARD::CLI::Yardoc#run_generate",
            "scope":                        "instance",
            "signature":                    "def run_generate(checksums)",
            "source":                       "def run_generate(checksums)\n  if checksums\n    changed_files = []\n    Registry.checksums.each do |file, hash|\n      changed_files << file if checksums[file] != hash\n    end\n  end\n  Registry.load_all if use_cache\n  objects = run_verifier(all_objects).reject do |object|\n    serialized = !options.serializer || options.serializer.exists?(object)\n    if checksums && serialized && !object.files.any? {|f, line| changed_files.include?(f) }\n      true\n    else\n      log.info \"Re-generating object #{object.path}...\"\n      false\n    end\n  end\n  Templates::Engine.generate(objects, options)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":337,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23run_generate"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#run_verifier",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":490,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "run_verifier",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"list"}],
            "path":                         "YARD::CLI::Yardoc#run_verifier",
            "scope":                        "instance",
            "signature":                    "def run_verifier(list)",
            "source":                       "def run_verifier(list)\n  options.verifier ? options.verifier.run(list) : list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":490,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23run_verifier"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":168,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "save_yardoc",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#save_yardoc",
            "scope":                        "instance",
            "signature":                    "def save_yardoc",
            "source":                       "def save_yardoc\n  @save_yardoc\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":168,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23save_yardoc"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":168,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "save_yardoc=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#save_yardoc=",
            "scope":                        "instance",
            "signature":                    "def save_yardoc=(value)",
            "source":                       "def save_yardoc=(value)\n  @save_yardoc = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":168,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23save_yardoc%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":197,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "statistics",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#statistics",
            "scope":                        "instance",
            "signature":                    "def statistics",
            "source":                       "def statistics\n  @statistics\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":197,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23statistics"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":197,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "statistics=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#statistics=",
            "scope":                        "instance",
            "signature":                    "def statistics=(value)",
            "source":                       "def statistics=(value)\n  @statistics = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":197,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23statistics%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Reads a .document file in the directory to get source file globs",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":424,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "support_rdoc_document_file!",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#support_rdoc_document_file!",
            "scope":                        "instance",
            "signature":                    "def support_rdoc_document_file!",
            "source":                       "def support_rdoc_document_file!\n  return [] unless use_document_file\n  File.read(\".document\").gsub(/^[ \\t]*#.+/m, '').split(/\\s+/)\nrescue Errno::ENOENT\n  []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":424,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23support_rdoc_document_file%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds tag options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":739,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "tag_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Yardoc#tag_options",
            "scope":                        "instance",
            "signature":                    "def tag_options(opts)",
            "source":                       "def tag_options(opts)\n  opts.separator \"\"\n  opts.separator \"Tag options: (TAG:TITLE looks like: 'overload:Overloaded Method')\"\n\n  opts.on('--tag TAG:TITLE', 'Registers a new free-form metadata @tag') do |tag|\n    add_tag(tag)\n  end\n\n  opts.on('--type-tag TAG:TITLE', 'Tag with an optional types field') do |tag|\n    add_tag(tag, :with_types)\n  end\n\n  opts.on('--type-name-tag TAG:TITLE', 'Tag with optional types and a name field') do |tag|\n    add_tag(tag, :with_types_and_name)\n  end\n\n  opts.on('--name-tag TAG:TITLE', 'Tag with a name field') do |tag|\n    add_tag(tag, :with_name)\n  end\n\n  opts.on('--title-tag TAG:TITLE', 'Tag with first line as title field') do |tag|\n    add_tag(tag, :with_title_and_text)\n  end\n\n  opts.on('--hide-tag TAG', 'Hides a previously defined tag from templates') do |tag|\n    self.hidden_tags |= [tag.to_sym]\n  end\n\n  opts.on('--transitive-tag TAG', 'Adds a transitive tag') do |tag|\n    Tags::Library.transitive_tags += [tag.to_sym]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":739,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23tag_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_cache",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#use_cache",
            "scope":                        "instance",
            "signature":                    "def use_cache",
            "source":                       "def use_cache\n  @use_cache\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_cache"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_cache=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#use_cache=",
            "scope":                        "instance",
            "signature":                    "def use_cache=(value)",
            "source":                       "def use_cache=(value)\n  @use_cache = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_cache%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_document_file",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#use_document_file",
            "scope":                        "instance",
            "signature":                    "def use_document_file",
            "source":                       "def use_document_file\n  @use_document_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_document_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_document_file=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#use_document_file=",
            "scope":                        "instance",
            "signature":                    "def use_document_file=(value)",
            "source":                       "def use_document_file=(value)\n  @use_document_file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_document_file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_yardopts_file",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#use_yardopts_file",
            "scope":                        "instance",
            "signature":                    "def use_yardopts_file",
            "source":                       "def use_yardopts_file\n  @use_yardopts_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_yardopts_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "use_yardopts_file=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#use_yardopts_file=",
            "scope":                        "instance",
            "signature":                    "def use_yardopts_file=(value)",
            "source":                       "def use_yardopts_file=(value)\n  @use_yardopts_file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23use_yardopts_file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Verifies that the markup options are valid before parsing any code.\nFailing early is better than failing late.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":361,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "verify_markup_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#verify_markup_options",
            "scope":                        "instance",
            "signature":                    "def verify_markup_options",
            "source":                       "def verify_markup_options\n  result, lvl = false, has_markup ? log.level : Logger::FATAL\n  obj = Struct.new(:options).new(options)\n  obj.extend(Templates::Helpers::MarkupHelper)\n  options.files.each do |file|\n    markup = file.attributes[:markup] || obj.markup_for_file('', file.filename)\n    result = obj.load_markup_provider(markup)\n    return false if !result && markup != :rdoc\n  end\n  options.markup = :rdoc unless has_markup\n  log.enter_level(lvl) { result = obj.load_markup_provider }\n  if !result && !has_markup\n    log.warn \"Could not load default RDoc formatter, \" +\n      \"ignoring any markup (install RDoc to get default formatting).\"\n    options.markup = :none\n    true\n  else\n    result\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":361,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23verify_markup_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Keep track of which visibilities are to be shown",
            "dynamic":                      true,
            "files":                        [{"file_line":184,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "visibilities",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#visibilities",
            "scope":                        "instance",
            "signature":                    "def visibilities",
            "source":                       "def visibilities\n  @visibilities\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":184,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23visibilities"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Keep track of which visibilities are to be shown",
            "dynamic":                      true,
            "files":                        [{"file_line":184,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "visibilities=",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::Yardoc#visibilities=",
            "scope":                        "instance",
            "signature":                    "def visibilities=(value)",
            "source":                       "def visibilities=(value)\n  @visibilities = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":184,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23visibilities%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the .yardopts file for default yard options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":324,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "yardopts",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc#yardopts",
            "scope":                        "instance",
            "signature":                    "def yardopts",
            "source":                       "def yardopts\n  return [] unless use_yardopts_file\n  File.read_binary(options_file).shell_split\nrescue Errno::ENOENT\n  []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":324,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23yardopts"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds --[no-]yardopts / --[no-]document",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":570,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "yardopts_options",
            "namespace":                    "YARD::CLI::Yardoc",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::CLI::Yardoc#yardopts_options",
            "scope":                        "instance",
            "signature":                    "def yardopts_options(opts)",
            "source":                       "def yardopts_options(opts)\n  opts.on('--[no-]yardopts [FILE]',\n          \"If arguments should be read from FILE\",\n          \"  (defaults to yes, FILE defaults to .yardopts)\") do |use_yardopts|\n    if use_yardopts.is_a?(String)\n      self.options_file = use_yardopts\n      self.use_yardopts_file = true\n    else\n      self.use_yardopts_file = (use_yardopts != false)\n    end\n  end\n\n  opts.on('--[no-]document', \"If arguments should be read from .document file. \",\n                             \"  (defaults to yes)\") do |use_document|\n    self.use_document_file = use_document\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":570,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%23yardopts_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The configuration filename to load extra options from",
            "dynamic":                      true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "DEFAULT_YARDOPTS_FILE",
            "namespace":                    "YARD::CLI::Yardoc",
            "path":                         "YARD::CLI::Yardoc::DEFAULT_YARDOPTS_FILE",
            "signature":                    "DEFAULT_YARDOPTS_FILE = \".yardopts\"",
            "source":                       "DEFAULT_YARDOPTS_FILE = \".yardopts\"",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "\".yardopts\"",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardoc%3A%3ADEFAULT_YARDOPTS_FILE"
        },
        {
            "attributes":                   {"class":{},"instance":{"file":{"write":"YARD::CLI::YardocOptions#file=","read":"YARD::CLI::YardocOptions#file"},"readme":{"write":"YARD::CLI::YardocOptions#readme=","read":"YARD::CLI::YardocOptions#readme"},"objects":{"write":"YARD::CLI::YardocOptions#objects=","read":"YARD::CLI::YardocOptions#objects"},"item":{"write":"YARD::CLI::YardocOptions#item=","read":"YARD::CLI::YardocOptions#item"},"index":{"write":"YARD::CLI::YardocOptions#index=","read":"YARD::CLI::YardocOptions#index"}}},
            "children":                     ["YARD::CLI::YardocOptions#files","YARD::CLI::YardocOptions#title","YARD::CLI::YardocOptions#verifier","YARD::CLI::YardocOptions#serializer","YARD::CLI::YardocOptions#format","YARD::CLI::YardocOptions#onefile","YARD::CLI::YardocOptions#readme=","YARD::CLI::YardocOptions#readme","YARD::CLI::YardocOptions#objects=","YARD::CLI::YardocOptions#objects","YARD::CLI::YardocOptions#index=","YARD::CLI::YardocOptions#index","YARD::CLI::YardocOptions#item=","YARD::CLI::YardocOptions#item","YARD::CLI::YardocOptions#file=","YARD::CLI::YardocOptions#file"],
            "current_file_has_comments":    true,
            "docstring":                    "Default options used in +yard doc+ command.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "YardocOptions",
            "namespace":                    "YARD::CLI",
            "path":                         "YARD::CLI::YardocOptions",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Templates::TemplateOptions",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACLI%3A%3AYardocOptions%23files","YARD%3A%3ACLI%3A%3AYardocOptions%23title","YARD%3A%3ACLI%3A%3AYardocOptions%23verifier","YARD%3A%3ACLI%3A%3AYardocOptions%23serializer","YARD%3A%3ACLI%3A%3AYardocOptions%23format","YARD%3A%3ACLI%3A%3AYardocOptions%23onefile","YARD%3A%3ACLI%3A%3AYardocOptions%23readme%3D","YARD%3A%3ACLI%3A%3AYardocOptions%23readme","YARD%3A%3ACLI%3A%3AYardocOptions%23objects%3D","YARD%3A%3ACLI%3A%3AYardocOptions%23objects","YARD%3A%3ACLI%3A%3AYardocOptions%23index%3D","YARD%3A%3ACLI%3A%3AYardocOptions%23index","YARD%3A%3ACLI%3A%3AYardocOptions%23item%3D","YARD%3A%3ACLI%3A%3AYardocOptions%23item","YARD%3A%3ACLI%3A%3AYardocOptions%23file%3D","YARD%3A%3ACLI%3A%3AYardocOptions%23file"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions",
            "y_ld:superclass":              "YARD%3A%3ATemplates%3A%3ATemplateOptions"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "file=",
            "namespace":                    "YARD::CLI::YardocOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::YardocOptions#file=",
            "scope":                        "instance",
            "signature":                    "def file=(value)",
            "source":                       "def file=(value)\n  @file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "files",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#files",
            "scope":                        "instance",
            "signature":                    "default_attr :files, lambda { [] }",
            "source":                       "default_attr :files, lambda { [] }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "format",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#format",
            "scope":                        "instance",
            "signature":                    "default_attr :format, :html",
            "source":                       "default_attr :format, :html",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23format"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "index",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#index",
            "scope":                        "instance",
            "signature":                    "def index",
            "source":                       "def index\n  @index\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23index"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "index=",
            "namespace":                    "YARD::CLI::YardocOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::YardocOptions#index=",
            "scope":                        "instance",
            "signature":                    "def index=(value)",
            "source":                       "def index=(value)\n  @index = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23index%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "item",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#item",
            "scope":                        "instance",
            "signature":                    "def item",
            "source":                       "def item\n  @item\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23item"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "item=",
            "namespace":                    "YARD::CLI::YardocOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::YardocOptions#item=",
            "scope":                        "instance",
            "signature":                    "def item=(value)",
            "source":                       "def item=(value)\n  @item = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23item%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "objects",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#objects",
            "scope":                        "instance",
            "signature":                    "def objects",
            "source":                       "def objects\n  @objects\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23objects"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "objects=",
            "namespace":                    "YARD::CLI::YardocOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::YardocOptions#objects=",
            "scope":                        "instance",
            "signature":                    "def objects=(value)",
            "source":                       "def objects=(value)\n  @objects = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23objects%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "onefile",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#onefile",
            "scope":                        "instance",
            "signature":                    "default_attr :onefile, false",
            "source":                       "default_attr :onefile, false",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23onefile"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "readme",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#readme",
            "scope":                        "instance",
            "signature":                    "def readme",
            "source":                       "def readme\n  @readme\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23readme"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "readme=",
            "namespace":                    "YARD::CLI::YardocOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CLI::YardocOptions#readme=",
            "scope":                        "instance",
            "signature":                    "def readme=(value)",
            "source":                       "def readme=(value)\n  @readme = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23readme%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "serializer",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#serializer",
            "scope":                        "instance",
            "signature":                    "default_attr :serializer, lambda { Serializers::FileSystemSerializer.new }",
            "source":                       "default_attr :serializer, lambda { Serializers::FileSystemSerializer.new }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23serializer"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "title",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#title",
            "scope":                        "instance",
            "signature":                    "default_attr :title, \"Documentation by YARD #{YARD::VERSION}\"",
            "source":                       "default_attr :title, \"Documentation by YARD #{YARD::VERSION}\"",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23title"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/cli/yardoc.rb"}],
            "name":                         "verifier",
            "namespace":                    "YARD::CLI::YardocOptions",
            "path":                         "YARD::CLI::YardocOptions#verifier",
            "scope":                        "instance",
            "signature":                    "default_attr :verifier, lambda { Verifier.new }",
            "source":                       "default_attr :verifier, lambda { Verifier.new }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcli%2Fyardoc.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACLI%3A%3AYardocOptions%23verifier"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard.rb"}],
            "name":                         "CONFIG_DIR",
            "namespace":                    "YARD",
            "path":                         "YARD::CONFIG_DIR",
            "signature":                    "CONFIG_DIR = File.expand_path('~/.yard')",
            "source":                       "CONFIG_DIR = File.expand_path('~/.yard')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path('~/.yard')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ACONFIG_DIR"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CodeObjects::CodeObjectList","YARD::CodeObjects::NSEP","YARD::CodeObjects::NSEPQ","YARD::CodeObjects::ISEP","YARD::CodeObjects::ISEPQ","YARD::CodeObjects::CSEP","YARD::CodeObjects::CSEPQ","YARD::CodeObjects::CONSTANTMATCH","YARD::CodeObjects::NAMESPACEMATCH","YARD::CodeObjects::METHODNAMEMATCH","YARD::CodeObjects::METHODMATCH","YARD::CodeObjects::BUILTIN_EXCEPTIONS","YARD::CodeObjects::BUILTIN_CLASSES","YARD::CodeObjects::BUILTIN_MODULES","YARD::CodeObjects::BUILTIN_ALL","YARD::CodeObjects::BUILTIN_EXCEPTIONS_HASH","YARD::CodeObjects::Base","YARD::CodeObjects::ProxyMethodError","YARD::CodeObjects::Proxy","YARD::CodeObjects::RootObject","YARD::CodeObjects::ClassObject","YARD::CodeObjects::MacroObject","YARD::CodeObjects::ModuleObject","YARD::CodeObjects::MethodObject","YARD::CodeObjects::ConstantObject","YARD::CodeObjects::NamespaceObject","YARD::CodeObjects::ExtraFileObject","YARD::CodeObjects::ClassVariableObject","YARD::CodeObjects::ExtendedMethodObject"],
            "current_file_has_comments":    true,
            "docstring":                    "A \"code object\" is defined as any entity in the Ruby language.\nClasses, modules, methods, class variables and constants are the\nmajor objects, but DSL languages can create their own by inheriting\nfrom {CodeObjects::Base}.",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/code_objects/base.rb"},{"file_line":2,"file_path":"lib/yard/code_objects/proxy.rb"},{"file_line":2,"file_path":"lib/yard/code_objects/root_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/class_object.rb"},{"file_line":4,"file_path":"lib/yard/code_objects/macro_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/module_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/method_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/constant_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/namespace_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/extra_file_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/class_variable_object.rb"},{"file_line":1,"file_path":"lib/yard/code_objects/extended_method_object.rb"}],
            "name":                         "CodeObjects",
            "namespace":                    "YARD",
            "path":                         "YARD::CodeObjects",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3ACodeObjectList","YARD%3A%3ACodeObjects%3A%3ANSEP","YARD%3A%3ACodeObjects%3A%3ANSEPQ","YARD%3A%3ACodeObjects%3A%3AISEP","YARD%3A%3ACodeObjects%3A%3AISEPQ","YARD%3A%3ACodeObjects%3A%3ACSEP","YARD%3A%3ACodeObjects%3A%3ACSEPQ","YARD%3A%3ACodeObjects%3A%3ACONSTANTMATCH","YARD%3A%3ACodeObjects%3A%3ANAMESPACEMATCH","YARD%3A%3ACodeObjects%3A%3AMETHODNAMEMATCH","YARD%3A%3ACodeObjects%3A%3AMETHODMATCH","YARD%3A%3ACodeObjects%3A%3ABUILTIN_EXCEPTIONS","YARD%3A%3ACodeObjects%3A%3ABUILTIN_CLASSES","YARD%3A%3ACodeObjects%3A%3ABUILTIN_MODULES","YARD%3A%3ACodeObjects%3A%3ABUILTIN_ALL","YARD%3A%3ACodeObjects%3A%3ABUILTIN_EXCEPTIONS_HASH","YARD%3A%3ACodeObjects%3A%3ABase","YARD%3A%3ACodeObjects%3A%3AProxyMethodError","YARD%3A%3ACodeObjects%3A%3AProxy","YARD%3A%3ACodeObjects%3A%3ARootObject","YARD%3A%3ACodeObjects%3A%3AClassObject","YARD%3A%3ACodeObjects%3A%3AMacroObject","YARD%3A%3ACodeObjects%3A%3AModuleObject","YARD%3A%3ACodeObjects%3A%3AMethodObject","YARD%3A%3ACodeObjects%3A%3AConstantObject","YARD%3A%3ACodeObjects%3A%3ANamespaceObject","YARD%3A%3ACodeObjects%3A%3AExtraFileObject","YARD%3A%3ACodeObjects%3A%3AClassVariableObject","YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject"],
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fmodule_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fconstant_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_variable_object.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Fcode_objects%2Fextended_method_object.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ACodeObjects"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "All builtin Ruby classes and modules.",
            "dynamic":                      true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "BUILTIN_ALL",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::BUILTIN_ALL",
            "signature":                    "BUILTIN_ALL = BUILTIN_CLASSES + BUILTIN_MODULES",
            "source":                       "BUILTIN_ALL = BUILTIN_CLASSES + BUILTIN_MODULES",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "BUILTIN_CLASSES + BUILTIN_MODULES",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABUILTIN_ALL"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "All builtin Ruby classes for inheritance tree.",
            "dynamic":                      true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "BUILTIN_CLASSES",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::BUILTIN_CLASSES",
            "signature":                    "BUILTIN_CLASSES = [\"TrueClass\", \"Array\", \"Dir\", \"Struct\", \"UnboundMethod\", \"Object\", \"Fixnum\", \"Float\",",
            "source":                       "BUILTIN_CLASSES = [\"TrueClass\", \"Array\", \"Dir\", \"Struct\", \"UnboundMethod\", \"Object\", \"Fixnum\", \"Float\",\n\"ThreadGroup\", \"MatchingData\", \"MatchData\", \"Proc\", \"Binding\", \"Class\", \"Time\", \"Bignum\", \"NilClass\", \"Symbol\",\n\"Numeric\", \"String\", \"Data\", \"MatchData\", \"Regexp\", \"Integer\", \"File\", \"IO\", \"Range\", \"FalseClass\",\n\"Method\", \"Continuation\", \"Thread\", \"Hash\", \"Module\"] + BUILTIN_EXCEPTIONS",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\"TrueClass\", \"Array\", \"Dir\", \"Struct\", \"UnboundMethod\", \"Object\", \"Fixnum\", \"Float\",\n\"ThreadGroup\", \"MatchingData\", \"MatchData\", \"Proc\", \"Binding\", \"Class\", \"Time\", \"Bignum\", \"NilClass\", \"Symbol\",\n\"Numeric\", \"String\", \"Data\", \"MatchData\", \"Regexp\", \"Integer\", \"File\", \"IO\", \"Range\", \"FalseClass\",\n\"Method\", \"Continuation\", \"Thread\", \"Hash\", \"Module\"] + BUILTIN_EXCEPTIONS",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABUILTIN_CLASSES"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "All builtin Ruby exception classes for inheritance tree.",
            "dynamic":                      true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "BUILTIN_EXCEPTIONS",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::BUILTIN_EXCEPTIONS",
            "signature":                    "BUILTIN_EXCEPTIONS = [\"SecurityError\", \"Exception\", \"NoMethodError\", \"FloatDomainError\",",
            "source":                       "BUILTIN_EXCEPTIONS = [\"SecurityError\", \"Exception\", \"NoMethodError\", \"FloatDomainError\",\n\"IOError\", \"TypeError\", \"NotImplementedError\", \"SystemExit\", \"Interrupt\", \"SyntaxError\",\n\"RangeError\", \"NoMemoryError\", \"ArgumentError\", \"ThreadError\", \"EOFError\", \"RuntimeError\",\n\"ZeroDivisionError\", \"StandardError\", \"LoadError\", \"NameError\", \"LocalJumpError\", \"SystemCallError\",\n\"SignalException\", \"ScriptError\", \"SystemStackError\", \"RegexpError\", \"IndexError\"]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\"SecurityError\", \"Exception\", \"NoMethodError\", \"FloatDomainError\",\n\"IOError\", \"TypeError\", \"NotImplementedError\", \"SystemExit\", \"Interrupt\", \"SyntaxError\",\n\"RangeError\", \"NoMemoryError\", \"ArgumentError\", \"ThreadError\", \"EOFError\", \"RuntimeError\",\n\"ZeroDivisionError\", \"StandardError\", \"LoadError\", \"NameError\", \"LocalJumpError\", \"SystemCallError\",\n\"SignalException\", \"ScriptError\", \"SystemStackError\", \"RegexpError\", \"IndexError\"]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABUILTIN_EXCEPTIONS"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Hash of {BUILTIN_EXCEPTIONS} as keys and true as value (for O(1) lookups)",
            "dynamic":                      true,
            "files":                        [{"file_line":80,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "BUILTIN_EXCEPTIONS_HASH",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::BUILTIN_EXCEPTIONS_HASH",
            "signature":                    "BUILTIN_EXCEPTIONS_HASH = BUILTIN_EXCEPTIONS.inject({}) {|h,n| h.update(n => true) }",
            "source":                       "BUILTIN_EXCEPTIONS_HASH = BUILTIN_EXCEPTIONS.inject({}) {|h,n| h.update(n => true) }",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "BUILTIN_EXCEPTIONS.inject({}) {",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":80,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABUILTIN_EXCEPTIONS_HASH"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "All builtin Ruby modules for mixin handling.",
            "dynamic":                      true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "BUILTIN_MODULES",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::BUILTIN_MODULES",
            "signature":                    "BUILTIN_MODULES = [\"ObjectSpace\", \"Signal\", \"Marshal\", \"Kernel\", \"Process\", \"GC\", \"FileTest\", \"Enumerable\",",
            "source":                       "BUILTIN_MODULES = [\"ObjectSpace\", \"Signal\", \"Marshal\", \"Kernel\", \"Process\", \"GC\", \"FileTest\", \"Enumerable\",\n\"Comparable\", \"Errno\", \"Precision\", \"Math\"]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\"ObjectSpace\", \"Signal\", \"Marshal\", \"Kernel\", \"Process\", \"GC\", \"FileTest\", \"Enumerable\",\n\"Comparable\", \"Errno\", \"Precision\", \"Math\"]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABUILTIN_MODULES"
        },
        {
            "aliases":                      {"YARD::CodeObjects::Base#to_s":"path","YARD::CodeObjects::Base#parent=":"namespace=","YARD::CodeObjects::Base#eql?":"equal?","YARD::CodeObjects::Base#==":"equal?","YARD::CodeObjects::Base#parent":"namespace"},
            "attributes":                   {"class":{},"instance":{"signature":{"write":"YARD::CodeObjects::Base#signature=","read":"YARD::CodeObjects::Base#signature"},"namespace":{"write":"YARD::CodeObjects::Base#namespace=","read":"YARD::CodeObjects::Base#namespace"},"docstring":{"write":"YARD::CodeObjects::Base#docstring=","read":"YARD::CodeObjects::Base#docstring"},"group":{"write":"YARD::CodeObjects::Base#group=","read":"YARD::CodeObjects::Base#group"},"visibility":{"write":"YARD::CodeObjects::Base#visibility=","read":"YARD::CodeObjects::Base#visibility"},"source":{"write":"YARD::CodeObjects::Base#source=","read":"YARD::CodeObjects::Base#source"},"dynamic":{"write":"YARD::CodeObjects::Base#dynamic=","read":"YARD::CodeObjects::Base#dynamic"},"files":{"write":null,"read":"YARD::CodeObjects::Base#files"},"source_type":{"write":"YARD::CodeObjects::Base#source_type=","read":"YARD::CodeObjects::Base#source_type"}}},
            "children":                     ["YARD::CodeObjects::Base#files","YARD::CodeObjects::Base#namespace","YARD::CodeObjects::Base#source","YARD::CodeObjects::Base#source_type=","YARD::CodeObjects::Base#source_type","YARD::CodeObjects::Base#signature=","YARD::CodeObjects::Base#signature","YARD::CodeObjects::Base#docstring","YARD::CodeObjects::Base#dynamic=","YARD::CodeObjects::Base#dynamic","YARD::CodeObjects::Base#group=","YARD::CodeObjects::Base#group","YARD::CodeObjects::Base#dynamic?","YARD::CodeObjects::Base#visibility=","YARD::CodeObjects::Base#visibility","YARD::CodeObjects::Base.new","YARD::CodeObjects::Base.===","YARD::CodeObjects::Base#initialize","YARD::CodeObjects::Base#copy_to","YARD::CodeObjects::Base#name","YARD::CodeObjects::Base#add_file","YARD::CodeObjects::Base#file","YARD::CodeObjects::Base#line","YARD::CodeObjects::Base#equal?","YARD::CodeObjects::Base#==","YARD::CodeObjects::Base#eql?","YARD::CodeObjects::Base#hash","YARD::CodeObjects::Base#to_ary","YARD::CodeObjects::Base#[]","YARD::CodeObjects::Base#[]=","YARD::CodeObjects::Base#method_missing","YARD::CodeObjects::Base#source=","YARD::CodeObjects::Base#docstring=","YARD::CodeObjects::Base#type","YARD::CodeObjects::Base#path","YARD::CodeObjects::Base#to_s","YARD::CodeObjects::Base#relative_path","YARD::CodeObjects::Base#format","YARD::CodeObjects::Base#inspect","YARD::CodeObjects::Base#namespace=","YARD::CodeObjects::Base#parent","YARD::CodeObjects::Base#parent=","YARD::CodeObjects::Base#tag","YARD::CodeObjects::Base#tags","YARD::CodeObjects::Base#has_tag?","YARD::CodeObjects::Base#root?","YARD::CodeObjects::Base#sep","YARD::CodeObjects::Base#copyable_attributes","YARD::CodeObjects::Base#format_source"],
            "current_file_has_comments":    true,
            "docstring":                    "+Base+ is the superclass of all code objects recognized by YARD. A code\nobject is any entity in the Ruby language (class, method, module). A\nDSL might subclass +Base+ to create a new custom object representing\na new entity type.\n\n== Registry Integration\nAny created object associated with a namespace is immediately registered\nwith the registry. This allows the Registry to act as an identity map\nto ensure that no object is represented by more than one Ruby object\nin memory. A unique {#path} is essential for this identity map to work\ncorrectly.\n\n== Custom Attributes\nCode objects allow arbitrary custom attributes to be set using the\n{#[]=} assignment method.\n\n== Namespaces\nThere is a special type of object called a \"namespace\". These are subclasses\nof the {NamespaceObject} and represent Ruby entities that can have\nobjects defined within them. Classically these are modules and classes,\nthough a DSL might create a custom {NamespaceObject} to describe a\nspecific set of objects.",
            "dynamic":                      true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "Base",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::Base",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3ABase%23files","YARD%3A%3ACodeObjects%3A%3ABase%23namespace","YARD%3A%3ACodeObjects%3A%3ABase%23source","YARD%3A%3ACodeObjects%3A%3ABase%23source_type%3D","YARD%3A%3ACodeObjects%3A%3ABase%23source_type","YARD%3A%3ACodeObjects%3A%3ABase%23signature%3D","YARD%3A%3ACodeObjects%3A%3ABase%23signature","YARD%3A%3ACodeObjects%3A%3ABase%23docstring","YARD%3A%3ACodeObjects%3A%3ABase%23dynamic%3D","YARD%3A%3ACodeObjects%3A%3ABase%23dynamic","YARD%3A%3ACodeObjects%3A%3ABase%23group%3D","YARD%3A%3ACodeObjects%3A%3ABase%23group","YARD%3A%3ACodeObjects%3A%3ABase%23dynamic%3F","YARD%3A%3ACodeObjects%3A%3ABase%23visibility%3D","YARD%3A%3ACodeObjects%3A%3ABase%23visibility","YARD%3A%3ACodeObjects%3A%3ABase.new","YARD%3A%3ACodeObjects%3A%3ABase.%3D%3D%3D","YARD%3A%3ACodeObjects%3A%3ABase%23initialize","YARD%3A%3ACodeObjects%3A%3ABase%23copy_to","YARD%3A%3ACodeObjects%3A%3ABase%23name","YARD%3A%3ACodeObjects%3A%3ABase%23add_file","YARD%3A%3ACodeObjects%3A%3ABase%23file","YARD%3A%3ACodeObjects%3A%3ABase%23line","YARD%3A%3ACodeObjects%3A%3ABase%23equal%3F","YARD%3A%3ACodeObjects%3A%3ABase%23%3D%3D","YARD%3A%3ACodeObjects%3A%3ABase%23eql%3F","YARD%3A%3ACodeObjects%3A%3ABase%23hash","YARD%3A%3ACodeObjects%3A%3ABase%23to_ary","YARD%3A%3ACodeObjects%3A%3ABase%23%5B%5D","YARD%3A%3ACodeObjects%3A%3ABase%23%5B%5D%3D","YARD%3A%3ACodeObjects%3A%3ABase%23method_missing","YARD%3A%3ACodeObjects%3A%3ABase%23source%3D","YARD%3A%3ACodeObjects%3A%3ABase%23docstring%3D","YARD%3A%3ACodeObjects%3A%3ABase%23type","YARD%3A%3ACodeObjects%3A%3ABase%23path","YARD%3A%3ACodeObjects%3A%3ABase%23to_s","YARD%3A%3ACodeObjects%3A%3ABase%23relative_path","YARD%3A%3ACodeObjects%3A%3ABase%23format","YARD%3A%3ACodeObjects%3A%3ABase%23inspect","YARD%3A%3ACodeObjects%3A%3ABase%23namespace%3D","YARD%3A%3ACodeObjects%3A%3ABase%23parent","YARD%3A%3ACodeObjects%3A%3ABase%23parent%3D","YARD%3A%3ACodeObjects%3A%3ABase%23tag","YARD%3A%3ACodeObjects%3A%3ABase%23tags","YARD%3A%3ACodeObjects%3A%3ABase%23has_tag%3F","YARD%3A%3ACodeObjects%3A%3ABase%23root%3F","YARD%3A%3ACodeObjects%3A%3ABase%23sep","YARD%3A%3ACodeObjects%3A%3ABase%23copyable_attributes","YARD%3A%3ACodeObjects%3A%3ABase%23format_source"],
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "Tests if another object is equal to this, including a proxy",
            "dynamic":                      true,
            "files":                        [{"file_line":299,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#==",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  if other.is_a?(Base) || other.is_a?(Proxy)\n    path == other.path\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":299,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Accesses a custom attribute on the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":312,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "[]",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "YARD::CodeObjects::Base#[]",
            "scope":                        "instance",
            "signature":                    "def [](key)",
            "source":                       "def [](key)\n  if respond_to?(key)\n    send(key)\n  elsif instance_variable_defined?(\"@#{key}\")\n    instance_variable_get(\"@#{key}\")\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":312,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23%5B%5D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets a custom attribute on the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":325,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "[]=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"key"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::Base#[]=",
            "scope":                        "instance",
            "signature":                    "def []=(key, value)",
            "source":                       "def []=(key, value)\n  if respond_to?(\"#{key}=\")\n    send(\"#{key}=\", value)\n  else\n    instance_variable_set(\"@#{key}\", value)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":325,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23%5B%5D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Associates a file with a code object, optionally adding the line where it was defined.\nBy convention, '<stdin>' should be used to associate code that comes form standard input.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":260,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "add_file",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"file"},{"parm_type":"nil","parm_name":"line"},{"parm_type":"false","parm_name":"has_comments"}],
            "path":                         "YARD::CodeObjects::Base#add_file",
            "scope":                        "instance",
            "signature":                    "def add_file(file, line = nil, has_comments = false)",
            "source":                       "def add_file(file, line = nil, has_comments = false)\n  raise(ArgumentError, \"file cannot be nil or empty\") if file.nil? || file == ''\n  obj = [file.to_s, line]\n  return if files.include?(obj)\n  if has_comments && !@current_file_has_comments\n    @current_file_has_comments = true\n    @files.unshift(obj)\n  else\n    @files << obj # back of the line\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":260,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23add_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Copies all data in this object to another code object, except for\nuniquely identifying information (path, namespace, name, scope).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":233,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "copy_to",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Base#copy_to",
            "scope":                        "instance",
            "signature":                    "def copy_to(other)",
            "source":                       "def copy_to(other)\n  copyable_attributes.each do |ivar|\n    ivar = \"@#{ivar}\"\n    other.instance_variable_set(ivar, instance_variable_get(ivar))\n  end\n  other.docstring = docstring.to_raw\n  other\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":233,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23copy_to"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Override this method if your code object subclass does not allow\ncopying of certain attributes.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":531,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "copyable_attributes",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#copyable_attributes",
            "scope":                        "instance",
            "signature":                    "def copyable_attributes",
            "source":                       "def copyable_attributes\n  vars = instance_variables.map {|ivar| ivar.to_s[1..-1] }\n  vars -= %w(docstring namespace name path)\n  vars\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":531,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23copyable_attributes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The documentation string associated with the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":141,"file_path":"lib/yard/code_objects/base.rb"},{"file_line":367,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "docstring",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#docstring",
            "scope":                        "instance",
            "signature":                    "def docstring",
            "source":                       "def docstring\n  @docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":141,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"},{"file_line":367,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23docstring"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attaches a docstring to a code object by parsing the comments attached to the statement\nand filling the {#tags} and {#docstring} methods with the parsed information.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":387,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "docstring=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"comments"}],
            "path":                         "YARD::CodeObjects::Base#docstring=",
            "scope":                        "instance",
            "signature":                    "def docstring=(comments)",
            "source":                       "def docstring=(comments)\n  if comments =~ /\\A\\s*\\(see (\\S+)\\s*\\)(?:\\s|$)/\n    path, extra = $1, $'\n    @docstring_extra = Docstring.new(extra, self)\n    @docstring_extra_tags = Docstring === comments ? comments.tags : []\n    @docstring_extra.add_tag(*@docstring_extra_tags)\n    @docstring = Proxy.new(namespace, path)\n  else\n    @docstring_extra = nil\n    @docstring_extra_tags = nil\n    @docstring = Docstring === comments ? comments : Docstring.new(comments, self)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":387,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23docstring%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Marks whether or not the method is conditionally defined at runtime",
            "dynamic":                      true,
            "files":                        [{"file_line":145,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "dynamic",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#dynamic",
            "scope":                        "instance",
            "signature":                    "def dynamic",
            "source":                       "def dynamic\n  @dynamic\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":145,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23dynamic"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Marks whether or not the method is conditionally defined at runtime",
            "dynamic":                      true,
            "files":                        [{"file_line":145,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "dynamic=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::Base#dynamic=",
            "scope":                        "instance",
            "signature":                    "def dynamic=(value)",
            "source":                       "def dynamic=(value)\n  @dynamic = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":145,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23dynamic%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Is the object defined conditionally at runtime?",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":153,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "dynamic?",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#dynamic?",
            "scope":                        "instance",
            "signature":                    "def dynamic?; @dynamic end",
            "source":                       "def dynamic?; @dynamic end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":153,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23dynamic%3F"
        },
        {
            "docstring":                    "Tests if another object is equal to this, including a proxy",
            "dynamic":                      true,
            "files":                        [{"file_line":300,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "eql?",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#eql?",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  if other.is_a?(Base) || other.is_a?(Proxy)\n    path == other.path\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":300,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23eql%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if another object is equal to this, including a proxy",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":292,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "equal?",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Base#equal?",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  if other.is_a?(Base) || other.is_a?(Proxy)\n    path == other.path\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":292,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23equal%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the filename the object was first parsed at, taking\ndefinitions with docstrings first.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":276,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @files.first ? @files.first[0] : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":276,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The files the object was defined in. To add a file, use {#add_file}.",
            "dynamic":                      true,
            "files":                        [{"file_line":115,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "files",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#files",
            "scope":                        "instance",
            "signature":                    "def files",
            "source":                       "def files\n  @files\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":115,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Renders the object using the {Templates::Engine templating system}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":463,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "format",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"options"}],
            "path":                         "YARD::CodeObjects::Base#format",
            "scope":                        "instance",
            "signature":                    "def format(options = {})",
            "source":                       "def format(options = {})\n  options = options.merge(:object => self)\n  Templates::Engine.render(options)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":463,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23format"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats source code by removing leading indentation",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":543,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "format_source",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::CodeObjects::Base#format_source",
            "scope":                        "instance",
            "signature":                    "def format_source(source)",
            "source":                       "def format_source(source)\n  source.chomp!\n  last = source.split(/\\r?\\n/).last\n  indent = last ? last[/^([ \\t]*)/, 1].length : 0\n  source.gsub(/^[ \\t]{#{indent}}/, '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":543,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23format_source"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "group",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#group",
            "scope":                        "instance",
            "signature":                    "def group",
            "source":                       "def group\n  @group\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23group"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "group=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::Base#group=",
            "scope":                        "instance",
            "signature":                    "def group=(value)",
            "source":                       "def group=(value)\n  @group = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23group%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if the {#docstring} has a tag",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":508,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "has_tag?",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::CodeObjects::Base#has_tag?",
            "scope":                        "instance",
            "signature":                    "def has_tag?(name) docstring.has_tag?(name) end",
            "source":                       "def has_tag?(name) docstring.has_tag?(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":508,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23has_tag%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":303,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#hash",
            "scope":                        "instance",
            "signature":                    "def hash; path.hash end",
            "source":                       "def hash; path.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":303,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new code object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":207,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::Base#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(namespace, name, *args, &block)",
            "source":                       "def initialize(namespace, name, *args, &block)\n  if namespace && namespace != :root &&\n      !namespace.is_a?(NamespaceObject) && !namespace.is_a?(Proxy)\n    raise ArgumentError, \"Invalid namespace object: #{namespace}\"\n  end\n\n  @files = []\n  @current_file_has_comments = false\n  @name = name.to_sym\n  @source_type = :ruby\n  @visibility = :public\n  @tags = []\n  @docstring = Docstring.new('', self)\n  @docstring_extra = nil\n  @docstring_extra_tags = nil\n  @namespace = nil\n  self.namespace = namespace\n  yield(self) if block_given?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":207,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Inspects the object, returning the type and path",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":470,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  \"#<yardoc #{type} #{path}>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":470,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23inspect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the line the object was first parsed at (or nil)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":284,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "line",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#line",
            "scope":                        "instance",
            "signature":                    "def line",
            "source":                       "def line\n  @files.first ? @files.first[1] : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":284,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":342,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::Base#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(meth, *args, &block)",
            "source":                       "def method_missing(meth, *args, &block)\n  if meth.to_s =~ /=$/\n    self[meth.to_s[0..-2]] = args.first\n  elsif instance_variable_get(\"@#{meth}\")\n    self[meth]\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":342,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23method_missing"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The name of the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":248,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":"false","parm_name":"prefix"}],
            "path":                         "YARD::CodeObjects::Base#name",
            "scope":                        "instance",
            "signature":                    "def name(prefix = false)",
            "source":                       "def name(prefix = false)\n  prefix ? @name.to_s : @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":248,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The namespace the object is defined in. If the object is in the\ntop level namespace, this is {Registry.root}",
            "dynamic":                      true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "namespace",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23namespace"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the namespace the object is defined in.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":479,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "namespace=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"}],
            "path":                         "YARD::CodeObjects::Base#namespace=",
            "scope":                        "instance",
            "signature":                    "def namespace=(obj)",
            "source":                       "def namespace=(obj)\n  if @namespace\n    @namespace.children.delete(self)\n    Registry.delete(self)\n  end\n\n  @namespace = (obj == :root ? Registry.root : obj)\n\n  if @namespace\n    reg_obj = Registry.at(path)\n    return if reg_obj && reg_obj.class == self.class\n    @namespace.children << self unless @namespace.is_a?(Proxy)\n    Registry.register(self)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":479,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23namespace%3D"
        },
        {
            "docstring":                    "The namespace the object is defined in. If the object is in the\ntop level namespace, this is {Registry.root}",
            "dynamic":                      true,
            "files":                        [{"file_line":495,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "parent",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#parent",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":495,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23parent"
        },
        {
            "docstring":                    "Sets the namespace the object is defined in.",
            "dynamic":                      true,
            "files":                        [{"file_line":496,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "parent=",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#parent=",
            "scope":                        "instance",
            "signature":                    "def namespace=(obj)",
            "source":                       "def namespace=(obj)\n  if @namespace\n    @namespace.children.delete(self)\n    Registry.delete(self)\n  end\n\n  @namespace = (obj == :root ? Registry.root : obj)\n\n  if @namespace\n    reg_obj = Registry.at(path)\n    return if reg_obj && reg_obj.class == self.class\n    @namespace.children << self unless @namespace.is_a?(Proxy)\n    Registry.register(self)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":496,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23parent%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Represents the unique path of the object. The default implementation\njoins the path of {#namespace} with {#name} via the value of {#sep}.\nCustom code objects should ensure that the path is unique to the code\nobject by either overriding {#sep} or this method.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":418,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  @path ||= if parent && !parent.root?\n    [parent.path, name.to_s].join(sep)\n  else\n    name.to_s\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":418,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":430,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "relative_path",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Base#relative_path",
            "scope":                        "instance",
            "signature":                    "def relative_path(other)",
            "source":                       "def relative_path(other)\n  other = Registry.at(other) if String === other && Registry.at(other)\n  same_parent = false\n  if other.respond_to?(:path)\n    same_parent = other.parent == parent\n    other = other.path\n  end\n  return other unless namespace\n  common = [path, other].join(\" \").match(/^(\\S*)\\S*(?: \\1\\S*)*$/)[1]\n  common = path unless common =~ /(\\.|::|#)$/\n  common = common.sub(/(\\.|::|#)[^:#\\.]*?$/, '') if same_parent\n  if %w(. :).include?(common[-1,1]) || other[common.size,1] == '#'\n    suffix = ''\n  else\n    suffix = '(::|\\.)'\n  end\n  result = other.sub(/^#{Regexp.quote common}#{suffix}/, '')\n  result.empty? ? other : result\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":430,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23relative_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":511,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "root?",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#root?",
            "scope":                        "instance",
            "signature":                    "def root?; false end",
            "source":                       "def root?; false end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":511,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23root%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Override this method with a custom component separator. For instance,\n{MethodObject} implements sep as '#' or '.' (depending on if the\nmethod is instance or class respectively). {#path} depends on this\nvalue to generate the full path in the form: namespace.path + sep + name",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":520,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "sep",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#sep",
            "scope":                        "instance",
            "signature":                    "def sep; NSEP end",
            "source":                       "def sep; NSEP end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":520,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23sep"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The one line signature representing an object. For a method, this will\nbe of the form \"def meth(arguments...)\". This is usually the first\nsource line.",
            "dynamic":                      true,
            "files":                        [{"file_line":137,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "signature",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#signature",
            "scope":                        "instance",
            "signature":                    "def signature",
            "source":                       "def signature\n  @signature\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":137,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23signature"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The one line signature representing an object. For a method, this will\nbe of the form \"def meth(arguments...)\". This is usually the first\nsource line.",
            "dynamic":                      true,
            "files":                        [{"file_line":137,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "signature=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::Base#signature=",
            "scope":                        "instance",
            "signature":                    "def signature=(value)",
            "source":                       "def signature=(value)\n  @signature = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":137,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23signature%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The source code associated with the object",
            "dynamic":                      true,
            "files":                        [{"file_line":124,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "source",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#source",
            "scope":                        "instance",
            "signature":                    "def source",
            "source":                       "def source\n  @source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":124,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23source"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attaches source code to a code object with an optional file location",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":357,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "source=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::CodeObjects::Base#source=",
            "scope":                        "instance",
            "signature":                    "def source=(statement)",
            "source":                       "def source=(statement)\n  if statement.respond_to?(:source)\n    self.signature = statement.first_line\n    @source = format_source(statement.source.strip)\n  else\n    @source = format_source(statement.to_s)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":357,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23source%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Language of the source code associated with the object. Defaults to\n+:ruby+.",
            "dynamic":                      true,
            "files":                        [{"file_line":130,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "source_type",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#source_type",
            "scope":                        "instance",
            "signature":                    "def source_type",
            "source":                       "def source_type\n  @source_type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":130,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23source_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Language of the source code associated with the object. Defaults to\n+:ruby+.",
            "dynamic":                      true,
            "files":                        [{"file_line":130,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "source_type=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::Base#source_type=",
            "scope":                        "instance",
            "signature":                    "def source_type=(value)",
            "source":                       "def source_type=(value)\n  @source_type = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":130,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23source_type%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets a tag from the {#docstring}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":500,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "tag",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::CodeObjects::Base#tag",
            "scope":                        "instance",
            "signature":                    "def tag(name) docstring.tag(name) end",
            "source":                       "def tag(name) docstring.tag(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":500,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets a list of tags from the {#docstring}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":504,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "tags",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::CodeObjects::Base#tags",
            "scope":                        "instance",
            "signature":                    "def tags(name = nil) docstring.tags(name) end",
            "source":                       "def tags(name = nil) docstring.tags(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":504,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":306,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "to_ary",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#to_ary",
            "scope":                        "instance",
            "signature":                    "def to_ary; nil end",
            "source":                       "def to_ary; nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":306,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23to_ary"
        },
        {
            "docstring":                    "Represents the unique path of the object. The default implementation\njoins the path of {#namespace} with {#name} via the value of {#sep}.\nCustom code objects should ensure that the path is unique to the code\nobject by either overriding {#sep} or this method.",
            "dynamic":                      true,
            "files":                        [{"file_line":425,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#to_s",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  @path ||= if parent && !parent.root?\n    [parent.path, name.to_s].join(sep)\n  else\n    name.to_s\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":425,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23to_s"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Default type is the lowercase class name without the \"Object\" suffix.\nOverride this method to provide a custom object type",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":405,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  self.class.name.split(/#{NSEPQ}/).last.gsub(/Object$/, '').downcase.to_sym\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":405,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":156,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "visibility",
            "namespace":                    "YARD::CodeObjects::Base",
            "path":                         "YARD::CodeObjects::Base#visibility",
            "scope":                        "instance",
            "signature":                    "def visibility",
            "source":                       "def visibility\n  @visibility\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":156,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23visibility"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":156,"file_path":"lib/yard/code_objects/base.rb"},{"file_line":158,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "visibility=",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::CodeObjects::Base#visibility=",
            "scope":                        "instance",
            "signature":                    "def visibility=(value)",
            "source":                       "def visibility=(value)\n  @visibility = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":156,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"},{"file_line":158,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase%23visibility%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Compares the class with subclasses",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":188,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "===",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Base.===",
            "scope":                        "class",
            "signature":                    "def ===(other)",
            "source":                       "def ===(other)\n  other.is_a?(self)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":188,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase.%3D%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Allocates a new code object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":164,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "new",
            "namespace":                    "YARD::CodeObjects::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::Base.new",
            "scope":                        "class",
            "signature":                    "def new(namespace, name, *args, &block)",
            "source":                       "def new(namespace, name, *args, &block)\n  raise ArgumentError, \"invalid empty object name\" if name.to_s.empty?\n  if namespace.is_a?(ConstantObject)\n    namespace = Proxy.new(namespace.namespace, namespace.value)\n  end\n\n  if name.to_s[0,2] == NSEP\n    name = name.to_s[2..-1]\n    namespace = Registry.root\n  elsif name =~ /(?:#{NSEPQ})([^:]+)$/\n    return new(Proxy.new(namespace, $`), $1, *args, &block)\n  end\n\n  obj = super(namespace, name, *args)\n  existing_obj = Registry.at(obj.path)\n  obj = existing_obj if existing_obj && existing_obj.class == self\n  yield(obj) if block_given?\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":164,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ABase.new"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regular expression to match constant name",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "CONSTANTMATCH",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::CONSTANTMATCH",
            "signature":                    "CONSTANTMATCH = /[A-Z]\\w*/",
            "source":                       "CONSTANTMATCH = /[A-Z]\\w*/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/[A-Z]\\w*/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACONSTANTMATCH"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Class method separator",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "CSEP",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::CSEP",
            "signature":                    "CSEP = '.'",
            "source":                       "CSEP = '.'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'.'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACSEP"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regex-quoted class method separator",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "CSEPQ",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::CSEPQ",
            "signature":                    "CSEPQ = Regexp.quote CSEP",
            "source":                       "CSEPQ = Regexp.quote CSEP",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "Regexp.quote CSEP",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACSEPQ"
        },
        {
            "attributes":                   {"class":{},"instance":{"superclass":{"write":"YARD::CodeObjects::ClassObject#superclass=","read":"YARD::CodeObjects::ClassObject#superclass"}}},
            "children":                     ["YARD::CodeObjects::ClassObject#superclass","YARD::CodeObjects::ClassObject#initialize","YARD::CodeObjects::ClassObject#is_exception?","YARD::CodeObjects::ClassObject#inheritance_tree","YARD::CodeObjects::ClassObject#meths","YARD::CodeObjects::ClassObject#inherited_meths","YARD::CodeObjects::ClassObject#constants","YARD::CodeObjects::ClassObject#inherited_constants","YARD::CodeObjects::ClassObject#superclass="],
            "current_file_has_comments":    true,
            "docstring":                    "A ClassObject represents a Ruby class in source code. It is a {ModuleObject}\nwith extra inheritance semantics through the superclass.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "ClassObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ClassObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::NamespaceObject",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AClassObject%23superclass","YARD%3A%3ACodeObjects%3A%3AClassObject%23initialize","YARD%3A%3ACodeObjects%3A%3AClassObject%23is_exception%3F","YARD%3A%3ACodeObjects%3A%3AClassObject%23inheritance_tree","YARD%3A%3ACodeObjects%3A%3AClassObject%23meths","YARD%3A%3ACodeObjects%3A%3AClassObject%23inherited_meths","YARD%3A%3ACodeObjects%3A%3AClassObject%23constants","YARD%3A%3ACodeObjects%3A%3AClassObject%23inherited_constants","YARD%3A%3ACodeObjects%3A%3AClassObject%23superclass%3D"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ANamespaceObject"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the list of constants matching the options hash.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "constants",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::ClassObject#constants",
            "scope":                        "instance",
            "signature":                    "def constants(opts = {})",
            "source":                       "def constants(opts = {})\n  opts = SymbolHash[:inherited => true].update(opts)\n  super(opts) + (opts[:inherited] ? inherited_constants : [])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23constants"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the inheritance tree of the object including self.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "inheritance_tree",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":"false","parm_name":"include_mods"}],
            "path":                         "YARD::CodeObjects::ClassObject#inheritance_tree",
            "scope":                        "instance",
            "signature":                    "def inheritance_tree(include_mods = false)",
            "source":                       "def inheritance_tree(include_mods = false)\n  list = (include_mods ? mixins(:instance, :class) : [])\n  if superclass.is_a?(Proxy) || superclass.respond_to?(:inheritance_tree)\n    list += [superclass] unless superclass == P(:Object) || superclass == P(:BasicObject)\n  end\n  [self] + list.map do |m|\n    next m if m == self\n    next m unless m.respond_to?(:inheritance_tree)\n    m.inheritance_tree(include_mods)\n  end.flatten.uniq\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23inheritance_tree"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns only the constants that were inherited.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":106,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "inherited_constants",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "path":                         "YARD::CodeObjects::ClassObject#inherited_constants",
            "scope":                        "instance",
            "signature":                    "def inherited_constants",
            "source":                       "def inherited_constants\n  inheritance_tree[1..-1].inject([]) do |list, superclass|\n    if superclass.is_a?(Proxy)\n      list\n    else\n      list += superclass.constants.reject do |o|\n        child(:name => o.name) || list.find {|o2| o2.name == o.name }\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":106,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23inherited_constants"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns only the methods that were inherited.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "inherited_meths",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::ClassObject#inherited_meths",
            "scope":                        "instance",
            "signature":                    "def inherited_meths(opts = {})",
            "source":                       "def inherited_meths(opts = {})\n  inheritance_tree[1..-1].inject([]) do |list, superclass|\n    if superclass.is_a?(Proxy)\n      list\n    else\n      list += superclass.meths(opts).reject do |o|\n        next(false) if opts[:all]\n        child(:name => o.name, :scope => o.scope) ||\n          list.find {|o2| o2.name == o.name && o2.scope == o.scope }\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23inherited_meths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new class object in +namespace+ with +name+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::ClassObject#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(namespace, name, *args, &block)",
            "source":                       "def initialize(namespace, name, *args, &block)\n  super\n\n  if is_exception?\n    self.superclass ||= \"::Exception\" unless P(namespace, name) == P(:Exception)\n  else\n    case P(namespace, name).path\n    when \"BasicObject\"\n      nil\n    when \"Object\"\n      self.superclass ||= \"::BasicObject\"\n    else\n      self.superclass ||= \"::Object\"\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Whether or not the class is a Ruby Exception",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "is_exception?",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "path":                         "YARD::CodeObjects::ClassObject#is_exception?",
            "scope":                        "instance",
            "signature":                    "def is_exception?",
            "source":                       "def is_exception?\n  inheritance_tree.reverse.any? {|o| BUILTIN_EXCEPTIONS_HASH.has_key? o.path }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23is_exception%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the list of methods matching the options hash. Returns\nall methods if hash is empty.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":63,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "meths",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::ClassObject#meths",
            "scope":                        "instance",
            "signature":                    "def meths(opts = {})",
            "source":                       "def meths(opts = {})\n  opts = SymbolHash[:inherited => true].update(opts)\n  list = super(opts)\n  list += inherited_meths(opts).reject do |o|\n    next(false) if opts[:all]\n    list.find {|o2| o2.name == o.name && o2.scope == o.scope }\n  end if opts[:inherited]\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":63,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23meths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The {ClassObject} that this class object inherits from in Ruby source.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "superclass",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "path":                         "YARD::CodeObjects::ClassObject#superclass",
            "scope":                        "instance",
            "signature":                    "def superclass",
            "source":                       "def superclass\n  @superclass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23superclass"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the superclass of the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/code_objects/class_object.rb"}],
            "name":                         "superclass=",
            "namespace":                    "YARD::CodeObjects::ClassObject",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::CodeObjects::ClassObject#superclass=",
            "scope":                        "instance",
            "signature":                    "def superclass=(object)",
            "source":                       "def superclass=(object)\n  case object\n  when Base, Proxy, NilClass\n    @superclass = object\n  when String, Symbol\n    @superclass = Proxy.new(namespace, object)\n  else\n    raise ArgumentError, \"superclass must be CodeObject, Proxy, String or Symbol\"\n  end\n\n  if name == @superclass.name && namespace != YARD::Registry.root && !object.is_a?(Base)\n    @superclass = Proxy.new(namespace.namespace, object)\n  end\n\n  if @superclass == self\n    msg = \"superclass #{@superclass.inspect} cannot be the same as the declared class #{self.inspect}\"\n    @superclass = P(\"::Object\")\n    raise ArgumentError, msg\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassObject%23superclass%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{"value":{"write":"YARD::CodeObjects::ClassVariableObject#value=","read":"YARD::CodeObjects::ClassVariableObject#value"}}},
            "children":                     ["YARD::CodeObjects::ClassVariableObject#value=","YARD::CodeObjects::ClassVariableObject#value"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a class variable inside a namespace. The path is expressed\nin the form \"A::B::@@classvariable\"",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/code_objects/class_variable_object.rb"}],
            "name":                         "ClassVariableObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ClassVariableObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AClassVariableObject%23value%3D","YARD%3A%3ACodeObjects%3A%3AClassVariableObject%23value"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_variable_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassVariableObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/class_variable_object.rb"}],
            "name":                         "value",
            "namespace":                    "YARD::CodeObjects::ClassVariableObject",
            "path":                         "YARD::CodeObjects::ClassVariableObject#value",
            "scope":                        "instance",
            "signature":                    "def value",
            "source":                       "def value\n  @value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_variable_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassVariableObject%23value"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/class_variable_object.rb"}],
            "name":                         "value=",
            "namespace":                    "YARD::CodeObjects::ClassVariableObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ClassVariableObject#value=",
            "scope":                        "instance",
            "signature":                    "def value=(value)",
            "source":                       "def value=(value)\n  @value = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fclass_variable_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AClassVariableObject%23value%3D"
        },
        {
            "aliases":                      {"YARD::CodeObjects::CodeObjectList#<<":"push"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CodeObjects::CodeObjectList#initialize","YARD::CodeObjects::CodeObjectList#push","YARD::CodeObjects::CodeObjectList#<<"],
            "current_file_has_comments":    true,
            "docstring":                    "A list of code objects. This array acts like a set (no unique items)\nbut also disallows any {Proxy} objects from being added.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "CodeObjectList",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::CodeObjectList",
            "source_type":                  "ruby",
            "superclass":                   "Array",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23initialize","YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23push","YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23%3C%3C"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACodeObjectList",
            "y_ld:superclass":              "Array"
        },
        {
            "docstring":                    "Adds a new value to the list",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "<<",
            "namespace":                    "YARD::CodeObjects::CodeObjectList",
            "path":                         "YARD::CodeObjects::CodeObjectList#<<",
            "scope":                        "instance",
            "signature":                    "def push(value)",
            "source":                       "def push(value)\n  value = Proxy.new(@owner, value) if value.is_a?(String) || value.is_a?(Symbol)\n  if value.is_a?(CodeObjects::Base) || value.is_a?(Proxy)\n    super(value) unless include?(value)\n  else\n    raise ArgumentError, \"#{value.class} is not a valid CodeObject\"\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23%3C%3C"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new object list associated with a namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::CodeObjectList",
            "parameters":                   [{"parm_type":"Registry.root","parm_name":"owner"}],
            "path":                         "YARD::CodeObjects::CodeObjectList#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(owner = Registry.root)",
            "source":                       "def initialize(owner = Registry.root)\n  @owner = owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a new value to the list",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "push",
            "namespace":                    "YARD::CodeObjects::CodeObjectList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::CodeObjectList#push",
            "scope":                        "instance",
            "signature":                    "def push(value)",
            "source":                       "def push(value)\n  value = Proxy.new(@owner, value) if value.is_a?(String) || value.is_a?(Symbol)\n  if value.is_a?(CodeObjects::Base) || value.is_a?(Proxy)\n    super(value) unless include?(value)\n  else\n    raise ArgumentError, \"#{value.class} is not a valid CodeObject\"\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ACodeObjectList%23push"
        },
        {
            "attributes":                   {"class":{},"instance":{"value":{"write":"YARD::CodeObjects::ConstantObject#value=","read":"YARD::CodeObjects::ConstantObject#value"}}},
            "children":                     ["YARD::CodeObjects::ConstantObject#value","YARD::CodeObjects::ConstantObject#value="],
            "current_file_has_comments":    true,
            "docstring":                    "A +ConstantObject+ represents a Ruby constant (not a module or class).\nTo access the constant's (source code) value, use {#value}.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/code_objects/constant_object.rb"}],
            "name":                         "ConstantObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ConstantObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AConstantObject%23value","YARD%3A%3ACodeObjects%3A%3AConstantObject%23value%3D"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcode_objects%2Fconstant_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AConstantObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The source code representing the constant's value",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/constant_object.rb"}],
            "name":                         "value",
            "namespace":                    "YARD::CodeObjects::ConstantObject",
            "path":                         "YARD::CodeObjects::ConstantObject#value",
            "scope":                        "instance",
            "signature":                    "def value",
            "source":                       "def value\n  @value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fconstant_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AConstantObject%23value"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/code_objects/constant_object.rb"}],
            "name":                         "value=",
            "namespace":                    "YARD::CodeObjects::ConstantObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ConstantObject#value=",
            "scope":                        "instance",
            "signature":                    "def value=(value)",
            "source":                       "def value=(value)\n  @value = format_source(value)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcode_objects%2Fconstant_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AConstantObject%23value%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CodeObjects::ExtendedMethodObject#scope","YARD::CodeObjects::ExtendedMethodObject#initialize","YARD::CodeObjects::ExtendedMethodObject#method_missing"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents an instance method of a module that was mixed into the class\nscope of another namespace.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/extended_method_object.rb"}],
            "name":                         "ExtendedMethodObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ExtendedMethodObject",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23scope","YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23initialize","YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23method_missing"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fextended_method_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets up a delegate for {MethodObject} obj.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/code_objects/extended_method_object.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::ExtendedMethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"}],
            "path":                         "YARD::CodeObjects::ExtendedMethodObject#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(obj) @del = obj end",
            "source":                       "def initialize(obj) @del = obj end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcode_objects%2Fextended_method_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sends all methods to the {MethodObject} assigned in {#initialize}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/code_objects/extended_method_object.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::CodeObjects::ExtendedMethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"sym"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::ExtendedMethodObject#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(sym, *args, &block) @del.__send__(sym, *args, &block) end",
            "source":                       "def method_missing(sym, *args, &block) @del.__send__(sym, *args, &block) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fcode_objects%2Fextended_method_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23method_missing"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/code_objects/extended_method_object.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::CodeObjects::ExtendedMethodObject",
            "path":                         "YARD::CodeObjects::ExtendedMethodObject#scope",
            "scope":                        "instance",
            "signature":                    "def scope; :class end",
            "source":                       "def scope; :class end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcode_objects%2Fextended_method_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtendedMethodObject%23scope"
        },
        {
            "aliases":                      {"YARD::CodeObjects::ExtraFileObject#to_s":"inspect","YARD::CodeObjects::ExtraFileObject#path":"name","YARD::CodeObjects::ExtraFileObject#eql?":"==","YARD::CodeObjects::ExtraFileObject#equal?":"=="},
            "attributes":                   {"class":{},"instance":{"attributes":{"write":"YARD::CodeObjects::ExtraFileObject#attributes=","read":"YARD::CodeObjects::ExtraFileObject#attributes"},"contents":{"write":"YARD::CodeObjects::ExtraFileObject#contents=","read":"YARD::CodeObjects::ExtraFileObject#contents"},"name":{"write":"YARD::CodeObjects::ExtraFileObject#name=","read":"YARD::CodeObjects::ExtraFileObject#name"},"filename":{"write":"YARD::CodeObjects::ExtraFileObject#filename=","read":"YARD::CodeObjects::ExtraFileObject#filename"}}},
            "children":                     ["YARD::CodeObjects::ExtraFileObject#filename=","YARD::CodeObjects::ExtraFileObject#filename","YARD::CodeObjects::ExtraFileObject#attributes=","YARD::CodeObjects::ExtraFileObject#attributes","YARD::CodeObjects::ExtraFileObject#name=","YARD::CodeObjects::ExtraFileObject#name","YARD::CodeObjects::ExtraFileObject#contents=","YARD::CodeObjects::ExtraFileObject#contents","YARD::CodeObjects::ExtraFileObject#initialize","YARD::CodeObjects::ExtraFileObject#path","YARD::CodeObjects::ExtraFileObject#title","YARD::CodeObjects::ExtraFileObject#inspect","YARD::CodeObjects::ExtraFileObject#to_s","YARD::CodeObjects::ExtraFileObject#type","YARD::CodeObjects::ExtraFileObject#==","YARD::CodeObjects::ExtraFileObject#eql?","YARD::CodeObjects::ExtraFileObject#equal?","YARD::CodeObjects::ExtraFileObject#hash","YARD::CodeObjects::ExtraFileObject#parse_contents"],
            "current_file_has_comments":    true,
            "docstring":                    "An ExtraFileObject represents an extra documentation file (README or other\nfile). It is not strictly a CodeObject (does not inherit from `Base`) although\nit implements `path`, `name` and `type`, and therefore should be structurally\ncompatible with most CodeObject interfaces.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "ExtraFileObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ExtraFileObject",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23filename%3D","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23filename","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23attributes%3D","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23attributes","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23name%3D","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23name","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23contents%3D","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23contents","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23initialize","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23path","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23title","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23inspect","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23to_s","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23type","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23%3D%3D","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23eql%3F","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23equal%3F","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23hash","YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23parse_contents"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#==",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  return false unless self.class === other\n  other.filename == filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23%3D%3D"
        },
        {
            "docstring":                    "Returns the value of attribute attributes",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "attributes",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#attributes",
            "scope":                        "instance",
            "signature":                    "def attributes",
            "source":                       "def attributes\n  @attributes\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23attributes"
        },
        {
            "docstring":                    "Sets the attribute attributes",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "attributes=",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#attributes=",
            "scope":                        "instance",
            "signature":                    "def attributes=(value)",
            "source":                       "def attributes=(value)\n  @attributes = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23attributes%3D"
        },
        {
            "docstring":                    "Returns the value of attribute contents",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "contents",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#contents",
            "scope":                        "instance",
            "signature":                    "def contents",
            "source":                       "def contents\n  @contents\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23contents"
        },
        {
            "docstring":                    "Sets the attribute contents",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "contents=",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#contents=",
            "scope":                        "instance",
            "signature":                    "def contents=(value)",
            "source":                       "def contents=(value)\n  @contents = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23contents%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "eql?",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#eql?",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  return false unless self.class === other\n  other.filename == filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23eql%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "equal?",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#equal?",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  return false unless self.class === other\n  other.filename == filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23equal%3F"
        },
        {
            "docstring":                    "Returns the value of attribute filename",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "filename",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#filename",
            "scope":                        "instance",
            "signature":                    "def filename",
            "source":                       "def filename\n  @filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23filename"
        },
        {
            "docstring":                    "Sets the attribute filename",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "filename=",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#filename=",
            "scope":                        "instance",
            "signature":                    "def filename=(value)",
            "source":                       "def filename=(value)\n  @filename = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23filename%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#hash",
            "scope":                        "instance",
            "signature":                    "def hash; filename.hash end",
            "source":                       "def hash; filename.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new extra file object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":"nil","parm_name":"contents"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(filename, contents = nil)",
            "source":                       "def initialize(filename, contents = nil)\n  self.filename = filename\n  self.name = File.basename(filename).gsub(/\\.[^.]+$/, '')\n  self.attributes = SymbolHash.new(false)\n  parse_contents(contents || File.read(@filename))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  \"#<yardoc #{type} #{filename} attrs=#{attributes.inspect}>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23inspect"
        },
        {
            "docstring":                    "Returns the value of attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23name"
        },
        {
            "docstring":                    "Sets the attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23name%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "parse_contents",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::CodeObjects::ExtraFileObject#parse_contents",
            "scope":                        "instance",
            "signature":                    "def parse_contents(data)",
            "source":                       "def parse_contents(data)\n  retried = false\n  cut_index = 0\n  data = data.split(\"\\n\")\n  data.each_with_index do |line, index|\n    case line\n    when /^#!(\\S+)\\s*$/\n      if index == 0\n        attributes[:markup] = $1\n      else\n        cut_index = index\n        break\n      end\n    when /^\\s*#\\s*@(\\S+)\\s*(.+?)\\s*$/\n      attributes[$1] = $2\n    else\n      cut_index = index\n      break\n    end\n  end\n  data = data[cut_index..-1] if cut_index > 0\n  self.contents = data.join(\"\\n\")\n\n  if contents.respond_to?(:force_encoding) && attributes[:encoding]\n    begin\n      contents.force_encoding(attributes[:encoding])\n    rescue ArgumentError\n      log.warn \"Invalid encoding `#{attributes[:encoding]}' in #{filename}\"\n    end\n  end\nrescue ArgumentError => e\n  if retried && e.message =~ /invalid byte sequence/\n    # This should never happen.\n    log.warn \"Could not read #{filename}, #{e.message}. You probably want to set `--charset`.\"\n    self.contents = ''\n    return\n  end\n  data.force_encoding('binary') if data.respond_to?(:force_encoding)\n  retried = true\n  retry\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23parse_contents"
        },
        {
            "docstring":                    "Returns the value of attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#path",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "title",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#title",
            "scope":                        "instance",
            "signature":                    "def title",
            "source":                       "def title\n  attributes[:title] || name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23title"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#to_s",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  \"#<yardoc #{type} #{filename} attrs=#{attributes.inspect}>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23to_s"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/code_objects/extra_file_object.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::CodeObjects::ExtraFileObject",
            "path":                         "YARD::CodeObjects::ExtraFileObject#type",
            "scope":                        "instance",
            "signature":                    "def type; 'extra_file' end",
            "source":                       "def type; 'extra_file' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fcode_objects%2Fextra_file_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AExtraFileObject%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Instance method separator",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "ISEP",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ISEP",
            "signature":                    "ISEP = '#'",
            "source":                       "ISEP = '#'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'#'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AISEP"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regex-quoted instance method separator",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "ISEPQ",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ISEPQ",
            "signature":                    "ISEPQ = ISEP",
            "source":                       "ISEPQ = ISEP",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "ISEP",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AISEPQ"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regular expression to match a fully qualified method def (self.foo, Class.foo).",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "METHODMATCH",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::METHODMATCH",
            "signature":                    "METHODMATCH = /(?:(?:#{NAMESPACEMATCH}|[a-z]\\w*)\\s*(?:#{CSEPQ}|#{NSEPQ})\\s*)?#{METHODNAMEMATCH}/",
            "source":                       "METHODMATCH = /(?:(?:#{NAMESPACEMATCH}|[a-z]\\w*)\\s*(?:#{CSEPQ}|#{NSEPQ})\\s*)?#{METHODNAMEMATCH}/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/(?:(?:#{NAMESPACEMATCH}|[a-z]\\w*)\\s*(?:#{CSEPQ}|#{NSEPQ})\\s*)?#{METHODNAMEMATCH}/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMETHODMATCH"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regular expression to match a method name",
            "dynamic":                      true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "METHODNAMEMATCH",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::METHODNAMEMATCH",
            "signature":                    "METHODNAMEMATCH = /[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-\\/+%^&*~`|]|\\[\\]=?/",
            "source":                       "METHODNAMEMATCH = /[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-\\/+%^&*~`|]|\\[\\]=?/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-\\/+%^&*~`|]|\\[\\]=?/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMETHODNAMEMATCH"
        },
        {
            "aliases":                      {"YARD::CodeObjects::MacroObject.create_docstring":"find_or_create"},
            "attributes":                   {"class":{},"instance":{"method_object":{"write":"YARD::CodeObjects::MacroObject#method_object=","read":"YARD::CodeObjects::MacroObject#method_object"},"macro_data":{"write":"YARD::CodeObjects::MacroObject#macro_data=","read":"YARD::CodeObjects::MacroObject#macro_data"}}},
            "children":                     ["YARD::CodeObjects::MacroObject::MACRO_MATCH","YARD::CodeObjects::MacroObject.create","YARD::CodeObjects::MacroObject.find","YARD::CodeObjects::MacroObject.find_or_create","YARD::CodeObjects::MacroObject.create_docstring","YARD::CodeObjects::MacroObject.expand","YARD::CodeObjects::MacroObject.apply","YARD::CodeObjects::MacroObject.apply_macro","YARD::CodeObjects::MacroObject#macro_data=","YARD::CodeObjects::MacroObject#macro_data","YARD::CodeObjects::MacroObject#method_object=","YARD::CodeObjects::MacroObject#method_object","YARD::CodeObjects::MacroObject#attached?","YARD::CodeObjects::MacroObject#path","YARD::CodeObjects::MacroObject#sep","YARD::CodeObjects::MacroObject#expand"],
            "current_file_has_comments":    true,
            "docstring":                    "A MacroObject represents a docstring defined through +@!macro NAME+ and can be\nreused by specifying the tag +@!macro NAME+. You can also provide the\n+attached+ type flag to the macro definition to have it attached to the\nspecific DSL method so it will be implicitly reused.\n\nMacros are fully described in the {file:docs/Tags.md#macro Tags Overview}\ndocument.",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "MacroObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::MacroObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AMacroObject%3A%3AMACRO_MATCH","YARD%3A%3ACodeObjects%3A%3AMacroObject.create","YARD%3A%3ACodeObjects%3A%3AMacroObject.find","YARD%3A%3ACodeObjects%3A%3AMacroObject.find_or_create","YARD%3A%3ACodeObjects%3A%3AMacroObject.create_docstring","YARD%3A%3ACodeObjects%3A%3AMacroObject.expand","YARD%3A%3ACodeObjects%3A%3AMacroObject.apply","YARD%3A%3ACodeObjects%3A%3AMacroObject.apply_macro","YARD%3A%3ACodeObjects%3A%3AMacroObject%23macro_data%3D","YARD%3A%3ACodeObjects%3A%3AMacroObject%23macro_data","YARD%3A%3ACodeObjects%3A%3AMacroObject%23method_object%3D","YARD%3A%3ACodeObjects%3A%3AMacroObject%23method_object","YARD%3A%3ACodeObjects%3A%3AMacroObject%23attached%3F","YARD%3A%3ACodeObjects%3A%3AMacroObject%23path","YARD%3A%3ACodeObjects%3A%3AMacroObject%23sep","YARD%3A%3ACodeObjects%3A%3AMacroObject%23expand"],
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "attached?",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject#attached?",
            "scope":                        "instance",
            "signature":                    "def attached?; method_object ? true : false end",
            "source":                       "def attached?; method_object ? true : false end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23attached%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Expands the macro using",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":167,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "expand",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":"[]","parm_name":"call_params"},{"parm_type":"''","parm_name":"full_source"},{"parm_type":"''","parm_name":"block_source"}],
            "path":                         "YARD::CodeObjects::MacroObject#expand",
            "scope":                        "instance",
            "signature":                    "def expand(call_params = [], full_source = '', block_source = '')",
            "source":                       "def expand(call_params = [], full_source = '', block_source = '')\n  self.class.expand(macro_data, call_params, full_source, block_source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":167,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23expand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":142,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "macro_data",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject#macro_data",
            "scope":                        "instance",
            "signature":                    "def macro_data",
            "source":                       "def macro_data\n  @macro_data\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":142,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23macro_data"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":142,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "macro_data=",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::MacroObject#macro_data=",
            "scope":                        "instance",
            "signature":                    "def macro_data=(value)",
            "source":                       "def macro_data=(value)\n  @macro_data = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":142,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23macro_data%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":146,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "method_object",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject#method_object",
            "scope":                        "instance",
            "signature":                    "def method_object",
            "source":                       "def method_object\n  @method_object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":146,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23method_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":146,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "method_object=",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::MacroObject#method_object=",
            "scope":                        "instance",
            "signature":                    "def method_object=(value)",
            "source":                       "def method_object=(value)\n  @method_object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":146,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23method_object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Overrides {Base#path} so the macro path is \".macro.MACRONAME\"",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject#path",
            "scope":                        "instance",
            "signature":                    "def path; '.macro.' + name.to_s end",
            "source":                       "def path; '.macro.' + name.to_s end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Overrides the separator to be '.'",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":155,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "sep",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject#sep",
            "scope":                        "instance",
            "signature":                    "def sep; '.' end",
            "source":                       "def sep; '.' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":155,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%23sep"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Applies a macro on a docstring by creating any macro data inside of\nthe docstring first. Equivalent to calling {find_or_create} and {apply_macro}\non the new macro object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "apply",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"docstring"},{"parm_type":"[]","parm_name":"call_params"},{"parm_type":"''","parm_name":"full_source"},{"parm_type":"''","parm_name":"block_source"},{"parm_type":"nil","parm_name":"method_object"}],
            "path":                         "YARD::CodeObjects::MacroObject.apply",
            "scope":                        "class",
            "signature":                    "def apply(docstring, call_params = [], full_source = '', block_source = '', method_object = nil)",
            "source":                       "def apply(docstring, call_params = [], full_source = '', block_source = '', method_object = nil)\n  docstring = docstring.all if Docstring === docstring\n  parser = Docstring.parser\n  handler = OpenStruct.new\n  handler.call_params = call_params[1..-1]\n  handler.caller_method = call_params.first\n  handler.statement = OpenStruct.new(:source => full_source)\n  parser.parse(docstring, nil, handler).to_docstring.to_raw\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.apply"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Applies a macro to a docstring, interpolating the macro's data on the\ndocstring and appending any extra local docstring data that was in\nthe original +docstring+ object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":136,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "apply_macro",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"macro"},{"parm_type":null,"parm_name":"docstring"},{"parm_type":"[]","parm_name":"call_params"},{"parm_type":"''","parm_name":"full_source"},{"parm_type":"''","parm_name":"block_source"}],
            "path":                         "YARD::CodeObjects::MacroObject.apply_macro",
            "scope":                        "class",
            "signature":                    "def apply_macro(macro, docstring, call_params = [], full_source = '', block_source = '')",
            "source":                       "def apply_macro(macro, docstring, call_params = [], full_source = '', block_source = '')\n  apply(docstring, call_params, full_source, block_source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":136,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.apply_macro"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new macro and fills in the relevant properties.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "create",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"macro_name"},{"parm_type":null,"parm_name":"data"},{"parm_type":"nil","parm_name":"method_object"}],
            "path":                         "YARD::CodeObjects::MacroObject.create",
            "scope":                        "class",
            "signature":                    "def create(macro_name, data, method_object = nil)",
            "source":                       "def create(macro_name, data, method_object = nil)\n  obj = new(:root, macro_name)\n  obj.macro_data = data\n  obj.method_object = method_object\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.create"
        },
        {
            "docstring":                    "Parses a given docstring and determines if the macro is \"new\" or\nnot. If the macro has $variable names or if it has a @!macro tag\nwith the [new] or [attached] flag, it is considered new.\n\nIf a new macro is found, the macro is created and registered. Otherwise\nthe macro name is searched and returned. If a macro is not found,\nnil is returned.",
            "dynamic":                      true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "create_docstring",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject.create_docstring",
            "scope":                        "class",
            "signature":                    "def find_or_create(macro_name, data, method_object = nil)",
            "source":                       "def find_or_create(macro_name, data, method_object = nil)\n  if macro = find(name)\n    macro\n  else\n    create(macro_name, data, method_object)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.create_docstring"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Expands +macro_data+ using the interpolation parameters.\n\nInterpolation rules:\n* $0, $1, $2, ... = the Nth parameter in +call_params+\n* $* = the full statement source (excluding block)\n* Also supports $!{N-M} ranges, as well as negative indexes on N or M\n* Use \\$ to escape the variable name in a macro.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":96,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "expand",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"macro_data"},{"parm_type":"[]","parm_name":"call_params"},{"parm_type":"''","parm_name":"full_source"},{"parm_type":"''","parm_name":"block_source"}],
            "path":                         "YARD::CodeObjects::MacroObject.expand",
            "scope":                        "class",
            "signature":                    "def expand(macro_data, call_params = [], full_source = '', block_source = '')",
            "source":                       "def expand(macro_data, call_params = [], full_source = '', block_source = '')\n  macro_data = macro_data.all if macro_data.is_a?(Docstring)\n  macro_data.gsub(MACRO_MATCH) do\n    escape, first, last, rng = $1, $2 || $5, $4, $3 ? true : false\n    next $&[1..-1] if escape\n    if first == '*'\n      last ? $& : full_source\n    else\n      first_i = first.to_i\n      last_i = (last ? last.to_i : call_params.size)\n      last_i = first_i unless rng\n      params = call_params[first_i..last_i]\n      params ? params.join(\", \") : ''\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":96,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.expand"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Finds a macro using +macro_name+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "find",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"macro_name"}],
            "path":                         "YARD::CodeObjects::MacroObject.find",
            "scope":                        "class",
            "signature":                    "def find(macro_name)",
            "source":                       "def find(macro_name)\n  Registry.at('.macro.' + macro_name.to_s)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.find"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a given docstring and determines if the macro is \"new\" or\nnot. If the macro has $variable names or if it has a @!macro tag\nwith the [new] or [attached] flag, it is considered new.\n\nIf a new macro is found, the macro is created and registered. Otherwise\nthe macro name is searched and returned. If a macro is not found,\nnil is returned.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "find_or_create",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "parameters":                   [{"parm_type":null,"parm_name":"macro_name"},{"parm_type":null,"parm_name":"data"},{"parm_type":"nil","parm_name":"method_object"}],
            "path":                         "YARD::CodeObjects::MacroObject.find_or_create",
            "scope":                        "class",
            "signature":                    "def find_or_create(macro_name, data, method_object = nil)",
            "source":                       "def find_or_create(macro_name, data, method_object = nil)\n  if macro = find(name)\n    macro\n  else\n    create(macro_name, data, method_object)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject.find_or_create"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/code_objects/macro_object.rb"}],
            "name":                         "MACRO_MATCH",
            "namespace":                    "YARD::CodeObjects::MacroObject",
            "path":                         "YARD::CodeObjects::MacroObject::MACRO_MATCH",
            "signature":                    "MACRO_MATCH = /(\\\\)?\\$(?:\\{(-?\\d+|\\*)(-)?(-?\\d+)?\\}|(-?\\d+|\\*))/",
            "source":                       "MACRO_MATCH = /(\\\\)?\\$(?:\\{(-?\\d+|\\*)(-)?(-?\\d+)?\\}|(-?\\d+|\\*))/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/(\\\\)?\\$(?:\\{(-?\\d+|\\*)(-)?(-?\\d+)?\\}|(-?\\d+|\\*))/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fcode_objects%2Fmacro_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMacroObject%3A%3AMACRO_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{"explicit":{"write":"YARD::CodeObjects::MethodObject#explicit=","read":"YARD::CodeObjects::MethodObject#explicit"},"scope":{"write":"YARD::CodeObjects::MethodObject#scope=","read":"YARD::CodeObjects::MethodObject#scope"},"parameters":{"write":"YARD::CodeObjects::MethodObject#parameters=","read":"YARD::CodeObjects::MethodObject#parameters"}}},
            "children":                     ["YARD::CodeObjects::MethodObject#scope","YARD::CodeObjects::MethodObject#explicit=","YARD::CodeObjects::MethodObject#explicit","YARD::CodeObjects::MethodObject#parameters=","YARD::CodeObjects::MethodObject#parameters","YARD::CodeObjects::MethodObject#initialize","YARD::CodeObjects::MethodObject#scope=","YARD::CodeObjects::MethodObject#constructor?","YARD::CodeObjects::MethodObject#module_function?","YARD::CodeObjects::MethodObject#attr_info","YARD::CodeObjects::MethodObject#writer?","YARD::CodeObjects::MethodObject#reader?","YARD::CodeObjects::MethodObject#is_attribute?","YARD::CodeObjects::MethodObject#is_alias?","YARD::CodeObjects::MethodObject#is_explicit?","YARD::CodeObjects::MethodObject#overridden_method","YARD::CodeObjects::MethodObject#aliases","YARD::CodeObjects::MethodObject#path","YARD::CodeObjects::MethodObject#name","YARD::CodeObjects::MethodObject#sep","YARD::CodeObjects::MethodObject#copyable_attributes"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a Ruby method in source",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "MethodObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::MethodObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AMethodObject%23scope","YARD%3A%3ACodeObjects%3A%3AMethodObject%23explicit%3D","YARD%3A%3ACodeObjects%3A%3AMethodObject%23explicit","YARD%3A%3ACodeObjects%3A%3AMethodObject%23parameters%3D","YARD%3A%3ACodeObjects%3A%3AMethodObject%23parameters","YARD%3A%3ACodeObjects%3A%3AMethodObject%23initialize","YARD%3A%3ACodeObjects%3A%3AMethodObject%23scope%3D","YARD%3A%3ACodeObjects%3A%3AMethodObject%23constructor%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23module_function%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23attr_info","YARD%3A%3ACodeObjects%3A%3AMethodObject%23writer%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23reader%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_attribute%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_alias%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_explicit%3F","YARD%3A%3ACodeObjects%3A%3AMethodObject%23overridden_method","YARD%3A%3ACodeObjects%3A%3AMethodObject%23aliases","YARD%3A%3ACodeObjects%3A%3AMethodObject%23path","YARD%3A%3ACodeObjects%3A%3AMethodObject%23name","YARD%3A%3ACodeObjects%3A%3AMethodObject%23sep","YARD%3A%3ACodeObjects%3A%3AMethodObject%23copyable_attributes"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns all alias names of the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":140,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "aliases",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#aliases",
            "scope":                        "instance",
            "signature":                    "def aliases",
            "source":                       "def aliases\n  list = []\n  return list unless namespace.is_a?(NamespaceObject)\n  namespace.aliases.each do |o, aname|\n    list << o if aname == name && o.scope == scope\n  end\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":140,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23aliases"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the read/writer info for the attribute if it is one",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":91,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "attr_info",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#attr_info",
            "scope":                        "instance",
            "signature":                    "def attr_info",
            "source":                       "def attr_info\n  return nil unless namespace.is_a?(NamespaceObject)\n  namespace.attributes[scope][name.to_s.gsub(/=$/, '')]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":91,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23attr_info"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "constructor?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#constructor?",
            "scope":                        "instance",
            "signature":                    "def constructor?",
            "source":                       "def constructor?\n  name == :initialize && scope == :instance && namespace.is_a?(ClassObject)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23constructor%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":187,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "copyable_attributes",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#copyable_attributes",
            "scope":                        "instance",
            "signature":                    "def copyable_attributes",
            "source":                       "def copyable_attributes\n  super - %w(scope module_function)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":187,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23copyable_attributes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Whether the object is explicitly defined in source or whether it was\ninferred by a handler. For instance, attribute methods are generally\ninferred and therefore not explicitly defined in source.",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "explicit",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#explicit",
            "scope":                        "instance",
            "signature":                    "def explicit",
            "source":                       "def explicit\n  @explicit\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23explicit"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Whether the object is explicitly defined in source or whether it was\ninferred by a handler. For instance, attribute methods are generally\ninferred and therefore not explicitly defined in source.",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "explicit=",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::MethodObject#explicit=",
            "scope":                        "instance",
            "signature":                    "def explicit=(value)",
            "source":                       "def explicit=(value)\n  @explicit = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23explicit%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new method object in +namespace+ with +name+ and an instance\nor class +scope+\n\nIf scope is +:module+, this object is instantiated as a public\nmethod in +:class+ scope, but also creates a new (empty) method\nas a private +:instance+ method on the same class or module.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":":instance","parm_name":"scope"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::MethodObject#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(namespace, name, scope = :instance, &block)",
            "source":                       "def initialize(namespace, name, scope = :instance, &block)\n  @module_function = false\n  @scope = nil\n\n  # handle module function\n  if scope == :module\n    other = self.class.new(namespace, name, &block)\n    other.visibility = :private\n    scope = :class\n    @module_function = true\n  end\n\n  @visibility = :public\n  self.scope = scope\n  self.parameters = []\n\n  super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if the object is defined as an alias of another method",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":117,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "is_alias?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#is_alias?",
            "scope":                        "instance",
            "signature":                    "def is_alias?",
            "source":                       "def is_alias?\n  return false unless namespace.is_a?(NamespaceObject)\n  namespace.aliases.has_key? self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":117,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_alias%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if the object is defined as an attribute in the namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":110,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "is_attribute?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#is_attribute?",
            "scope":                        "instance",
            "signature":                    "def is_attribute?",
            "source":                       "def is_attribute?\n  return false unless info = attr_info\n  info[name.to_s =~ /=$/ ? :write : :read] ? true : false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":110,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_attribute%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests boolean {#explicit} value.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":125,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "is_explicit?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#is_explicit?",
            "scope":                        "instance",
            "signature":                    "def is_explicit?",
            "source":                       "def is_explicit?\n  explicit ? true : false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":125,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23is_explicit%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":83,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "module_function?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#module_function?",
            "scope":                        "instance",
            "signature":                    "def module_function?",
            "source":                       "def module_function?\n  @module_function\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":83,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23module_function%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the name of the object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":170,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "parameters":                   [{"parm_type":"false","parm_name":"prefix"}],
            "path":                         "YARD::CodeObjects::MethodObject#name",
            "scope":                        "instance",
            "signature":                    "def name(prefix = false)",
            "source":                       "def name(prefix = false)\n  prefix ? (sep == ISEP ? \"#{sep}#{super}\" : super.to_s) : super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":170,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":132,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "overridden_method",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#overridden_method",
            "scope":                        "instance",
            "signature":                    "def overridden_method",
            "source":                       "def overridden_method\n  return nil if namespace.is_a?(Proxy)\n  meths = namespace.meths(:all => true)\n  meths.find {|m| m.path != path && m.name == name && m.scope == scope }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":132,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23overridden_method"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the list of parameters parsed out of the method signature\nwith their default values.",
            "dynamic":                      true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "parameters",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#parameters",
            "scope":                        "instance",
            "signature":                    "def parameters",
            "source":                       "def parameters\n  @parameters\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23parameters"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the list of parameters parsed out of the method signature\nwith their default values.",
            "dynamic":                      true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "parameters=",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::MethodObject#parameters=",
            "scope":                        "instance",
            "signature":                    "def parameters=(value)",
            "source":                       "def parameters=(value)\n  @parameters = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23parameters%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Override path handling for instance methods in the root namespace\n(they should still have a separator as a prefix).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  @path ||= if !namespace || namespace.path == \"\"\n    sep + super\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":104,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "reader?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#reader?",
            "scope":                        "instance",
            "signature":                    "def reader?",
            "source":                       "def reader?\n  !!((info = attr_info) && info[:read] == self)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":104,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23reader%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The scope of the method (+:class+ or +:instance+)",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#scope",
            "scope":                        "instance",
            "signature":                    "def scope",
            "source":                       "def scope\n  @scope\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23scope"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Changes the scope of an object from :instance or :class",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "scope=",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::CodeObjects::MethodObject#scope=",
            "scope":                        "instance",
            "signature":                    "def scope=(v)",
            "source":                       "def scope=(v)\n  reregister = @scope ? true : false\n\n  # handle module function\n  if v == :module\n    other = self.class.new(namespace, name)\n    other.visibility = :private\n    @visibility = :public\n    @module_function = true\n    @path = nil\n  end\n\n  YARD::Registry.delete(self)\n  @path = nil\n  @scope = v.to_sym\n  if @scope == :module\n    @scope = :class\n  end\n  YARD::Registry.register(self) if reregister\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23scope%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Override separator to differentiate between class and instance\nmethods.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":177,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "sep",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#sep",
            "scope":                        "instance",
            "signature":                    "def sep",
            "source":                       "def sep\n  if scope == :class\n    namespace && namespace != YARD::Registry.root ? CSEP : NSEP\n  else\n    ISEP\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":177,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23sep"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/code_objects/method_object.rb"}],
            "name":                         "writer?",
            "namespace":                    "YARD::CodeObjects::MethodObject",
            "path":                         "YARD::CodeObjects::MethodObject#writer?",
            "scope":                        "instance",
            "signature":                    "def writer?",
            "source":                       "def writer?\n  !!((info = attr_info) && info[:write] == self)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fcode_objects%2Fmethod_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AMethodObject%23writer%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CodeObjects::ModuleObject#inheritance_tree"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a Ruby module.",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/code_objects/module_object.rb"}],
            "name":                         "ModuleObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ModuleObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::NamespaceObject",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AModuleObject%23inheritance_tree"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fcode_objects%2Fmodule_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AModuleObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ANamespaceObject"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the inheritance tree of mixins.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/code_objects/module_object.rb"}],
            "name":                         "inheritance_tree",
            "namespace":                    "YARD::CodeObjects::ModuleObject",
            "parameters":                   [{"parm_type":"false","parm_name":"include_mods"}],
            "path":                         "YARD::CodeObjects::ModuleObject#inheritance_tree",
            "scope":                        "instance",
            "signature":                    "def inheritance_tree(include_mods = false)",
            "source":                       "def inheritance_tree(include_mods = false)\n  return [self] unless include_mods\n  [self] + mixins(:instance, :class).map do |m|\n    next if m == self\n    next m unless m.respond_to?(:inheritance_tree)\n    m.inheritance_tree(true)\n  end.compact.flatten.uniq\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcode_objects%2Fmodule_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AModuleObject%23inheritance_tree"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regular expression to match namespaces (const A or complex path A::B)",
            "dynamic":                      true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "NAMESPACEMATCH",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::NAMESPACEMATCH",
            "signature":                    "NAMESPACEMATCH = /(?:(?:#{NSEPQ})?#{CONSTANTMATCH})+/",
            "source":                       "NAMESPACEMATCH = /(?:(?:#{NSEPQ})?#{CONSTANTMATCH})+/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/(?:(?:#{NSEPQ})?#{CONSTANTMATCH})+/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANAMESPACEMATCH"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Namespace separator",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "NSEP",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::NSEP",
            "signature":                    "NSEP = '::'",
            "source":                       "NSEP = '::'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'::'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANSEP"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Regex-quoted namespace separator",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/code_objects/base.rb"}],
            "name":                         "NSEPQ",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::NSEPQ",
            "signature":                    "NSEPQ = NSEP",
            "source":                       "NSEPQ = NSEP",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "NSEP",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fcode_objects%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANSEPQ"
        },
        {
            "attributes":                   {"class":{},"instance":{"instance_mixins":{"write":null,"read":"YARD::CodeObjects::NamespaceObject#instance_mixins"},"groups":{"write":"YARD::CodeObjects::NamespaceObject#groups=","read":"YARD::CodeObjects::NamespaceObject#groups"},"instance_attributes":{"write":"YARD::CodeObjects::NamespaceObject#instance_attributes=","read":"YARD::CodeObjects::NamespaceObject#instance_attributes"},"attributes":{"write":null,"read":"YARD::CodeObjects::NamespaceObject#attributes"},"included_constants":{"write":"YARD::CodeObjects::NamespaceObject#included_constants=","read":"YARD::CodeObjects::NamespaceObject#included_constants"},"mixins":{"write":"YARD::CodeObjects::NamespaceObject#mixins=","read":"YARD::CodeObjects::NamespaceObject#mixins"},"children":{"write":null,"read":"YARD::CodeObjects::NamespaceObject#children"},"included_meths":{"write":"YARD::CodeObjects::NamespaceObject#included_meths=","read":"YARD::CodeObjects::NamespaceObject#included_meths"},"cvars":{"write":"YARD::CodeObjects::NamespaceObject#cvars=","read":"YARD::CodeObjects::NamespaceObject#cvars"},"child":{"write":"YARD::CodeObjects::NamespaceObject#child=","read":"YARD::CodeObjects::NamespaceObject#child"},"aliases":{"write":null,"read":"YARD::CodeObjects::NamespaceObject#aliases"},"meths":{"write":"YARD::CodeObjects::NamespaceObject#meths=","read":"YARD::CodeObjects::NamespaceObject#meths"},"constants":{"write":"YARD::CodeObjects::NamespaceObject#constants=","read":"YARD::CodeObjects::NamespaceObject#constants"},"class_mixins":{"write":null,"read":"YARD::CodeObjects::NamespaceObject#class_mixins"},"class_attributes":{"write":"YARD::CodeObjects::NamespaceObject#class_attributes=","read":"YARD::CodeObjects::NamespaceObject#class_attributes"}}},
            "children":                     ["YARD::CodeObjects::NamespaceObject#constants=","YARD::CodeObjects::NamespaceObject#cvars=","YARD::CodeObjects::NamespaceObject#mixins=","YARD::CodeObjects::NamespaceObject#child=","YARD::CodeObjects::NamespaceObject#meths=","YARD::CodeObjects::NamespaceObject#class_attributes=","YARD::CodeObjects::NamespaceObject#instance_attributes=","YARD::CodeObjects::NamespaceObject#included_constants=","YARD::CodeObjects::NamespaceObject#included_meths=","YARD::CodeObjects::NamespaceObject#groups=","YARD::CodeObjects::NamespaceObject#groups","YARD::CodeObjects::NamespaceObject#children","YARD::CodeObjects::NamespaceObject#attributes","YARD::CodeObjects::NamespaceObject#aliases","YARD::CodeObjects::NamespaceObject#class_mixins","YARD::CodeObjects::NamespaceObject#instance_mixins","YARD::CodeObjects::NamespaceObject#initialize","YARD::CodeObjects::NamespaceObject#class_attributes","YARD::CodeObjects::NamespaceObject#instance_attributes","YARD::CodeObjects::NamespaceObject#child","YARD::CodeObjects::NamespaceObject#meths","YARD::CodeObjects::NamespaceObject#included_meths","YARD::CodeObjects::NamespaceObject#constants","YARD::CodeObjects::NamespaceObject#included_constants","YARD::CodeObjects::NamespaceObject#cvars","YARD::CodeObjects::NamespaceObject#mixins"],
            "current_file_has_comments":    true,
            "docstring":                    "A \"namespace\" is any object that can store other objects within itself.\nThe two main Ruby objects that can act as namespaces are modules\n({ModuleObject}) and classes ({ClassObject}).",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "NamespaceObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::NamespaceObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23constants%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23cvars%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23mixins%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23child%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23meths%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_attributes%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_attributes%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_constants%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_meths%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23groups%3D","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23groups","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23children","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23attributes","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23aliases","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_mixins","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_mixins","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23initialize","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_attributes","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_attributes","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23child","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23meths","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_meths","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23constants","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_constants","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23cvars","YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23mixins"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "A hash containing two keys, :class and :instance, each containing\na hash of objects and their alias names.",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "aliases",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#aliases",
            "scope":                        "instance",
            "signature":                    "def aliases",
            "source":                       "def aliases\n  @aliases\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23aliases"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "A hash containing two keys, class and instance, each containing\nthe attribute name with a { :read, :write } hash for the read and\nwrite objects respectively.",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "attributes",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#attributes",
            "scope":                        "instance",
            "signature":                    "def attributes",
            "source":                       "def attributes\n  @attributes\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23attributes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Looks for a child that matches the attributes specified by +opts+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":86,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "child",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#child",
            "scope":                        "instance",
            "signature":                    "def child(opts = {})",
            "source":                       "def child(opts = {})\n  if !opts.is_a?(Hash)\n    children.find {|o| o.name == opts.to_sym }\n  else\n    opts = SymbolHash[opts]\n    children.find do |obj|\n      opts.each do |meth, value|\n        break false if !(value.is_a?(Array) ? value.include?(obj[meth]) : obj[meth] == value)\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":86,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23child"
        },
        {
            "docstring":                    "Sets the attribute child",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "child=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#child=",
            "scope":                        "instance",
            "signature":                    "def child=(value)",
            "source":                       "def child=(value)\n  @child = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23child%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The list of objects defined in this namespace",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "children",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#children",
            "scope":                        "instance",
            "signature":                    "def children",
            "source":                       "def children\n  @children\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23children"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Only the class attributes",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "class_attributes",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#class_attributes",
            "scope":                        "instance",
            "signature":                    "def class_attributes",
            "source":                       "def class_attributes\n  attributes[:class]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_attributes"
        },
        {
            "docstring":                    "Sets the attribute class_attributes",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "class_attributes=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#class_attributes=",
            "scope":                        "instance",
            "signature":                    "def class_attributes=(value)",
            "source":                       "def class_attributes=(value)\n  @class_attributes = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_attributes%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Class mixins",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "class_mixins",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#class_mixins",
            "scope":                        "instance",
            "signature":                    "def class_mixins",
            "source":                       "def class_mixins\n  @class_mixins\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23class_mixins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns all constants in the namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":164,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "constants",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#constants",
            "scope":                        "instance",
            "signature":                    "def constants(opts = {})",
            "source":                       "def constants(opts = {})\n  opts = SymbolHash[:included => true].update(opts)\n  consts = children.select {|o| o.is_a? ConstantObject }\n  consts + (opts[:included] ? included_constants : [])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":164,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23constants"
        },
        {
            "docstring":                    "Sets the attribute constants",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "constants=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#constants=",
            "scope":                        "instance",
            "signature":                    "def constants=(value)",
            "source":                       "def constants=(value)\n  @constants = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23constants%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns class variables defined in this namespace.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":186,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "cvars",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#cvars",
            "scope":                        "instance",
            "signature":                    "def cvars",
            "source":                       "def cvars\n  children.select {|o| o.is_a? ClassVariableObject }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":186,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23cvars"
        },
        {
            "docstring":                    "Sets the attribute cvars",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "cvars=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#cvars=",
            "scope":                        "instance",
            "signature":                    "def cvars=(value)",
            "source":                       "def cvars=(value)\n  @cvars = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23cvars%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "groups",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#groups",
            "scope":                        "instance",
            "signature":                    "def groups",
            "source":                       "def groups\n  @groups\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23groups"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "groups=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#groups=",
            "scope":                        "instance",
            "signature":                    "def groups=(value)",
            "source":                       "def groups=(value)\n  @groups = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23groups%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns constants included from any mixins",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":172,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "included_constants",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#included_constants",
            "scope":                        "instance",
            "signature":                    "def included_constants",
            "source":                       "def included_constants\n  instance_mixins.inject([]) do |list, mixin|\n    if mixin.respond_to? :constants\n      list += mixin.constants.reject do |o|\n        child(:name => o.name) || list.find {|o2| o2.name == o.name }\n      end\n    else\n      list\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":172,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_constants"
        },
        {
            "docstring":                    "Sets the attribute included_constants",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "included_constants=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#included_constants=",
            "scope":                        "instance",
            "signature":                    "def included_constants=(value)",
            "source":                       "def included_constants=(value)\n  @included_constants = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_constants%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns methods included from any mixins that match the attributes\nspecified by +opts+. If no options are specified, returns all included\nmethods.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":144,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "included_meths",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#included_meths",
            "scope":                        "instance",
            "signature":                    "def included_meths(opts = {})",
            "source":                       "def included_meths(opts = {})\n  opts = SymbolHash[:scope => [:instance, :class]].update(opts)\n  [opts[:scope]].flatten.map do |scope|\n    mixins(scope).inject([]) do |list, mixin|\n      next list if mixin.is_a?(Proxy)\n      arr = mixin.meths(opts.merge(:scope => :instance)).reject do |o|\n        next false if opts[:all]\n        child(:name => o.name, :scope => scope) || list.find {|o2| o2.name == o.name }\n      end\n      arr.map! {|o| ExtendedMethodObject.new(o) } if scope == :class\n      list + arr\n    end\n  end.flatten\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":144,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_meths"
        },
        {
            "docstring":                    "Sets the attribute included_meths",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "included_meths=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#included_meths=",
            "scope":                        "instance",
            "signature":                    "def included_meths=(value)",
            "source":                       "def included_meths=(value)\n  @included_meths = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23included_meths%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new namespace object inside +namespace+ with +name+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(namespace, name, *args, &block)",
            "source":                       "def initialize(namespace, name, *args, &block)\n  @children = CodeObjectList.new(self)\n  @class_mixins = CodeObjectList.new(self)\n  @instance_mixins = CodeObjectList.new(self)\n  @attributes = SymbolHash[:class => SymbolHash.new, :instance => SymbolHash.new]\n  @aliases = {}\n  @groups = []\n  super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Only the instance attributes",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "instance_attributes",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#instance_attributes",
            "scope":                        "instance",
            "signature":                    "def instance_attributes",
            "source":                       "def instance_attributes\n  attributes[:instance]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_attributes"
        },
        {
            "docstring":                    "Sets the attribute instance_attributes",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "instance_attributes=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#instance_attributes=",
            "scope":                        "instance",
            "signature":                    "def instance_attributes=(value)",
            "source":                       "def instance_attributes=(value)\n  @instance_attributes = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_attributes%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Instance mixins",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "instance_mixins",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "path":                         "YARD::CodeObjects::NamespaceObject#instance_mixins",
            "scope":                        "instance",
            "signature":                    "def instance_mixins",
            "source":                       "def instance_mixins\n  @instance_mixins\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23instance_mixins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns all methods that match the attributes specified by +opts+. If\nno options are provided, returns all methods.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":113,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "meths",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#meths",
            "scope":                        "instance",
            "signature":                    "def meths(opts = {})",
            "source":                       "def meths(opts = {})\n  opts = SymbolHash[\n    :visibility => [:public, :private, :protected],\n    :scope => [:class, :instance],\n    :included => true\n  ].update(opts)\n\n  opts[:visibility] = [opts[:visibility]].flatten\n  opts[:scope] = [opts[:scope]].flatten\n\n  ourmeths = children.select do |o|\n    o.is_a?(MethodObject) &&\n      opts[:visibility].include?(o.visibility) &&\n      opts[:scope].include?(o.scope)\n  end\n\n  ourmeths + (opts[:included] ? included_meths(opts) : [])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":113,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23meths"
        },
        {
            "docstring":                    "Sets the attribute meths",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "meths=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#meths=",
            "scope":                        "instance",
            "signature":                    "def meths=(value)",
            "source":                       "def meths=(value)\n  @meths = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23meths%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns for specific scopes. If no scopes are provided, returns all mixins.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":194,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "mixins",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"*scopes"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#mixins",
            "scope":                        "instance",
            "signature":                    "def mixins(*scopes)",
            "source":                       "def mixins(*scopes)\n  return class_mixins if scopes == [:class]\n  return instance_mixins if scopes == [:instance]\n  class_mixins | instance_mixins\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":194,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23mixins"
        },
        {
            "docstring":                    "Sets the attribute mixins",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/namespace_object.rb"}],
            "name":                         "mixins=",
            "namespace":                    "YARD::CodeObjects::NamespaceObject",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::CodeObjects::NamespaceObject#mixins=",
            "scope":                        "instance",
            "signature":                    "def mixins=(value)",
            "source":                       "def mixins=(value)\n  @mixins = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Fnamespace_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ANamespaceObject%23mixins%3D"
        },
        {
            "aliases":                      {"YARD::CodeObjects::Proxy#==":"equal?","YARD::CodeObjects::Proxy#to_str":"path","YARD::CodeObjects::Proxy#to_s":"path","YARD::CodeObjects::Proxy#parent":"namespace"},
            "attributes":                   {"class":{},"instance":{"namespace":{"write":null,"read":"YARD::CodeObjects::Proxy#namespace"}}},
            "children":                     ["YARD::CodeObjects::Proxy.===","YARD::CodeObjects::Proxy#namespace","YARD::CodeObjects::Proxy#parent","YARD::CodeObjects::Proxy#initialize","YARD::CodeObjects::Proxy#name","YARD::CodeObjects::Proxy#inspect","YARD::CodeObjects::Proxy#path","YARD::CodeObjects::Proxy#to_s","YARD::CodeObjects::Proxy#to_str","YARD::CodeObjects::Proxy#is_a?","YARD::CodeObjects::Proxy#===","YARD::CodeObjects::Proxy#<=>","YARD::CodeObjects::Proxy#equal?","YARD::CodeObjects::Proxy#==","YARD::CodeObjects::Proxy#hash","YARD::CodeObjects::Proxy#class","YARD::CodeObjects::Proxy#type","YARD::CodeObjects::Proxy#type=","YARD::CodeObjects::Proxy#instance_of?","YARD::CodeObjects::Proxy#kind_of?","YARD::CodeObjects::Proxy#respond_to?","YARD::CodeObjects::Proxy#method_missing","YARD::CodeObjects::Proxy#root?","YARD::CodeObjects::Proxy#to_ary","YARD::CodeObjects::Proxy#to_obj"],
            "current_file_has_comments":    true,
            "docstring":                    "The Proxy class is a way to lazily resolve code objects in\ncases where the object may not yet exist. A proxy simply stores\nan unresolved path until a method is called on the object, at which\npoint it does a lookup using {Registry.resolve}. If the object is\nnot found, a warning is raised and {ProxyMethodError} might be raised.",
            "dynamic":                      true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "Proxy",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::Proxy",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3AProxy.%3D%3D%3D","YARD%3A%3ACodeObjects%3A%3AProxy%23namespace","YARD%3A%3ACodeObjects%3A%3AProxy%23parent","YARD%3A%3ACodeObjects%3A%3AProxy%23initialize","YARD%3A%3ACodeObjects%3A%3AProxy%23name","YARD%3A%3ACodeObjects%3A%3AProxy%23inspect","YARD%3A%3ACodeObjects%3A%3AProxy%23path","YARD%3A%3ACodeObjects%3A%3AProxy%23to_s","YARD%3A%3ACodeObjects%3A%3AProxy%23to_str","YARD%3A%3ACodeObjects%3A%3AProxy%23is_a%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23%3D%3D%3D","YARD%3A%3ACodeObjects%3A%3AProxy%23%3C%3D%3E","YARD%3A%3ACodeObjects%3A%3AProxy%23equal%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23%3D%3D","YARD%3A%3ACodeObjects%3A%3AProxy%23hash","YARD%3A%3ACodeObjects%3A%3AProxy%23class","YARD%3A%3ACodeObjects%3A%3AProxy%23type","YARD%3A%3ACodeObjects%3A%3AProxy%23type%3D","YARD%3A%3ACodeObjects%3A%3AProxy%23instance_of%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23kind_of%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23respond_to%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23method_missing","YARD%3A%3ACodeObjects%3A%3AProxy%23root%3F","YARD%3A%3ACodeObjects%3A%3AProxy%23to_ary","YARD%3A%3ACodeObjects%3A%3AProxy%23to_obj"],
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":130,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "<=>",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Proxy#<=>",
            "scope":                        "instance",
            "signature":                    "def <=>(other)",
            "source":                       "def <=>(other)\n  if other.respond_to? :path\n    path <=> other.path\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":130,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23%3C%3D%3E"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":146,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#==",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  if other.respond_to? :path\n    path == other.path\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":146,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":121,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "===",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Proxy#===",
            "scope":                        "instance",
            "signature":                    "def ===(other)",
            "source":                       "def ===(other)\n  if obj = to_obj\n    obj === other\n  else\n    self.class <= other.class\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":121,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23%3D%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the class name of the object the proxy is mimicking, if\nresolved. Otherwise returns +Proxy+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "class",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#class",
            "scope":                        "instance",
            "signature":                    "def class",
            "source":                       "def class\n  if obj = to_obj\n    obj.class\n  else\n    Proxy\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23class"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":139,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "equal?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Proxy#equal?",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  if other.respond_to? :path\n    path == other.path\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":139,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23equal%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#hash",
            "scope":                        "instance",
            "signature":                    "def hash; path.hash end",
            "source":                       "def hash; path.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new Proxy",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::CodeObjects::Proxy#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(namespace, name)",
            "source":                       "def initialize(namespace, name)\n  namespace = Registry.root if !namespace || namespace == :root\n\n  if name =~ /^#{NSEPQ}/\n    namespace = Registry.root\n    name = name[2..-1]\n  end\n\n  if name =~ /(?:#{NSEPQ}|#{ISEPQ}|#{CSEPQ})([^#{NSEPQ}#{ISEPQ}#{CSEPQ}]+)$/\n    @orignamespace, @origname = namespace, name\n    @imethod = true if name.include? ISEP\n    namespace = Proxy.new(namespace, $`) unless $`.empty?\n    name = $1\n  else\n    @orignamespace, @origname, @imethod = nil, nil, nil\n  end\n\n  @name = name.to_sym\n  @namespace = namespace\n  @obj = nil\n  @imethod ||= nil\n\n  if @namespace.is_a?(ConstantObject)\n    @origname = nil # forget these for a constant\n    @orignamespace = nil\n    @namespace = Proxy.new(@namespace.namespace, @namespace.value)\n  end\n\n  unless @namespace.is_a?(NamespaceObject) or @namespace.is_a?(Proxy)\n    raise ArgumentError, \"Invalid namespace object: #{namespace}\"\n  end\n\n  # If the name begins with \"::\" (like \"::String\")\n  # this is definitely a root level object, so\n  # remove the namespace and attach it to the root\n  if @name =~ /^#{NSEPQ}/\n    @name.gsub!(/^#{NSEPQ}/, '')\n    @namespace = Registry.root\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns a text representation of the Proxy",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  if obj = to_obj\n    obj.inspect\n  else\n    \"P(#{path})\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23inspect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":181,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "instance_of?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::CodeObjects::Proxy#instance_of?",
            "scope":                        "instance",
            "signature":                    "def instance_of?(klass)",
            "source":                       "def instance_of?(klass)\n  self.class == klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":181,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23instance_of%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":112,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "is_a?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::CodeObjects::Proxy#is_a?",
            "scope":                        "instance",
            "signature":                    "def is_a?(klass)",
            "source":                       "def is_a?(klass)\n  if obj = to_obj\n    obj.is_a?(klass)\n  else\n    self.class <= klass\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":112,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23is_a%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":186,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "kind_of?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::CodeObjects::Proxy#kind_of?",
            "scope":                        "instance",
            "signature":                    "def kind_of?(klass)",
            "source":                       "def kind_of?(klass)\n  self.class <= klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":186,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23kind_of%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Dispatches the method to the resolved object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":202,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::CodeObjects::Proxy#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(meth, *args, &block)",
            "source":                       "def method_missing(meth, *args, &block)\n  if obj = to_obj\n    obj.__send__(meth, *args, &block)\n  else\n    log.warn \"Load Order / Name Resolution Problem on #{path}:\"\n    log.warn \"-\"\n    log.warn \"Something is trying to call #{meth} on object #{path} before it has been recognized.\"\n    log.warn \"This error usually means that you need to modify the order in which you parse files\"\n    log.warn \"so that #{path} is parsed before methods or other objects attempt to access it.\"\n    log.warn \"-\"\n    log.warn \"YARD will recover from this error and continue to parse but you *may* have problems\"\n    log.warn \"with your generated documentation. You should probably fix this.\"\n    log.warn \"-\"\n    begin\n      super\n    rescue NoMethodError\n      raise ProxyMethodError, \"Proxy cannot call method ##{meth} on object '#{path}'\"\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":202,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23method_missing"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The name of the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":"false","parm_name":"prefix"}],
            "path":                         "YARD::CodeObjects::Proxy#name",
            "scope":                        "instance",
            "signature":                    "def name(prefix = false)",
            "source":                       "def name(prefix = false)\n  prefix ? (@imethod ? ISEP : '') + @name.to_s : @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23name"
        },
        {
            "docstring":                    "Returns the value of attribute namespace",
            "dynamic":                      true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "namespace",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23namespace"
        },
        {
            "docstring":                    "Returns the value of attribute namespace",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "parent",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#parent",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23parent"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "If the proxy resolves to an object, returns its path, otherwise\nguesses at the correct path using the original namespace and name.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":89,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  if obj = to_obj\n    obj.path\n  else\n    if @namespace.root?\n      (@imethod ? ISEP : \"\") + name.to_s\n    elsif @origname\n      if @origname =~ /^[A-Z]/\n        @origname\n      else\n        [namespace.path, @origname].join\n      end\n    elsif name.to_s =~ /^[A-Z]/ # const\n      name.to_s\n    else # class meth?\n      [namespace.path, name.to_s].join(CSEP)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":89,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":191,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "respond_to?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":"false","parm_name":"include_private"}],
            "path":                         "YARD::CodeObjects::Proxy#respond_to?",
            "scope":                        "instance",
            "signature":                    "def respond_to?(meth, include_private = false)",
            "source":                       "def respond_to?(meth, include_private = false)\n  if obj = to_obj\n    obj.respond_to?(meth, include_private)\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":191,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23respond_to%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This class is never a root object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":224,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "root?",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#root?",
            "scope":                        "instance",
            "signature":                    "def root?; false end",
            "source":                       "def root?; false end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":224,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23root%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":229,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "to_ary",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#to_ary",
            "scope":                        "instance",
            "signature":                    "def to_ary; nil end",
            "source":                       "def to_ary; nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":229,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23to_ary"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attempts to find the object that this unresolved object\nreferences by checking if any objects by this name are\nregistered all the way up the namespace tree.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":236,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "to_obj",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#to_obj",
            "scope":                        "instance",
            "signature":                    "def to_obj",
            "source":                       "def to_obj\n  return @obj if @obj\n  if @obj = Registry.resolve(@namespace, (@imethod ? ISEP : '') + @name.to_s)\n    if @origname && @origname.include?(\"::\") && !@obj.path.include?(@origname)\n      # the object's path should include the original proxy namespace,\n      # otherwise it's (probably) not the right object.\n      @obj = nil\n    else\n      @namespace = @obj.namespace\n      @name = @obj.name\n    end\n  end\n  @obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":236,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23to_obj"
        },
        {
            "docstring":                    "If the proxy resolves to an object, returns its path, otherwise\nguesses at the correct path using the original namespace and name.",
            "dynamic":                      true,
            "files":                        [{"file_line":108,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#to_s",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  if obj = to_obj\n    obj.path\n  else\n    if @namespace.root?\n      (@imethod ? ISEP : \"\") + name.to_s\n    elsif @origname\n      if @origname =~ /^[A-Z]/\n        @origname\n      else\n        [namespace.path, @origname].join\n      end\n    elsif name.to_s =~ /^[A-Z]/ # const\n      name.to_s\n    else # class meth?\n      [namespace.path, name.to_s].join(CSEP)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":108,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23to_s"
        },
        {
            "docstring":                    "If the proxy resolves to an object, returns its path, otherwise\nguesses at the correct path using the original namespace and name.",
            "dynamic":                      true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "to_str",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#to_str",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  if obj = to_obj\n    obj.path\n  else\n    if @namespace.root?\n      (@imethod ? ISEP : \"\") + name.to_s\n    elsif @origname\n      if @origname =~ /^[A-Z]/\n        @origname\n      else\n        [namespace.path, @origname].join\n      end\n    elsif name.to_s =~ /^[A-Z]/ # const\n      name.to_s\n    else # class meth?\n      [namespace.path, name.to_s].join(CSEP)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23to_str"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the type of the proxy. If it cannot be resolved at the\ntime of the call, it will either return the inferred proxy type\n(see {#type=}) or +:proxy+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":167,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "path":                         "YARD::CodeObjects::Proxy#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  if obj = to_obj\n    obj.type\n  else\n    Registry.proxy_types[path] || :proxy\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":167,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Allows a parser to infer the type of the proxy by its path.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":178,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "type=",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::CodeObjects::Proxy#type=",
            "scope":                        "instance",
            "signature":                    "def type=(type) Registry.proxy_types[path] = type.to_sym end",
            "source":                       "def type=(type) Registry.proxy_types[path] = type.to_sym end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":178,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy%23type%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "===",
            "namespace":                    "YARD::CodeObjects::Proxy",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::Proxy.===",
            "scope":                        "class",
            "signature":                    "def self.===(other) other.is_a?(self) end",
            "source":                       "def self.===(other) other.is_a?(self) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxy.%3D%3D%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "A special type of +NoMethodError+ when raised from a {Proxy}",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/code_objects/proxy.rb"}],
            "name":                         "ProxyMethodError",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::ProxyMethodError",
            "source_type":                  "ruby",
            "superclass":                   "NoMethodError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fcode_objects%2Fproxy.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3AProxyMethodError",
            "y_ld:superclass":              "NoMethodError"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::CodeObjects::RootObject#path","YARD::CodeObjects::RootObject#inspect","YARD::CodeObjects::RootObject#root?","YARD::CodeObjects::RootObject#equal?","YARD::CodeObjects::RootObject#hash"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents the root namespace object (the invisible Ruby module that\nholds all top level modules, class and other objects).",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "RootObject",
            "namespace":                    "YARD::CodeObjects",
            "path":                         "YARD::CodeObjects::RootObject",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CodeObjects::ModuleObject",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ACodeObjects%3A%3ARootObject%23path","YARD%3A%3ACodeObjects%3A%3ARootObject%23inspect","YARD%3A%3ACodeObjects%3A%3ARootObject%23root%3F","YARD%3A%3ACodeObjects%3A%3ARootObject%23equal%3F","YARD%3A%3ACodeObjects%3A%3ARootObject%23hash"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject",
            "y_ld:superclass":              "YARD%3A%3ACodeObjects%3A%3AModuleObject"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "equal?",
            "namespace":                    "YARD::CodeObjects::RootObject",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::CodeObjects::RootObject#equal?",
            "scope":                        "instance",
            "signature":                    "def equal?(other)",
            "source":                       "def equal?(other)\n  other == :root ? true : super(other)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject%23equal%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::CodeObjects::RootObject",
            "path":                         "YARD::CodeObjects::RootObject#hash",
            "scope":                        "instance",
            "signature":                    "def hash; :root.hash end",
            "source":                       "def hash; :root.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject%23hash"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::CodeObjects::RootObject",
            "path":                         "YARD::CodeObjects::RootObject#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect; @inspect ||= \"#<yardoc root>\" end",
            "source":                       "def inspect; @inspect ||= \"#<yardoc root>\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject%23inspect"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::CodeObjects::RootObject",
            "path":                         "YARD::CodeObjects::RootObject#path",
            "scope":                        "instance",
            "signature":                    "def path; @path ||= \"\" end",
            "source":                       "def path; @path ||= \"\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject%23path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/code_objects/root_object.rb"}],
            "name":                         "root?",
            "namespace":                    "YARD::CodeObjects::RootObject",
            "path":                         "YARD::CodeObjects::RootObject#root?",
            "scope":                        "instance",
            "signature":                    "def root?; true end",
            "source":                       "def root?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fcode_objects%2Froot_object.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ACodeObjects%3A%3ARootObject%23root%3F"
        },
        {
            "attributes":                   {"class":{"options":{"write":"YARD::Config.options=","read":"YARD::Config.options"}},"instance":{}},
            "children":                     ["YARD::Config.options=","YARD::Config.options","YARD::Config::CONFIG_DIR","YARD::Config::CONFIG_FILE","YARD::Config::IGNORED_PLUGINS","YARD::Config::DEFAULT_CONFIG_OPTIONS","YARD::Config::YARD_PLUGIN_PREFIX","YARD::Config.load","YARD::Config.save","YARD::Config.load_plugins","YARD::Config.load_plugin","YARD::Config.load_gem_plugins","YARD::Config.load_autoload_plugins","YARD::Config.load_commandline_plugins","YARD::Config.load_commandline_safemode","YARD::Config.load_plugin_failed","YARD::Config.add_ignored_plugins_file","YARD::Config.translate_plugin_names","YARD::Config.read_config_file","YARD::Config.translate_plugin_name","YARD::Config.with_yardopts","YARD::Config.arguments"],
            "current_file_has_comments":    true,
            "docstring":                    "This class maintains all system-wide configuration for YARD and handles\nthe loading of plugins. To access options call {options}, and to load\na plugin use {load_plugin}. All other public methods are used by YARD\nduring load time.\n\n== User Configuration Files\n\nPersistent user configuration files can be stored in the file\n+~/.yard/config+, which is read when YARD first loads. The file should\nbe formatted as YAML, and should contain a map of keys and values.\n\nAlthough you can specify any key-value mapping in the configuration file,\nYARD defines special keys specified in {DEFAULT_CONFIG_OPTIONS}.\n\nAn example of a configuration file is listed below:\n\n    !!!yaml\n    load_plugins: true # Auto-load plugins when YARD starts\n    ignored_plugins:\n      - yard-broken\n      - broken2 # yard- prefix not necessary\n    autoload_plugins:\n      - yard-rspec\n\n== Automatic Loading of Plugins\n\nYARD 0.6.2 will no longer automatically load all plugins by default. This\noption can be reset by setting 'load_plugins' to true in the configuration\nfile. In addition, you can specify a set of specific plugins to load on\nload through the 'autoload_plugins' list setting. This setting is\nindependent of the 'load_plugins' value and will always be processed.\n\n== Ignored Plugins File\n\nYARD 0.5 and below used a +~/.yard/ignored_plugins+ file to specify\nplugins to be ignored at load time. Ignored plugins in 0.6.2 and above\nshould now be specified in the main configuration file, though YARD\nwill support the +ignored_plugins+ file until 0.7.x.\n\n== Safe Mode\n\nYARD supports running in safe-mode. By doing this, it will avoid executing\nany user code such as require files or queries. Plugins will still be\nloaded with safe mode on, because plugins are properly namespaced with\na 'yard-' prefix, must be installed as a gem, and therefore cannot be\ntouched by the user. To specify safe mode, use the +safe_mode+ key.\n\n== Plugin Specific Configuration\n\nAdditional settings can be defined within the configuration file\nspecifically to provide configuration for a plugin. A plugin that utilizes\nthe YARD configuration is strongly encouraged to utilize namespacing of\ntheir configuration content.\n\n    !!!yaml\n    load_plugins: true # Auto-load plugins when YARD starts\n    ignored_plugins:\n      - yard-broken\n      - broken2 # yard- prefix not necessary\n    autoload_plugins:\n      - yard-rspec\n    # Plugin Specific Configuration\n    yard-sample-plugin:\n      show-results-inline: true\n\nAs the configuration is available system wide, it can be\naccessed within the plugin code.\n\n\n    if YARD::Config.options['yard-sample-plugin'] and\n      YARD::Config.options['yard-sample-plugin']['show-results-inline']\n      # ... perform the action that places the results inline ...\n    else\n      # ... do the default behavior of not showing the results inline ...\n    end\n\nWhen accessing the configuration, be aware that this file is user managed\nso configuration keys and values may not be present. Make no assumptions and\ninstead ensure that you check for the existence of keys before proceeding to\nretrieve values.",
            "dynamic":                      true,
            "files":                        [{"file_line":85,"file_path":"lib/yard/config.rb"}],
            "name":                         "Config",
            "namespace":                    "YARD",
            "path":                         "YARD::Config",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AConfig.options%3D","YARD%3A%3AConfig.options","YARD%3A%3AConfig%3A%3ACONFIG_DIR","YARD%3A%3AConfig%3A%3ACONFIG_FILE","YARD%3A%3AConfig%3A%3AIGNORED_PLUGINS","YARD%3A%3AConfig%3A%3ADEFAULT_CONFIG_OPTIONS","YARD%3A%3AConfig%3A%3AYARD_PLUGIN_PREFIX","YARD%3A%3AConfig.load","YARD%3A%3AConfig.save","YARD%3A%3AConfig.load_plugins","YARD%3A%3AConfig.load_plugin","YARD%3A%3AConfig.load_gem_plugins","YARD%3A%3AConfig.load_autoload_plugins","YARD%3A%3AConfig.load_commandline_plugins","YARD%3A%3AConfig.load_commandline_safemode","YARD%3A%3AConfig.load_plugin_failed","YARD%3A%3AConfig.add_ignored_plugins_file","YARD%3A%3AConfig.translate_plugin_names","YARD%3A%3AConfig.read_config_file","YARD%3A%3AConfig.translate_plugin_name","YARD%3A%3AConfig.with_yardopts","YARD%3A%3AConfig.arguments"],
            "y_ld:files":                   [{"file_line":85,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AConfig",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Legacy support for {IGNORED_PLUGINS}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":220,"file_path":"lib/yard/config.rb"}],
            "name":                         "add_ignored_plugins_file",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.add_ignored_plugins_file",
            "scope":                        "class",
            "signature":                    "def self.add_ignored_plugins_file",
            "source":                       "def self.add_ignored_plugins_file\n  if File.file?(IGNORED_PLUGINS)\n    options[:ignored_plugins] += File.read(IGNORED_PLUGINS).split(/\\s+/)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":220,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.add_ignored_plugins_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/config.rb"}],
            "name":                         "arguments",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.arguments",
            "scope":                        "class",
            "signature":                    "def self.arguments",
            "source":                       "def self.arguments\n  ARGV + @yardopts\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.arguments"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads settings from {CONFIG_FILE}. This method is called by YARD at\nload time and should not be called by the user.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":118,"file_path":"lib/yard/config.rb"}],
            "name":                         "load",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load",
            "scope":                        "class",
            "signature":                    "def self.load",
            "source":                       "def self.load\n  self.options = SymbolHash.new(false)\n  options.update(DEFAULT_CONFIG_OPTIONS)\n  options.update(read_config_file)\n  load_commandline_safemode\n  add_ignored_plugins_file\n  translate_plugin_names\n  load_plugins\nrescue\n  log.error \"Invalid configuration file, using default options.\"\n  options.update(DEFAULT_CONFIG_OPTIONS)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":118,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Load plugins set in :autoload_plugins",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":188,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_autoload_plugins",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load_autoload_plugins",
            "scope":                        "class",
            "signature":                    "def self.load_autoload_plugins",
            "source":                       "def self.load_autoload_plugins\n  options[:autoload_plugins].each {|name| load_plugin(name) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":188,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_autoload_plugins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Load plugins from {#arguments}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":193,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_commandline_plugins",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load_commandline_plugins",
            "scope":                        "class",
            "signature":                    "def self.load_commandline_plugins",
            "source":                       "def self.load_commandline_plugins\n  with_yardopts do\n    arguments.each_with_index do |arg, i|\n      next unless arg == '--plugin'\n      load_plugin(arguments[i+1])\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":193,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_commandline_plugins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Check for command-line safe_mode switch in {#arguments}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":203,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_commandline_safemode",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load_commandline_safemode",
            "scope":                        "class",
            "signature":                    "def self.load_commandline_safemode",
            "source":                       "def self.load_commandline_safemode\n  with_yardopts do\n    arguments.each_with_index do |arg, i|\n      options[:safe_mode] = true if arg == '--safe'\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":203,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_commandline_safemode"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Load gem plugins if :load_plugins is true",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":168,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_gem_plugins",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load_gem_plugins",
            "scope":                        "class",
            "signature":                    "def self.load_gem_plugins",
            "source":                       "def self.load_gem_plugins\n  return true unless options[:load_plugins]\n  require 'rubygems'\n  result = true\n  Gem.source_index.find_name('').each do |gem|\n    begin\n      next true unless gem.name =~ YARD_PLUGIN_PREFIX\n      load_plugin(gem.name)\n    rescue Gem::LoadError => e\n      tmp = load_plugin_failed(gem.name, e)\n      result = tmp if !tmp\n    end\n  end\n  result\nrescue LoadError\n  log.debug \"RubyGems is not present, skipping plugin loading\"\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":168,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_gem_plugins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads an individual plugin by name. It is not necessary to include the\n+yard-+ plugin prefix here.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_plugin",
            "namespace":                    "YARD::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Config.load_plugin",
            "scope":                        "class",
            "signature":                    "def self.load_plugin(name)",
            "source":                       "def self.load_plugin(name)\n  name = translate_plugin_name(name)\n  return false if options[:ignored_plugins].include?(name)\n  return false if name =~ /^yard-doc-/\n  log.debug \"Loading plugin '#{name}'...\"\n  require name\n  true\nrescue LoadError => e\n  load_plugin_failed(name, e)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_plugin"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Print a warning if the plugin failed to load",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":213,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_plugin_failed",
            "namespace":                    "YARD::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"exception"}],
            "path":                         "YARD::Config.load_plugin_failed",
            "scope":                        "class",
            "signature":                    "def self.load_plugin_failed(name, exception)",
            "source":                       "def self.load_plugin_failed(name, exception)\n  log.warn \"Error loading plugin '#{name}'\"\n  log.backtrace(exception) if $DEBUG\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":213,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_plugin_failed"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads gems that match the name 'yard-*' (recommended) or 'yard_*' except\nthose listed in +~/.yard/ignored_plugins+. This is called immediately\nafter YARD is loaded to allow plugin support.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/config.rb"}],
            "name":                         "load_plugins",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.load_plugins",
            "scope":                        "class",
            "signature":                    "def self.load_plugins",
            "source":                       "def self.load_plugins\n  load_gem_plugins &&\n    load_autoload_plugins &&\n    load_commandline_plugins ? true : false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.load_plugins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The system-wide configuration options for YARD",
            "dynamic":                      true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/config.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.options",
            "scope":                        "class",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The system-wide configuration options for YARD",
            "dynamic":                      true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/config.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Config.options=",
            "scope":                        "class",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads the YAML configuration file into memory",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":235,"file_path":"lib/yard/config.rb"}],
            "name":                         "read_config_file",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.read_config_file",
            "scope":                        "class",
            "signature":                    "def self.read_config_file",
            "source":                       "def self.read_config_file\n  if File.file?(CONFIG_FILE)\n    require 'yaml'\n    YAML.load_file(CONFIG_FILE)\n  else\n    {}\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":235,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.read_config_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Saves settings to {CONFIG_FILE}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":133,"file_path":"lib/yard/config.rb"}],
            "name":                         "save",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.save",
            "scope":                        "class",
            "signature":                    "def self.save",
            "source":                       "def self.save\n  require 'yaml'\n  File.open(CONFIG_FILE, 'w') {|f| f.write(YAML.dump(options)) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":133,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.save"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sanitizes and normalizes a plugin name to include the 'yard-' prefix.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":247,"file_path":"lib/yard/config.rb"}],
            "name":                         "translate_plugin_name",
            "namespace":                    "YARD::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Config.translate_plugin_name",
            "scope":                        "class",
            "signature":                    "def self.translate_plugin_name(name)",
            "source":                       "def self.translate_plugin_name(name)\n  name = name.gsub('/', '') # Security sanitization\n  name = \"yard-\" + name unless name =~ YARD_PLUGIN_PREFIX\n  name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":247,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.translate_plugin_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Translates plugin names to add yard- prefix.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":227,"file_path":"lib/yard/config.rb"}],
            "name":                         "translate_plugin_names",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config.translate_plugin_names",
            "scope":                        "class",
            "signature":                    "def self.translate_plugin_names",
            "source":                       "def self.translate_plugin_names\n  options[:ignored_plugins].map! {|name| translate_plugin_name(name) }\n  options[:autoload_plugins].map! {|name| translate_plugin_name(name) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":227,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.translate_plugin_names"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Temporarily loads .yardopts file into @yardopts",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":254,"file_path":"lib/yard/config.rb"}],
            "name":                         "with_yardopts",
            "namespace":                    "YARD::Config",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Config.with_yardopts",
            "scope":                        "class",
            "signature":                    "def self.with_yardopts(&block)",
            "source":                       "def self.with_yardopts(&block)\n  yfile = CLI::Yardoc::DEFAULT_YARDOPTS_FILE\n  @yardopts = File.file?(yfile) ? File.read_binary(yfile).shell_split : []\n  result = yield\n  @yardopts = nil\n  result\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":254,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig.with_yardopts"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The location where YARD stores user-specific settings",
            "dynamic":                      true,
            "files":                        [{"file_line":94,"file_path":"lib/yard/config.rb"}],
            "name":                         "CONFIG_DIR",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config::CONFIG_DIR",
            "signature":                    "CONFIG_DIR = File.expand_path('~/.yard')",
            "source":                       "CONFIG_DIR = File.expand_path('~/.yard')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path('~/.yard')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":94,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig%3A%3ACONFIG_DIR"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The main configuration YAML file.",
            "dynamic":                      true,
            "files":                        [{"file_line":97,"file_path":"lib/yard/config.rb"}],
            "name":                         "CONFIG_FILE",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config::CONFIG_FILE",
            "signature":                    "CONFIG_FILE = File.join(CONFIG_DIR, 'config')",
            "source":                       "CONFIG_FILE = File.join(CONFIG_DIR, 'config')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.join(CONFIG_DIR, 'config')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":97,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig%3A%3ACONFIG_FILE"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Default configuration options",
            "dynamic":                      true,
            "files":                        [{"file_line":104,"file_path":"lib/yard/config.rb"}],
            "name":                         "DEFAULT_CONFIG_OPTIONS",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config::DEFAULT_CONFIG_OPTIONS",
            "signature":                    "DEFAULT_CONFIG_OPTIONS = {",
            "source":                       "DEFAULT_CONFIG_OPTIONS = {\n  :load_plugins => false,   # Whether to load plugins automatically with YARD\n  :ignored_plugins => [],   # A list of ignored plugins by name\n  :autoload_plugins => [],  # A list of plugins to be automatically loaded\n  :safe_mode => false       # Does not execute or eval any user-level code\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  :load_plugins => false,   # Whether to load plugins automatically with YARD\n  :ignored_plugins => [],   # A list of ignored plugins by name\n  :autoload_plugins => [],  # A list of plugins to be automatically loaded\n  :safe_mode => false       # Does not execute or eval any user-level code\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":104,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig%3A%3ADEFAULT_CONFIG_OPTIONS"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "File listing all ignored plugins",
            "dynamic":                      true,
            "files":                        [{"file_line":101,"file_path":"lib/yard/config.rb"}],
            "name":                         "IGNORED_PLUGINS",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config::IGNORED_PLUGINS",
            "signature":                    "IGNORED_PLUGINS = File.join(CONFIG_DIR, 'ignored_plugins')",
            "source":                       "IGNORED_PLUGINS = File.join(CONFIG_DIR, 'ignored_plugins')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.join(CONFIG_DIR, 'ignored_plugins')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":101,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig%3A%3AIGNORED_PLUGINS"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The prefix used for YARD plugins. Name your gem with this prefix\nto allow it to be used as a plugin.",
            "dynamic":                      true,
            "files":                        [{"file_line":113,"file_path":"lib/yard/config.rb"}],
            "name":                         "YARD_PLUGIN_PREFIX",
            "namespace":                    "YARD::Config",
            "path":                         "YARD::Config::YARD_PLUGIN_PREFIX",
            "signature":                    "YARD_PLUGIN_PREFIX = /^yard[-_]/",
            "source":                       "YARD_PLUGIN_PREFIX = /^yard[-_]/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/^yard[-_]/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":113,"file_path":"lib%2Fyard%2Fconfig.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AConfig%3A%3AYARD_PLUGIN_PREFIX"
        },
        {
            "aliases":                      {"YARD::Docstring#all=":"replace"},
            "attributes":                   {"class":{"default_parser":{"write":"YARD::Docstring.default_parser=","read":"YARD::Docstring.default_parser"}},"instance":{"ref_tags":{"write":null,"read":"YARD::Docstring#ref_tags"},"line_range":{"write":"YARD::Docstring#line_range=","read":"YARD::Docstring#line_range"},"all":{"write":null,"read":"YARD::Docstring#all"},"hash_flag":{"write":"YARD::Docstring#hash_flag=","read":"YARD::Docstring#hash_flag"},"object":{"write":"YARD::Docstring#object=","read":"YARD::Docstring#object"}}},
            "children":                     ["YARD::Docstring.default_parser=","YARD::Docstring.default_parser","YARD::Docstring.parser","YARD::Docstring#ref_tags","YARD::Docstring#object=","YARD::Docstring#object","YARD::Docstring#line_range=","YARD::Docstring#line_range","YARD::Docstring#all","YARD::Docstring#hash_flag","YARD::Docstring#hash_flag=","YARD::Docstring::META_MATCH","YARD::Docstring.new!","YARD::Docstring#initialize","YARD::Docstring#+","YARD::Docstring#replace","YARD::Docstring#all=","YARD::Docstring#dup","YARD::Docstring#line","YARD::Docstring#summary","YARD::Docstring#to_raw","YARD::Docstring#add_tag","YARD::Docstring#tag","YARD::Docstring#tags","YARD::Docstring#has_tag?","YARD::Docstring#delete_tags","YARD::Docstring#delete_tag_if","YARD::Docstring#blank?","YARD::Docstring#convert_ref_tags","YARD::Docstring#parse_comments"],
            "current_file_has_comments":    true,
            "docstring":                    "A documentation string, or \"docstring\" for short, encapsulates the\ncomments and metadata, or \"tags\", of an object. Meta-data is expressed\nin the form +@tag VALUE+, where VALUE can span over multiple lines as\nlong as they are indented. The following +@example+ tag shows how tags\ncan be indented:\n\n  # @example My example\n  #   a = \"hello world\"\n  #   a.reverse\n  # @version 1.0\n\nTags can be nested in a documentation string, though the {Tags::Tag}\nitself is responsible for parsing the inner tags.",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/docstring.rb"}],
            "groups":                       ["Creating a Docstring Object","Creating and Accessing Meta-data"],
            "name":                         "Docstring",
            "namespace":                    "YARD",
            "path":                         "YARD::Docstring",
            "source_type":                  "ruby",
            "superclass":                   "String",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ADocstring.default_parser%3D","YARD%3A%3ADocstring.default_parser","YARD%3A%3ADocstring.parser","YARD%3A%3ADocstring%23ref_tags","YARD%3A%3ADocstring%23object%3D","YARD%3A%3ADocstring%23object","YARD%3A%3ADocstring%23line_range%3D","YARD%3A%3ADocstring%23line_range","YARD%3A%3ADocstring%23all","YARD%3A%3ADocstring%23hash_flag","YARD%3A%3ADocstring%23hash_flag%3D","YARD%3A%3ADocstring%3A%3AMETA_MATCH","YARD%3A%3ADocstring.new%21","YARD%3A%3ADocstring%23initialize","YARD%3A%3ADocstring%23%2B","YARD%3A%3ADocstring%23replace","YARD%3A%3ADocstring%23all%3D","YARD%3A%3ADocstring%23dup","YARD%3A%3ADocstring%23line","YARD%3A%3ADocstring%23summary","YARD%3A%3ADocstring%23to_raw","YARD%3A%3ADocstring%23add_tag","YARD%3A%3ADocstring%23tag","YARD%3A%3ADocstring%23tags","YARD%3A%3ADocstring%23has_tag%3F","YARD%3A%3ADocstring%23delete_tags","YARD%3A%3ADocstring%23delete_tag_if","YARD%3A%3ADocstring%23blank%3F","YARD%3A%3ADocstring%23convert_ref_tags","YARD%3A%3ADocstring%23parse_comments"],
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ADocstring",
            "y_ld:superclass":              "String"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds another {Docstring}, copying over tags.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":112,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "+",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Docstring#+",
            "scope":                        "instance",
            "signature":                    "def +(other)",
            "source":                       "def +(other)\n  case other\n  when Docstring\n    Docstring.new([all, other.all].join(\"\\n\"), object)\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":112,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23%2B"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a tag or reftag object to the tag list. If you want to parse\ntag data based on the {Tags::DefaultFactory} tag factory, use\n{DocstringParser} instead.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":214,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "add_tag",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"*tags"}],
            "path":                         "YARD::Docstring#add_tag",
            "scope":                        "instance",
            "signature":                    "def add_tag(*tags)",
            "source":                       "def add_tag(*tags)\n  tags.each_with_index do |tag, i|\n    case tag\n    when Tags::Tag\n      tag.object = object\n      @tags << tag\n    when Tags::RefTag, Tags::RefTagList\n      @ref_tags << tag\n    else\n      raise ArgumentError, \"expected Tag or RefTag, got #{tag.class} (at index #{i})\"\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":214,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23add_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "all",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#all",
            "scope":                        "instance",
            "signature":                    "def all",
            "source":                       "def all\n  @all\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23all"
        },
        {
            "docstring":                    "Replaces the docstring with new raw content. Called by {#all=}.",
            "dynamic":                      true,
            "files":                        [{"file_line":129,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "all=",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#all=",
            "scope":                        "instance",
            "signature":                    "def replace(content, parse = true)",
            "source":                       "def replace(content, parse = true)\n  content = content.join(\"\\n\") if content.is_a?(Array)\n  @tags, @ref_tags = [], []\n  @all = content\n  super(parse ? parse_comments(content) : content)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":129,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23all%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns true if the docstring has no content that is visible to a template.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":282,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "blank?",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":"true","parm_name":"only_visible_tags"}],
            "path":                         "YARD::Docstring#blank?",
            "scope":                        "instance",
            "signature":                    "def blank?(only_visible_tags = true)",
            "source":                       "def blank?(only_visible_tags = true)\n  if only_visible_tags\n    empty? && !tags.any? {|tag| Tags::Library.visible_tags.include?(tag.tag_name.to_sym) }\n  else\n    empty? && @tags.empty? && @ref_tags.empty?\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":282,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23blank%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Maps valid reference tags",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":297,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "convert_ref_tags",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#convert_ref_tags",
            "scope":                        "instance",
            "signature":                    "def convert_ref_tags",
            "source":                       "def convert_ref_tags\n  list = @ref_tags.reject {|t| CodeObjects::Proxy === t.owner }\n  list.map {|t| t.tags }.flatten\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":297,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23convert_ref_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes all tags where the block returns true",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":272,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "delete_tag_if",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Docstring#delete_tag_if",
            "scope":                        "instance",
            "signature":                    "def delete_tag_if(&block)",
            "source":                       "def delete_tag_if(&block)\n  @tags.delete_if(&block)\n  @ref_tags.delete_if(&block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":272,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23delete_tag_if"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Delete all tags with +name+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "delete_tags",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Docstring#delete_tags",
            "scope":                        "instance",
            "signature":                    "def delete_tags(name)",
            "source":                       "def delete_tags(name)\n  delete_tag_if {|tag| tag.tag_name.to_s == name.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23delete_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deep-copies a docstring",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":138,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "dup",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#dup",
            "scope":                        "instance",
            "signature":                    "def dup",
            "source":                       "def dup\n  obj = super\n  %w(all summary tags ref_tags).each do |name|\n    val = instance_variable_get(\"@#{name}\")\n    obj.instance_variable_set(\"@#{name}\", val ? val.dup : nil)\n  end\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":138,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23dup"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns true if at least one tag by the name +name+ was declared",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":255,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "has_tag?",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Docstring#has_tag?",
            "scope":                        "instance",
            "signature":                    "def has_tag?(name)",
            "source":                       "def has_tag?(name)\n  tags.any? {|tag| tag.tag_name.to_s == name.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":255,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23has_tag%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "hash_flag",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#hash_flag",
            "scope":                        "instance",
            "signature":                    "def hash_flag",
            "source":                       "def hash_flag\n  @hash_flag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23hash_flag"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "hash_flag=",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::Docstring#hash_flag=",
            "scope":                        "instance",
            "signature":                    "def hash_flag=(v) @hash_flag = v == nil ? false : v end",
            "source":                       "def hash_flag=(v) @hash_flag = v == nil ? false : v end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23hash_flag%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new docstring with the raw contents attached to an optional\nobject. Parsing will be done by the {DocstringParser} class.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":99,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "initialize",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":"''","parm_name":"content"},{"parm_type":"nil","parm_name":"object"}],
            "path":                         "YARD::Docstring#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(content = '', object = nil)",
            "source":                       "def initialize(content = '', object = nil)\n  @object = object\n  @summary = nil\n  @hash_flag = false\n\n  self.all = content\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":99,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":151,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "line",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#line",
            "scope":                        "instance",
            "signature":                    "def line",
            "source":                       "def line\n  line_range ? line_range.first : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":151,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "line_range",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#line_range",
            "scope":                        "instance",
            "signature":                    "def line_range",
            "source":                       "def line_range\n  @line_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23line_range"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "line_range=",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Docstring#line_range=",
            "scope":                        "instance",
            "signature":                    "def line_range=(value)",
            "source":                       "def line_range=(value)\n  @line_range = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23line_range%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Docstring#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses out comments split by newlines into a new code object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":310,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "parse_comments",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"comments"}],
            "path":                         "YARD::Docstring#parse_comments",
            "scope":                        "instance",
            "signature":                    "def parse_comments(comments)",
            "source":                       "def parse_comments(comments)\n  parser = self.class.parser\n  parser.parse(comments, object)\n  add_tag(*parser.tags)\n  parser.text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":310,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23parse_comments"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "ref_tags",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#ref_tags",
            "scope":                        "instance",
            "signature":                    "def ref_tags",
            "source":                       "def ref_tags\n  @ref_tags\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23ref_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Replaces the docstring with new raw content. Called by {#all=}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":123,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "replace",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"content"},{"parm_type":"true","parm_name":"parse"}],
            "path":                         "YARD::Docstring#replace",
            "scope":                        "instance",
            "signature":                    "def replace(content, parse = true)",
            "source":                       "def replace(content, parse = true)\n  content = content.join(\"\\n\") if content.is_a?(Array)\n  @tags, @ref_tags = [], []\n  @all = content\n  super(parse ? parse_comments(content) : content)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":123,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23replace"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets the first line of a docstring to the period or the first paragraph.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":157,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "summary",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#summary",
            "scope":                        "instance",
            "signature":                    "def summary",
            "source":                       "def summary\n  return @summary if @summary\n  open_parens = ['{', '(', '[']\n  close_parens = ['}', ')', ']']\n  num_parens = 0\n  idx = length.times do |index|\n    case self[index, 1]\n    when \".\", \"\\r\", \"\\n\"\n      next_char = self[index + 1, 1].to_s\n      if num_parens == 0 && next_char =~ /^\\s*$/\n        break index - 1\n      end\n    when \"{\", \"(\", \"[\"\n      num_parens += 1\n    when \"}\", \")\", \"]\"\n      num_parens -= 1\n    end\n  end\n  @summary = self[0..idx]\n  @summary += '.' unless @summary.empty?\n  @summary\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":157,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23summary"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Convenience method to return the first tag\nobject in the list of tag objects of that name",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":237,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "tag",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Docstring#tag",
            "scope":                        "instance",
            "signature":                    "def tag(name)",
            "source":                       "def tag(name)\n  tags.find {|tag| tag.tag_name.to_s == name.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":237,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns a list of tags specified by +name+ or all tags if +name+ is not specified.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":245,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating and Accessing Meta-data",
            "name":                         "tags",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::Docstring#tags",
            "scope":                        "instance",
            "signature":                    "def tags(name = nil)",
            "source":                       "def tags(name = nil)\n  list = @tags + convert_ref_tags\n  return list unless name\n  list.select {|tag| tag.tag_name.to_s == name.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":245,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Reformats and returns a raw representation of the tag data using the\ncurrent tag and docstring data, not the original text.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":186,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "to_raw",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring#to_raw",
            "scope":                        "instance",
            "signature":                    "def to_raw",
            "source":                       "def to_raw\n  tag_data = tags.sort_by {|t| t.tag_name }.map do |tag|\n    case tag\n    when Tags::OverloadTag\n      tag_text = \"@#{tag.tag_name} #{tag.signature}\\n\"\n      unless tag.docstring.blank?\n        tag_text += \"\\n\" + tag.docstring.all.gsub(/\\r?\\n/, \"\\n  \")\n      end\n    else\n      tag_text = '@' + tag.tag_name\n      tag_text += ' [' + tag.types.join(', ') + ']' if tag.types\n      tag_text += ' ' + tag.name.to_s if tag.name\n      tag_text += \"\\n \" if tag.name && tag.text\n      tag_text += ' ' + tag.text.strip.gsub(/\\n/, \"\\n  \") if tag.text\n    end\n    tag_text\n  end\n  [strip, tag_data.join(\"\\n\")].reject {|l| l.empty? }.compact.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":186,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%23to_raw"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "default_parser",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring.default_parser",
            "scope":                        "class",
            "signature":                    "def default_parser",
            "source":                       "def default_parser\n  @default_parser\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring.default_parser"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "default_parser=",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Docstring.default_parser=",
            "scope":                        "class",
            "signature":                    "def default_parser=(value)",
            "source":                       "def default_parser=(value)\n  @default_parser = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring.default_parser%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new docstring without performing any parsing through\na {DocstringParser}. This method is called by +DocstringParser+\nwhen creating the new docstring object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/docstring.rb"}],
            "group":                        "Creating a Docstring Object",
            "name":                         "new!",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"[]","parm_name":"tags"},{"parm_type":"nil","parm_name":"object"},{"parm_type":"nil","parm_name":"raw_data"}],
            "path":                         "YARD::Docstring.new!",
            "scope":                        "class",
            "signature":                    "def self.new!(text, tags = [], object = nil, raw_data = nil)",
            "source":                       "def self.new!(text, tags = [], object = nil, raw_data = nil)\n  docstring = allocate\n  docstring.replace(text, false)\n  docstring.object = object\n  docstring.add_tag(*tags)\n  docstring.instance_variable_set(\"@all\", raw_data) if raw_data\n  docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring.new%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a parser object using the current {default_parser}.\nEquivalent to:\n  Docstring.default_parser.new(*args)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "parser",
            "namespace":                    "YARD::Docstring",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Docstring.parser",
            "scope":                        "class",
            "signature":                    "def parser(*args) default_parser.new(*args) end",
            "source":                       "def parser(*args) default_parser.new(*args) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring.parser"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Matches a tag at the start of a comment line",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/docstring.rb"}],
            "name":                         "META_MATCH",
            "namespace":                    "YARD::Docstring",
            "path":                         "YARD::Docstring::META_MATCH",
            "signature":                    "META_MATCH = DocstringParser::META_MATCH",
            "source":                       "META_MATCH = DocstringParser::META_MATCH",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "DocstringParser::META_MATCH",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fdocstring.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstring%3A%3AMETA_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{"state":{"write":null,"read":"YARD::DocstringParser#state"},"text":{"write":null,"read":"YARD::DocstringParser#text"},"raw_text":{"write":null,"read":"YARD::DocstringParser#raw_text"},"tags":{"write":null,"read":"YARD::DocstringParser#tags"},"directives":{"write":null,"read":"YARD::DocstringParser#directives"},"handler":{"write":"YARD::DocstringParser#handler=","read":"YARD::DocstringParser#handler"},"object":{"write":"YARD::DocstringParser#object=","read":"YARD::DocstringParser#object"},"library":{"write":"YARD::DocstringParser#library=","read":"YARD::DocstringParser#library"}}},
            "children":                     ["YARD::DocstringParser#text","YARD::DocstringParser#raw_text","YARD::DocstringParser#tags","YARD::DocstringParser#directives","YARD::DocstringParser#state","YARD::DocstringParser#object=","YARD::DocstringParser#object","YARD::DocstringParser#handler=","YARD::DocstringParser#handler","YARD::DocstringParser#library=","YARD::DocstringParser#library","YARD::DocstringParser::META_MATCH","YARD::DocstringParser#initialize","YARD::DocstringParser#to_docstring","YARD::DocstringParser#parse","YARD::DocstringParser#parse_content","YARD::DocstringParser#create_tag","YARD::DocstringParser#create_ref_tag","YARD::DocstringParser#create_directive","YARD::DocstringParser#tag_is_directive?","YARD::DocstringParser#call_directives_after_parse","YARD::DocstringParser#call_after_parse_callbacks","YARD::DocstringParser.after_parse","YARD::DocstringParser.after_parse_callbacks"],
            "current_file_has_comments":    true,
            "docstring":                    "Parses text and creates a {Docstring} object to represent documentation\nfor a {CodeObjects::Base}. To create a new docstring, you should initialize\nthe parser and call {#parse} followed by {#to_docstring}.\n\n== Subclassing Notes\n\nThe DocstringParser can be subclassed and subtituted during parsing by\nsetting the {Docstring.default_parser} attribute with the name of the\nsubclass. This allows developers to change the way docstrings are\nparsed, allowing for completely different docstring syntaxes.",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/docstring_parser.rb"}],
            "groups":                       ["Creation and Conversion Methods","Parsing Methods","Tag Manipulation Methods","Parser Callback Methods"],
            "name":                         "DocstringParser",
            "namespace":                    "YARD",
            "path":                         "YARD::DocstringParser",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ADocstringParser%23text","YARD%3A%3ADocstringParser%23raw_text","YARD%3A%3ADocstringParser%23tags","YARD%3A%3ADocstringParser%23directives","YARD%3A%3ADocstringParser%23state","YARD%3A%3ADocstringParser%23object%3D","YARD%3A%3ADocstringParser%23object","YARD%3A%3ADocstringParser%23handler%3D","YARD%3A%3ADocstringParser%23handler","YARD%3A%3ADocstringParser%23library%3D","YARD%3A%3ADocstringParser%23library","YARD%3A%3ADocstringParser%3A%3AMETA_MATCH","YARD%3A%3ADocstringParser%23initialize","YARD%3A%3ADocstringParser%23to_docstring","YARD%3A%3ADocstringParser%23parse","YARD%3A%3ADocstringParser%23parse_content","YARD%3A%3ADocstringParser%23create_tag","YARD%3A%3ADocstringParser%23create_ref_tag","YARD%3A%3ADocstringParser%23create_directive","YARD%3A%3ADocstringParser%23tag_is_directive%3F","YARD%3A%3ADocstringParser%23call_directives_after_parse","YARD%3A%3ADocstringParser%23call_after_parse_callbacks","YARD%3A%3ADocstringParser.after_parse","YARD%3A%3ADocstringParser.after_parse_callbacks"],
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ADocstringParser",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Calls all {after_parse} callbacks",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":246,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parser Callback Methods",
            "name":                         "call_after_parse_callbacks",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#call_after_parse_callbacks",
            "scope":                        "instance",
            "signature":                    "def call_after_parse_callbacks",
            "source":                       "def call_after_parse_callbacks\n  self.class.after_parse_callbacks.each do |cb|\n    cb.call(self)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":246,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23call_after_parse_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Calls the {Directive#after_parse} callback on all the\ncreated directives.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":239,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parser Callback Methods",
            "name":                         "call_directives_after_parse",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#call_directives_after_parse",
            "scope":                        "instance",
            "signature":                    "def call_directives_after_parse",
            "source":                       "def call_directives_after_parse\n  directives.each do |dir|\n    dir.after_parse\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":239,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23call_directives_after_parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new directive using the registered {#library}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":208,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Tag Manipulation Methods",
            "name":                         "create_directive",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"tag_buf"}],
            "path":                         "YARD::DocstringParser#create_directive",
            "scope":                        "instance",
            "signature":                    "def create_directive(tag_name, tag_buf)",
            "source":                       "def create_directive(tag_name, tag_buf)\n  if library.has_directive?(tag_name)\n    dir = library.directive_create(tag_name, tag_buf, self)\n    if dir.is_a?(Tags::Directive)\n      @directives << dir\n      dir\n    end\n  else\n    log.warn \"Unknown directive @!#{tag_name}\" +\n      (object ? \" in file `#{object.file}` near line #{object.line}\" : \"\")\n    nil\n  end\nrescue Tags::TagFormatError\n  log.warn \"Invalid directive format for @!#{tag_name}\" +\n    (object ? \" in file `#{object.file}` near line #{object.line}\" : \"\")\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":208,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23create_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a {Tags::RefTag}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":202,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Tag Manipulation Methods",
            "name":                         "create_ref_tag",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"object_name"}],
            "path":                         "YARD::DocstringParser#create_ref_tag",
            "scope":                        "instance",
            "signature":                    "def create_ref_tag(tag_name, name, object_name)",
            "source":                       "def create_ref_tag(tag_name, name, object_name)\n  @tags << Tags::RefTagList.new(tag_name, P(object, object_name), name)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":202,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23create_ref_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a tag from the {Tags::DefaultFactory tag factory}.\n\nTo add an already created tag object, use {#add_tag}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":185,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Tag Manipulation Methods",
            "name":                         "create_tag",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":"''","parm_name":"tag_buf"}],
            "path":                         "YARD::DocstringParser#create_tag",
            "scope":                        "instance",
            "signature":                    "def create_tag(tag_name, tag_buf = '')",
            "source":                       "def create_tag(tag_name, tag_buf = '')\n  if tag_buf =~ /\\A\\s*(?:(\\S+)\\s+)?\\(\\s*see\\s+(\\S+)\\s*\\)\\s*\\Z/\n    return create_ref_tag(tag_name, $1, $2)\n  end\n\n  if library.has_tag?(tag_name)\n    @tags += [library.tag_create(tag_name, tag_buf)].flatten\n  else\n    log.warn \"Unknown tag @#{tag_name}\" +\n      (object ? \" in file `#{object.file}` near line #{object.line}\" : \"\")\n  end\nrescue Tags::TagFormatError\n  log.warn \"Invalid tag format for @#{tag_name}\" +\n    (object ? \" in file `#{object.file}` near line #{object.line}\" : \"\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":185,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23create_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "directives",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#directives",
            "scope":                        "instance",
            "signature":                    "def directives",
            "source":                       "def directives\n  @directives\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23directives"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "handler",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#handler",
            "scope":                        "instance",
            "signature":                    "def handler",
            "source":                       "def handler\n  @handler\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23handler"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "handler=",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::DocstringParser#handler=",
            "scope":                        "instance",
            "signature":                    "def handler=(value)",
            "source":                       "def handler=(value)\n  @handler = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23handler%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new parser to parse docstring data",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":75,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Creation and Conversion Methods",
            "name":                         "initialize",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":"Tags::Library.instance","parm_name":"library"}],
            "path":                         "YARD::DocstringParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(library = Tags::Library.instance)",
            "source":                       "def initialize(library = Tags::Library.instance)\n  @text = \"\"\n  @raw_text = \"\"\n  @tags = []\n  @directives = []\n  @library = library\n  @object = nil\n  @handler = nil\n  @state = OpenStruct.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":75,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "library",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#library",
            "scope":                        "instance",
            "signature":                    "def library",
            "source":                       "def library\n  @library\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23library"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "library=",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::DocstringParser#library=",
            "scope":                        "instance",
            "signature":                    "def library=(value)",
            "source":                       "def library=(value)\n  @library = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23library%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::DocstringParser#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses all content and returns itself.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":106,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parsing Methods",
            "name":                         "parse",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"},{"parm_type":"nil","parm_name":"object"},{"parm_type":"nil","parm_name":"handler"}],
            "path":                         "YARD::DocstringParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse(content, object = nil, handler = nil)",
            "source":                       "def parse(content, object = nil, handler = nil)\n  @object = object\n  @handler = handler\n  @raw_text = content\n  text = parse_content(content)\n  # Remove trailing/leading whitespace / newlines\n  @text = text.gsub(/\\A[\\r\\n\\s]+|[\\r\\n\\s]+\\Z/, '')\n  call_directives_after_parse\n  call_after_parse_callbacks\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":106,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a given block of text.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":123,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parsing Methods",
            "name":                         "parse_content",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::DocstringParser#parse_content",
            "scope":                        "instance",
            "signature":                    "def parse_content(content)",
            "source":                       "def parse_content(content)\n  content = content.split(/\\r?\\n/) if content.is_a?(String)\n  return '' if !content || content.empty?\n  docstring = \"\"\n\n  indent, last_indent = content.first[/^\\s*/].length, 0\n  orig_indent = 0\n  directive = false\n  last_line = \"\"\n  tag_name, tag_klass, tag_buf = nil, nil, []\n\n  (content+['']).each_with_index do |line, index|\n    indent = line[/^\\s*/].length\n    empty = (line =~ /^\\s*$/ ? true : false)\n    done = content.size == index\n\n    if tag_name && (((indent < orig_indent && !empty) || done ||\n        (indent == 0 && !empty)) || (indent <= last_indent && line =~ META_MATCH))\n      buf = tag_buf.join(\"\\n\")\n      if directive || tag_is_directive?(tag_name)\n        directive = create_directive(tag_name, buf)\n        if directive\n          docstring << parse_content(directive.expanded_text).chomp\n        end\n      else\n        create_tag(tag_name, buf)\n      end\n      tag_name, tag_buf, directive = nil, [], false\n      orig_indent = 0\n    end\n\n    # Found a meta tag\n    if line =~ META_MATCH\n      directive, tag_name, tag_buf = $1, $2, [($3 || '')]\n    elsif tag_name && indent >= orig_indent && !empty\n      orig_indent = indent if orig_indent == 0\n      # Extra data added to the tag on the next line\n      last_empty = last_line =~ /^[ \\t]*$/ ? true : false\n\n      tag_buf << '' if last_empty\n      tag_buf << line.gsub(/^[ \\t]{#{orig_indent}}/, '')\n    elsif !tag_name\n      # Regular docstring text\n      docstring << line << \"\\n\"\n    end\n\n    last_indent = indent\n    last_line = line\n  end\n\n  docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":123,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23parse_content"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "raw_text",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#raw_text",
            "scope":                        "instance",
            "signature":                    "def raw_text",
            "source":                       "def raw_text\n  @raw_text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23raw_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "state",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#state",
            "scope":                        "instance",
            "signature":                    "def state",
            "source":                       "def state\n  @state\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Backward compatibility to detect old tags that should be specified\nas directives in 0.8 and onward.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":228,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Tag Manipulation Methods",
            "name":                         "tag_is_directive?",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"}],
            "path":                         "YARD::DocstringParser#tag_is_directive?",
            "scope":                        "instance",
            "signature":                    "def tag_is_directive?(tag_name)",
            "source":                       "def tag_is_directive?(tag_name)\n  list = %w(attribute endgroup group macro method scope visibility)\n  list.include?(tag_name)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":228,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23tag_is_directive%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "tags",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#tags",
            "scope":                        "instance",
            "signature":                    "def tags",
            "source":                       "def tags\n  @tags\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "text",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#text",
            "scope":                        "instance",
            "signature":                    "def text",
            "source":                       "def text\n  @text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Creation and Conversion Methods",
            "name":                         "to_docstring",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser#to_docstring",
            "scope":                        "instance",
            "signature":                    "def to_docstring",
            "source":                       "def to_docstring\n  Docstring.new!(text, tags, object, raw_text)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%23to_docstring"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a callback that is called after a docstring is successfully\nparsed. Use this method to perform sanity checks on a docstring's\ntag data, or add any extra tags automatically to a docstring.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parser Callback Methods",
            "name":                         "after_parse",
            "namespace":                    "YARD::DocstringParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::DocstringParser.after_parse",
            "scope":                        "class",
            "signature":                    "def self.after_parse(&block)",
            "source":                       "def self.after_parse(&block)\n  self.after_parse_callbacks << block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser.after_parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":268,"file_path":"lib/yard/docstring_parser.rb"}],
            "group":                        "Parser Callback Methods",
            "name":                         "after_parse_callbacks",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser.after_parse_callbacks",
            "scope":                        "class",
            "signature":                    "def self.after_parse_callbacks",
            "source":                       "def self.after_parse_callbacks\n  @after_parse_callbacks ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":268,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser.after_parse_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The regular expression to match the tag syntax",
            "dynamic":                      true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/docstring_parser.rb"}],
            "name":                         "META_MATCH",
            "namespace":                    "YARD::DocstringParser",
            "path":                         "YARD::DocstringParser::META_MATCH",
            "signature":                    "META_MATCH = /^@(!)?((?:\\w\\.?)+)(?:\\s+(.*))?$/i",
            "source":                       "META_MATCH = /^@(!)?((?:\\w\\.?)+)(?:\\s+(.*))?$/i",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/^@(!)?((?:\\w\\.?)+)(?:\\s+(.*))?$/i",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fdocstring_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ADocstringParser%3A%3AMETA_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C","YARD::Handlers::Ruby","YARD::Handlers::NamespaceMissingError","YARD::Handlers::Base","YARD::Handlers::Processor"],
            "current_file_has_comments":    true,
            "docstring":                    "Handlers are called during the data processing part of YARD's\nparsing phase. This allows YARD as well as any custom extension to\nanalyze source and generate {CodeObjects} to be stored for later use.",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/handlers/base.rb"},{"file_line":2,"file_path":"lib/yard/handlers/c/base.rb"},{"file_line":4,"file_path":"lib/yard/handlers/processor.rb"},{"file_line":2,"file_path":"lib/yard/handlers/ruby/base.rb"},{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"},{"file_line":2,"file_path":"lib/yard/handlers/ruby/dsl_handler.rb"},{"file_line":2,"file_path":"lib/yard/handlers/c/handler_methods.rb"},{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"},{"file_line":2,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "Handlers",
            "namespace":                    "YARD",
            "path":                         "YARD::Handlers",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC","YARD%3A%3AHandlers%3A%3ARuby","YARD%3A%3AHandlers%3A%3ANamespaceMissingError","YARD%3A%3AHandlers%3A%3ABase","YARD%3A%3AHandlers%3A%3AProcessor"],
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AHandlers"
        },
        {
            "attributes":                   {"class":{},"instance":{"extra_state":{"write":null,"read":"YARD::Handlers::Base#extra_state"},"parser":{"write":null,"read":"YARD::Handlers::Base#parser"},"namespace":{"write":"YARD::Handlers::Base#namespace=","read":"YARD::Handlers::Base#namespace"},"owner":{"write":"YARD::Handlers::Base#owner=","read":"YARD::Handlers::Base#owner"},"visibility":{"write":"YARD::Handlers::Base#visibility=","read":"YARD::Handlers::Base#visibility"},"scope":{"write":"YARD::Handlers::Base#scope=","read":"YARD::Handlers::Base#scope"},"globals":{"write":null,"read":"YARD::Handlers::Base#globals"},"statement":{"write":null,"read":"YARD::Handlers::Base#statement"}}},
            "children":                     ["YARD::Handlers::Base.clear_subclasses","YARD::Handlers::Base.subclasses","YARD::Handlers::Base.inherited","YARD::Handlers::Base.handles","YARD::Handlers::Base.handles?","YARD::Handlers::Base.handlers","YARD::Handlers::Base.namespace_only","YARD::Handlers::Base.namespace_only?","YARD::Handlers::Base.in_file","YARD::Handlers::Base.matches_file?","YARD::Handlers::Base.process","YARD::Handlers::Base#initialize","YARD::Handlers::Base#process","YARD::Handlers::Base#parse_block","YARD::Handlers::Base#parser","YARD::Handlers::Base#statement","YARD::Handlers::Base#owner=","YARD::Handlers::Base#owner","YARD::Handlers::Base#namespace=","YARD::Handlers::Base#namespace","YARD::Handlers::Base#visibility=","YARD::Handlers::Base#visibility","YARD::Handlers::Base#scope=","YARD::Handlers::Base#scope","YARD::Handlers::Base#globals","YARD::Handlers::Base#extra_state","YARD::Handlers::Base#push_state","YARD::Handlers::Base#register","YARD::Handlers::Base#register_ensure_loaded","YARD::Handlers::Base#register_file_info","YARD::Handlers::Base#register_docstring","YARD::Handlers::Base#register_group","YARD::Handlers::Base#register_transitive_tags","YARD::Handlers::Base#register_source","YARD::Handlers::Base#register_visibility","YARD::Handlers::Base#register_module_function","YARD::Handlers::Base#register_dynamic","YARD::Handlers::Base#ensure_loaded!","YARD::Handlers::Base#call_params","YARD::Handlers::Base#caller_method"],
            "current_file_has_comments":    true,
            "docstring":                    "Handlers are pluggable semantic parsers for YARD's code generation\nphase. They allow developers to control what information gets\ngenerated by YARD, giving them the ability to, for instance, document\nany Ruby DSLs that a customized framework may use. A good example\nof this would be the ability to document and generate meta data for\nthe 'describe' declaration of the RSpec testing framework by simply\nadding a handler for such a keyword. Similarly, any Ruby API that\ntakes advantage of class level declarations could add these to the\ndocumentation in a very explicit format by treating them as first-\nclass objects in any outputted documentation.\n\n== Overview of a Typical Handler Scenario\n\nGenerally, a handler class will declare a set of statements which\nit will handle using the {handles} class declaration. It will then\nimplement the {#process} method to do the work. The processing would\nusually involve the manipulation of the {#namespace}, {#owner}\n{CodeObjects::Base code objects} or the creation of new ones, in\nwhich case they should be registered by {#register}, a method that\nsets some basic attributes for the new objects.\n\nHandlers are usually simple and take up to a page of code to process\nand register a new object or add new attributes to the current +namespace+.\n\n== Setting up a Handler for Use\n\nA Handler is automatically registered when it is subclassed from the\nbase class. The only other thing that needs to be done is to specify\nwhich statement the handler will process. This is done with the +handles+\ndeclaration, taking either a {Parser::Ruby::Legacy::RubyToken}, {String} or `Regexp`.\nHere is a simple example which processes module statements.\n\n  class MyModuleHandler < YARD::Handlers::Base\n    handles TkMODULE\n\n    def process\n      # do something\n    end\n  end\n\n== Processing Handler Data\n\nThe goal of a specific handler is really up to the developer, and as\nsuch there is no real guideline on how to process the data. However,\nit is important to know where the data is coming from to be able to use\nit.\n\n=== +statement+ Attribute\n\nThe +statement+ attribute pertains to the {Parser::Ruby::Legacy::Statement} object\ncontaining a set of tokens parsed in by the parser. This is the main set\nof data to be analyzed and processed. The comments attached to the statement\ncan be accessed by the {Parser::Ruby::Legacy::Statement#comments} method, but generally\nthe data to be processed will live in the +tokens+ attribute. This list\ncan be converted to a +String+ using +#to_s+ to parse the data with\nregular expressions (or other text processing mechanisms), if needed.\n\n=== +namespace+ Attribute\n\nThe +namespace+ attribute is a {CodeObjects::NamespaceObject namespace object}\nwhich represents the current namespace that the parser is in. For instance:\n\n  module SomeModule\n    class MyClass\n      def mymethod; end\n    end\n  end\n\nIf a handler was to parse the 'class MyClass' statement, it would\nbe necessary to know that it belonged inside the SomeModule module.\nThis is the value that +namespace+ would return when processing such\na statement. If the class was then entered and another handler was\ncalled on the method, the +namespace+ would be set to the 'MyClass'\ncode object.\n\n=== +owner+ Attribute\n\nThe +owner+ attribute is similar to the +namespace+ attribute in that\nit also follows the scope of the code during parsing. However, a namespace\nobject is loosely defined as a module or class and YARD has the ability\nto parse beyond module and class blocks (inside methods, for instance),\nso the +owner+ attribute would not be limited to modules and classes.\n\nTo put this into context, the example from above will be used. If a method\nhandler was added to the mix and decided to parse inside the method body,\nthe +owner+ would be set to the method object but the namespace would remain\nset to the class. This would allow the developer to process any method\ndefinitions set inside a method (def x; def y; 2 end end) by adding them\nto the correct namespace (the class, not the method).\n\nIn summary, the distinction between +namespace+ and +owner+ can be thought\nof as the difference between first-class Ruby objects (namespaces) and\nsecond-class Ruby objects (methods).\n\n=== +visibility+ and +scope+ Attributes\n\nMainly needed for parsing methods, the +visibility+ and +scope+ attributes\nrefer to the public/protected/private and class/instance values (respectively)\nof the current parsing position.\n\n== Parsing Blocks in Statements\n\nIn addition to parsing a statement and creating new objects, some\nhandlers may wish to continue parsing the code inside the statement's\nblock (if there is one). In this context, a block means the inside\nof any statement, be it class definition, module definition, if\nstatement or classic 'Ruby block'.\n\nFor example, a class statement would be \"class MyClass\" and the block\nwould be a list of statements including the method definitions inside\nthe class. For a class handler, the programmer would execute the\n{#parse_block} method to continue parsing code inside the block, with\nthe +namespace+ now pointing to the class object the handler created.\n\nYARD has the ability to continue into any block: class, module, method,\neven if statements. For this reason, the block parsing method must be\ninvoked explicitly out of efficiency sake.",
            "dynamic":                      true,
            "files":                        [{"file_line":142,"file_path":"lib/yard/handlers/base.rb"}],
            "groups":                       ["Macro Support"],
            "instance_mixins":              ["YARD::Parser","YARD::CodeObjects"],
            "name":                         "Base",
            "namespace":                    "YARD::Handlers",
            "path":                         "YARD::Handlers::Base",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ABase.clear_subclasses","YARD%3A%3AHandlers%3A%3ABase.subclasses","YARD%3A%3AHandlers%3A%3ABase.inherited","YARD%3A%3AHandlers%3A%3ABase.handles","YARD%3A%3AHandlers%3A%3ABase.handles%3F","YARD%3A%3AHandlers%3A%3ABase.handlers","YARD%3A%3AHandlers%3A%3ABase.namespace_only","YARD%3A%3AHandlers%3A%3ABase.namespace_only%3F","YARD%3A%3AHandlers%3A%3ABase.in_file","YARD%3A%3AHandlers%3A%3ABase.matches_file%3F","YARD%3A%3AHandlers%3A%3ABase.process","YARD%3A%3AHandlers%3A%3ABase%23initialize","YARD%3A%3AHandlers%3A%3ABase%23process","YARD%3A%3AHandlers%3A%3ABase%23parse_block","YARD%3A%3AHandlers%3A%3ABase%23parser","YARD%3A%3AHandlers%3A%3ABase%23statement","YARD%3A%3AHandlers%3A%3ABase%23owner%3D","YARD%3A%3AHandlers%3A%3ABase%23owner","YARD%3A%3AHandlers%3A%3ABase%23namespace%3D","YARD%3A%3AHandlers%3A%3ABase%23namespace","YARD%3A%3AHandlers%3A%3ABase%23visibility%3D","YARD%3A%3AHandlers%3A%3ABase%23visibility","YARD%3A%3AHandlers%3A%3ABase%23scope%3D","YARD%3A%3AHandlers%3A%3ABase%23scope","YARD%3A%3AHandlers%3A%3ABase%23globals","YARD%3A%3AHandlers%3A%3ABase%23extra_state","YARD%3A%3AHandlers%3A%3ABase%23push_state","YARD%3A%3AHandlers%3A%3ABase%23register","YARD%3A%3AHandlers%3A%3ABase%23register_ensure_loaded","YARD%3A%3AHandlers%3A%3ABase%23register_file_info","YARD%3A%3AHandlers%3A%3ABase%23register_docstring","YARD%3A%3AHandlers%3A%3ABase%23register_group","YARD%3A%3AHandlers%3A%3ABase%23register_transitive_tags","YARD%3A%3AHandlers%3A%3ABase%23register_source","YARD%3A%3AHandlers%3A%3ABase%23register_visibility","YARD%3A%3AHandlers%3A%3ABase%23register_module_function","YARD%3A%3AHandlers%3A%3ABase%23register_dynamic","YARD%3A%3AHandlers%3A%3ABase%23ensure_loaded%21","YARD%3A%3AHandlers%3A%3ABase%23call_params","YARD%3A%3AHandlers%3A%3ABase%23caller_method"],
            "y_ld:files":                   [{"file_line":142,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":566,"file_path":"lib/yard/handlers/base.rb"}],
            "group":                        "Macro Support",
            "name":                         "call_params",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#call_params",
            "scope":                        "instance",
            "signature":                    "def call_params",
            "source":                       "def call_params\n  raise NotImplementedError\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":566,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23call_params"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":575,"file_path":"lib/yard/handlers/base.rb"}],
            "group":                        "Macro Support",
            "name":                         "caller_method",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#caller_method",
            "scope":                        "instance",
            "signature":                    "def caller_method",
            "source":                       "def caller_method\n  raise NotImplementedError\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":575,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23caller_method"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Ensures that a specific +object+ has been parsed and loaded into the\nregistry. This is necessary when adding data to a namespace, for instance,\nsince the namespace may not have been processed yet (it can be located\nin a file that has not been handled).\n\nCalling this method defers the handler until all other files have been\nprocessed. If the object gets resolved, the rest of the handler continues,\notherwise an exception is raised.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":543,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "ensure_loaded!",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"1","parm_name":"max_retries"}],
            "path":                         "YARD::Handlers::Base#ensure_loaded!",
            "scope":                        "instance",
            "signature":                    "def ensure_loaded!(object, max_retries = 1)",
            "source":                       "def ensure_loaded!(object, max_retries = 1)\n  return if object.root?\n  return object unless object.is_a?(Proxy)\n\n  retries = 0\n  while object.is_a?(Proxy)\n    if retries <= max_retries\n      log.debug \"Missing object #{object} in file `#{parser.file}', moving it to the back of the line.\"\n      parser.parse_remaining_files\n    else\n      raise NamespaceMissingError, object\n    end\n    retries += 1\n  end\n  object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":543,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23ensure_loaded%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute extra_state",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":326,"file_path":"lib/yard/handlers/base.rb"},{"file_line":341,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "extra_state",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#extra_state",
            "scope":                        "instance",
            "signature":                    "def extra_state",
            "source":                       "def extra_state\n  @extra_state\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":326,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":341,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23extra_state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute globals",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":323,"file_path":"lib/yard/handlers/base.rb"},{"file_line":340,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "globals",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#globals",
            "scope":                        "instance",
            "signature":                    "def globals",
            "source":                       "def globals\n  @globals\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":323,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":340,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23globals"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":269,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"source_parser"},{"parm_type":null,"parm_name":"stmt"}],
            "path":                         "YARD::Handlers::Base#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source_parser, stmt)",
            "source":                       "def initialize(source_parser, stmt)\n  @parser = source_parser\n  @statement = stmt\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":269,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":314,"file_path":"lib/yard/handlers/base.rb"},{"file_line":334,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "namespace",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":314,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":334,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23namespace"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the attribute namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":314,"file_path":"lib/yard/handlers/base.rb"},{"file_line":335,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "namespace=",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::Handlers::Base#namespace=",
            "scope":                        "instance",
            "signature":                    "def namespace=(value)",
            "source":                       "def namespace=(value)\n  @namespace = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":314,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":335,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23namespace%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute owner",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":311,"file_path":"lib/yard/handlers/base.rb"},{"file_line":332,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "owner",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#owner",
            "scope":                        "instance",
            "signature":                    "def owner",
            "source":                       "def owner\n  @owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":311,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":332,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23owner"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the attribute owner",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":311,"file_path":"lib/yard/handlers/base.rb"},{"file_line":333,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "owner=",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::Handlers::Base#owner=",
            "scope":                        "instance",
            "signature":                    "def owner=(value)",
            "source":                       "def owner=(value)\n  @owner = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":311,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":333,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23owner%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the semantic \"block\" contained in the statement node.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":297,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "parse_block",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Handlers::Base#parse_block",
            "scope":                        "instance",
            "signature":                    "def parse_block(*args)",
            "source":                       "def parse_block(*args)\n  raise NotImplementedError, \"#{self} did not implement a #parse_block method for handling\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":297,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23parse_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":303,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "parser",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#parser",
            "scope":                        "instance",
            "signature":                    "def parser",
            "source":                       "def parser\n  @parser\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":303,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23parser"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The main handler method called by the parser on a statement\nthat matches the {handles} declaration.\n\nSubclasses should override this method to provide the handling\nfunctionality for the class.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":290,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "def process\n  raise NotImplementedError, \"#{self} did not implement a #process method for handling.\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":290,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23process"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Executes a given block with specific state values for {#owner},\n{#namespace} and {#scope}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":355,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "push_state",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Handlers::Base#push_state",
            "scope":                        "instance",
            "signature":                    "def push_state(opts = {}, &block)",
            "source":                       "def push_state(opts = {}, &block)\n  opts = {\n    :namespace => namespace,\n    :scope => :instance,\n    :owner => owner || namespace\n  }.update(opts)\n\n  ns, vis, sc, oo = namespace, visibility, scope, owner\n  self.namespace = opts[:namespace]\n  self.visibility = :public\n  self.scope = opts[:scope]\n  self.owner = opts[:owner]\n\n  yield\n\n  self.namespace = ns\n  self.visibility = vis\n  self.scope = sc\n  self.owner = oo\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":355,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23push_state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Do some post processing on a list of code objects.\nAdds basic attributes to the list of objects like\nthe filename, line number, {CodeObjects::Base#dynamic},\nsource code and {CodeObjects::Base#docstring},\nbut only if they don't exist.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":388,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"*objects"}],
            "path":                         "YARD::Handlers::Base#register",
            "scope":                        "instance",
            "signature":                    "def register(*objects)",
            "source":                       "def register(*objects)\n  objects.flatten.each do |object|\n    next unless object.is_a?(CodeObjects::Base)\n    register_ensure_loaded(object)\n    yield(object) if block_given?\n    register_file_info(object)\n    register_source(object)\n    register_visibility(object)\n    register_docstring(object)\n    register_group(object)\n    register_dynamic(object)\n    register_module_function(object)\n  end\n  objects.size == 1 ? objects.first : objects\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":388,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers any docstring found for the object and expands macros",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":432,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_docstring",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"statement.comments","parm_name":"docstring"},{"parm_type":"statement","parm_name":"stmt"}],
            "path":                         "YARD::Handlers::Base#register_docstring",
            "scope":                        "instance",
            "signature":                    "def register_docstring(object, docstring = statement.comments, stmt = statement)",
            "source":                       "def register_docstring(object, docstring = statement.comments, stmt = statement)\n  docstring = docstring.join(\"\\n\") if Array === docstring\n  parser = Docstring.parser\n  parser.parse(docstring || \"\", object, self)\n\n  if object && docstring\n    object.docstring = parser.to_docstring\n\n    # Add hash_flag/line_range\n    if stmt\n      object.docstring.hash_flag = stmt.comments_hash_flag\n      object.docstring.line_range = stmt.comments_range\n    end\n  end\n\n  register_transitive_tags(object)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":432,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_docstring"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers the object as dynamic if the object is defined inside\na method or block (owner != namespace)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":519,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_dynamic",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::Base#register_dynamic",
            "scope":                        "instance",
            "signature":                    "def register_dynamic(object)",
            "source":                       "def register_dynamic(object)\n  object.dynamic = true if owner != namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":519,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_dynamic"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Ensures that the object's namespace is loaded before attaching it\nto the namespace.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":410,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_ensure_loaded",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::Base#register_ensure_loaded",
            "scope":                        "instance",
            "signature":                    "def register_ensure_loaded(object)",
            "source":                       "def register_ensure_loaded(object)\n  begin\n    ensure_loaded!(object.namespace)\n    object.namespace.children << object\n  rescue NamespaceMissingError\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":410,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_ensure_loaded"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers the file/line of the declaration with the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":423,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_file_info",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"parser.file","parm_name":"file"},{"parm_type":"statement.line","parm_name":"line"},{"parm_type":"statement.comments","parm_name":"comments"}],
            "path":                         "YARD::Handlers::Base#register_file_info",
            "scope":                        "instance",
            "signature":                    "def register_file_info(object, file = parser.file, line = statement.line, comments = statement.comments)",
            "source":                       "def register_file_info(object, file = parser.file, line = statement.line, comments = statement.comments)\n  object.add_file(file, line, comments)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":423,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_file_info"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers the object as being inside a specific group",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":455,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_group",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"extra_state.group","parm_name":"group"}],
            "path":                         "YARD::Handlers::Base#register_group",
            "scope":                        "instance",
            "signature":                    "def register_group(object, group = extra_state.group)",
            "source":                       "def register_group(object, group = extra_state.group)\n  if group\n    unless object.namespace.is_a?(Proxy)\n      object.namespace.groups |= [group]\n    end\n    object.group = group\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":455,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_group"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers the same method information on the module function, if\nthe object was defined as a module function.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":505,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_module_function",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::Base#register_module_function",
            "scope":                        "instance",
            "signature":                    "def register_module_function(object)",
            "source":                       "def register_module_function(object)\n  return unless object.is_a?(MethodObject)\n  return unless object.module_function?\n  modobj = MethodObject.new(object.namespace, object.name)\n  object.copy_to(modobj)\n  modobj.visibility = :private\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":505,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_module_function"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":482,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_source",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"statement","parm_name":"source"},{"parm_type":"parser.parser_type","parm_name":"type"}],
            "path":                         "YARD::Handlers::Base#register_source",
            "scope":                        "instance",
            "signature":                    "def register_source(object, source = statement, type = parser.parser_type)",
            "source":                       "def register_source(object, source = statement, type = parser.parser_type)\n  return unless object.is_a?(MethodObject)\n  object.source ||= source\n  object.source_type = type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":482,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_source"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers any transitive tags from the namespace on the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":469,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_transitive_tags",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::Base#register_transitive_tags",
            "scope":                        "instance",
            "signature":                    "def register_transitive_tags(object)",
            "source":                       "def register_transitive_tags(object)\n  return unless object\n  Tags::Library.transitive_tags.each do |tag|\n    next if object.namespace.is_a?(Proxy)\n    next unless object.namespace.has_tag?(tag)\n    next if object.has_tag?(tag)\n    object.docstring.add_tag(*object.namespace.tags(tag))\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":469,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_transitive_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers visibility on a method object. If the object does not\nrespond to setting visibility, nothing is done.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":494,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "register_visibility",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"self.visibility","parm_name":"visibility"}],
            "path":                         "YARD::Handlers::Base#register_visibility",
            "scope":                        "instance",
            "signature":                    "def register_visibility(object, visibility = self.visibility)",
            "source":                       "def register_visibility(object, visibility = self.visibility)\n  return unless object.respond_to?(:visibility=)\n  object.visibility = visibility\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":494,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23register_visibility"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute scope",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":320,"file_path":"lib/yard/handlers/base.rb"},{"file_line":338,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#scope",
            "scope":                        "instance",
            "signature":                    "def scope",
            "source":                       "def scope\n  @scope\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":320,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":338,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23scope"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the attribute scope",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":320,"file_path":"lib/yard/handlers/base.rb"},{"file_line":339,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "scope=",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::Handlers::Base#scope=",
            "scope":                        "instance",
            "signature":                    "def scope=(value)",
            "source":                       "def scope=(value)\n  @scope = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":320,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":339,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23scope%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":308,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "statement",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#statement",
            "scope":                        "instance",
            "signature":                    "def statement",
            "source":                       "def statement\n  @statement\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":308,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23statement"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the value of attribute visibility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":317,"file_path":"lib/yard/handlers/base.rb"},{"file_line":336,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "visibility",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base#visibility",
            "scope":                        "instance",
            "signature":                    "def visibility",
            "source":                       "def visibility\n  @visibility\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":317,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":336,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23visibility"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the attribute visibility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":317,"file_path":"lib/yard/handlers/base.rb"},{"file_line":337,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "visibility=",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"v"}],
            "path":                         "YARD::Handlers::Base#visibility=",
            "scope":                        "instance",
            "signature":                    "def visibility=(value)",
            "source":                       "def visibility=(value)\n  @visibility = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":317,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"},{"file_line":337,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase%23visibility%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Clear all registered subclasses. Testing purposes only",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "clear_subclasses",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base.clear_subclasses",
            "scope":                        "class",
            "signature":                    "def clear_subclasses",
            "source":                       "def clear_subclasses\n  @@subclasses = []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.clear_subclasses"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":204,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "handlers",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base.handlers",
            "scope":                        "class",
            "signature":                    "def handlers",
            "source":                       "def handlers\n  @handlers ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":204,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.handlers"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares the statement type which will be processed\nby this handler.\n\nA match need not be unique to a handler. Multiple\nhandlers can process the same statement. However,\nin this case, care should be taken to make sure that\n{#parse_block} would only be executed by one of\nthe handlers, otherwise the same code will be parsed\nmultiple times and slow YARD down.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":185,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "handles",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"*matches"}],
            "path":                         "YARD::Handlers::Base.handles",
            "scope":                        "class",
            "signature":                    "def handles(*matches)",
            "source":                       "def handles(*matches)\n  (@handlers ||= []).push(*matches)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":185,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.handles"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This class is implemented by {Ruby::Base} and {Ruby::Legacy::Base}.\nTo implement a base handler class for another language, implement\nthis method to return true if the handler should process the given\nstatement object. Use {handlers} to enumerate the matchers declared\nfor the handler class.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":198,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "handles?",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Handlers::Base.handles?",
            "scope":                        "class",
            "signature":                    "def handles?(statement)",
            "source":                       "def handles?(statement)\n  raise NotImplementedError, \"override #handles? in a subclass\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":198,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.handles%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares that a handler should only be called when inside a filename\nby its basename or a regex match for the full path.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":228,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "in_file",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Handlers::Base.in_file",
            "scope":                        "class",
            "signature":                    "def in_file(filename)",
            "source":                       "def in_file(filename)\n  (@in_files ||= []) << filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":228,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.in_file"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "inherited",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"subclass"}],
            "path":                         "YARD::Handlers::Base.inherited",
            "scope":                        "class",
            "signature":                    "def inherited(subclass)",
            "source":                       "def inherited(subclass)\n  @@subclasses ||= []\n  @@subclasses << subclass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.inherited"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":235,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "matches_file?",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Handlers::Base.matches_file?",
            "scope":                        "class",
            "signature":                    "def matches_file?(filename)",
            "source":                       "def matches_file?(filename)\n  @in_files ||= nil # avoid ruby warnings\n  return true unless @in_files\n  @in_files.any? do |in_file|\n    case in_file\n    when String\n      File.basename(filename) == in_file\n    when Regexp\n      filename =~ in_file\n    else\n      true\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":235,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.matches_file%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares that the handler should only be called when inside a\n{CodeObjects::NamespaceObject}, not a method body.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":212,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "namespace_only",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base.namespace_only",
            "scope":                        "class",
            "signature":                    "def namespace_only",
            "source":                       "def namespace_only\n  @namespace_only = true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":212,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.namespace_only"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":218,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "namespace_only?",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base.namespace_only?",
            "scope":                        "class",
            "signature":                    "def namespace_only?",
            "source":                       "def namespace_only?\n  (@namespace_only ||= false) ? true : false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":218,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.namespace_only%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Generates a +process+ method, equivalent to +def process; ... end+.\nBlocks defined with this syntax will be wrapped inside an anonymous\nmodule so that the handler class can be extended with mixins that\noverride the +process+ method without alias chaining.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":262,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Handlers::Base.process",
            "scope":                        "class",
            "signature":                    "def process(&block)",
            "source":                       "def process(&block)\n  mod = Module.new\n  mod.send(:define_method, :process, &block)\n  include mod\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":262,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.process"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns all registered handler subclasses.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":158,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "subclasses",
            "namespace":                    "YARD::Handlers::Base",
            "path":                         "YARD::Handlers::Base.subclasses",
            "scope":                        "class",
            "signature":                    "def subclasses",
            "source":                       "def subclasses\n  @@subclasses ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":158,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ABase.subclasses"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::Base","YARD::Handlers::C::InitHandler","YARD::Handlers::C::PathHandler","YARD::Handlers::C::MixinHandler","YARD::Handlers::C::ClassHandler","YARD::Handlers::C::AliasHandler","YARD::Handlers::C::ModuleHandler","YARD::Handlers::C::StructHandler","YARD::Handlers::C::SymbolHandler","YARD::Handlers::C::MethodHandler","YARD::Handlers::C::HandlerMethods","YARD::Handlers::C::ConstantHandler","YARD::Handlers::C::AttributeHandler","YARD::Handlers::C::OverrideCommentHandler"],
            "current_file_has_comments":    true,
            "docstring":                    "CRuby Handlers",
            "dynamic":                      true,
            "files":                        [{"file_line":63,"file_path":"lib/yard/autoload.rb"},{"file_line":3,"file_path":"lib/yard/handlers/c/base.rb"},{"file_line":3,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "C",
            "namespace":                    "YARD::Handlers",
            "path":                         "YARD::Handlers::C",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3ABase","YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler","YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler","YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods","YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler","YARD%3A%3AHandlers%3A%3AC%3A%3AOverrideCommentHandler"],
            "y_ld:files":                   [{"file_line":63,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::AliasHandler::MATCH","YARD::Handlers::C::AliasHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/alias_handler.rb"}],
            "name":                         "AliasHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::AliasHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Falias_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":9,"file_path":"lib/yard/handlers/c/alias_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::AliasHandler",
            "path":                         "YARD::Handlers::C::AliasHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH) do |var_name, new_name, old_name|\n    var_name = \"rb_cObject\" if var_name == \"rb_mKernel\"\n    handle_alias(var_name, new_name, old_name)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Falias_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/alias_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::AliasHandler",
            "path":                         "YARD::Handlers::C::AliasHandler::MATCH",
            "signature":                    "MATCH = %r{rb_define_alias",
            "source":                       "MATCH = %r{rb_define_alias\n\\s*\\(\\s*([\\w\\.]+),\n\\s*\"([^\"]+)\",\n\\s*\"([^\"]+)\"\\s*\\)}xm",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{rb_define_alias\n\\s*\\(\\s*([\\w\\.]+),\n\\s*\"([^\"]+)\",\n\\s*\"([^\"]+)\"\\s*\\)}xm",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Falias_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAliasHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::AttributeHandler::MATCH","YARD::Handlers::C::AttributeHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/attribute_handler.rb"}],
            "name":                         "AttributeHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::AttributeHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fattribute_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/c/attribute_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::AttributeHandler",
            "path":                         "YARD::Handlers::C::AttributeHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return if ToplevelStatement == statement\n  return if Comment === statement && statement.type != :multi\n  statement.source.scan(MATCH) do |var_name, name, read, write|\n    handle_attribute(var_name, name, read, write)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fattribute_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/attribute_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::AttributeHandler",
            "path":                         "YARD::Handlers::C::AttributeHandler::MATCH",
            "signature":                    "MATCH = %r{rb_define_attr\\s*\\(\\s*([\\w\\.]+),\\s*\"([^\"]+)\",\\s*(0|1)\\s*,\\s*(0|1)\\s*\\)}",
            "source":                       "MATCH = %r{rb_define_attr\\s*\\(\\s*([\\w\\.]+),\\s*\"([^\"]+)\",\\s*(0|1)\\s*,\\s*(0|1)\\s*\\)}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{rb_define_attr\\s*\\(\\s*([\\w\\.]+),\\s*\"([^\"]+)\",\\s*(0|1)\\s*,\\s*(0|1)\\s*\\)}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fattribute_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AAttributeHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::Base.handles?","YARD::Handlers::C::Base.statement_class","YARD::Handlers::C::Base#register_docstring","YARD::Handlers::C::Base#register_file_info","YARD::Handlers::C::Base#register_source","YARD::Handlers::C::Base#register_visibility","YARD::Handlers::C::Base#symbols","YARD::Handlers::C::Base#override_comments","YARD::Handlers::C::Base#namespace_for_variable","YARD::Handlers::C::Base#namespaces","YARD::Handlers::C::Base#processed_files","YARD::Handlers::C::Base#parse_block","YARD::Handlers::C::Base#process_file","YARD::Handlers::C::Base#remove_var_prefix"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/handlers/c/base.rb"}],
            "groups":                       ["Registering objects","Looking up Symbol and Var Values","Parsing an Inner Block","Processing other files"],
            "instance_mixins":              ["YARD::Handlers::C::HandlerMethods","YARD::Parser::C"],
            "name":                         "Base",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::Base",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3ABase.handles%3F","YARD%3A%3AHandlers%3A%3AC%3A%3ABase.statement_class","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_docstring","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_file_info","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_source","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_visibility","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23symbols","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23override_comments","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23namespace_for_variable","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23namespaces","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23processed_files","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23parse_block","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23process_file","YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23remove_var_prefix"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Looking up Symbol and Var Values",
            "name":                         "namespace_for_variable",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"var"}],
            "path":                         "YARD::Handlers::C::Base#namespace_for_variable",
            "scope":                        "instance",
            "signature":                    "def namespace_for_variable(var)",
            "source":                       "def namespace_for_variable(var)\n  return namespaces[var] if namespaces[var]\n  var = remove_var_prefix(var)\n  var.empty? ? nil : P(var)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23namespace_for_variable"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Looking up Symbol and Var Values",
            "name":                         "namespaces",
            "namespace":                    "YARD::Handlers::C::Base",
            "path":                         "YARD::Handlers::C::Base#namespaces",
            "scope":                        "instance",
            "signature":                    "def namespaces",
            "source":                       "def namespaces\n  globals.cruby_namespaces ||= {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23namespaces"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Looking up Symbol and Var Values",
            "name":                         "override_comments",
            "namespace":                    "YARD::Handlers::C::Base",
            "path":                         "YARD::Handlers::C::Base#override_comments",
            "scope":                        "instance",
            "signature":                    "def override_comments",
            "source":                       "def override_comments\n  globals.cruby_override_comments ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23override_comments"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Parsing an Inner Block",
            "name":                         "parse_block",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Handlers::C::Base#parse_block",
            "scope":                        "instance",
            "signature":                    "def parse_block(opts = {})",
            "source":                       "def parse_block(opts = {})\n  return if !statement.block || statement.block.empty?\n  push_state(opts) do\n    parser.process(statement.block)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23parse_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":87,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Processing other files",
            "name":                         "process_file",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"file"},{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::C::Base#process_file",
            "scope":                        "instance",
            "signature":                    "def process_file(file, object)",
            "source":                       "def process_file(file, object)\n  file = File.cleanpath(File.relative_path(statement.file, file))\n  return if processed_files[file]\n  processed_files[file] = file\n  begin\n    log.debug \"Processing embedded call to C source #{file}...\"\n    globals.ordered_parser.files.delete(file) if globals.ordered_parser\n    parser.process(Parser::C::CParser.new(File.read(file), file).parse)\n  rescue Errno::ENOENT\n    log.warn \"Missing source file `#{file}' when parsing #{object}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":87,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23process_file"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Looking up Symbol and Var Values",
            "name":                         "processed_files",
            "namespace":                    "YARD::Handlers::C::Base",
            "path":                         "YARD::Handlers::C::Base#processed_files",
            "scope":                        "instance",
            "signature":                    "def processed_files",
            "source":                       "def processed_files\n  globals.cruby_processed_files ||= {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23processed_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Registering objects",
            "name":                         "register_docstring",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"nil","parm_name":"docstring"},{"parm_type":"nil","parm_name":"stmt"}],
            "path":                         "YARD::Handlers::C::Base#register_docstring",
            "scope":                        "instance",
            "signature":                    "def register_docstring(object, docstring = nil, stmt = nil)",
            "source":                       "def register_docstring(object, docstring = nil, stmt = nil)\n  super(object, docstring, stmt) if docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_docstring"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Registering objects",
            "name":                         "register_file_info",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"nil","parm_name":"file"},{"parm_type":"nil","parm_name":"line"},{"parm_type":"nil","parm_name":"comments"}],
            "path":                         "YARD::Handlers::C::Base#register_file_info",
            "scope":                        "instance",
            "signature":                    "def register_file_info(object, file = nil, line = nil, comments = nil)",
            "source":                       "def register_file_info(object, file = nil, line = nil, comments = nil)\n  super(object, file, line, comments) if file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_file_info"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Registering objects",
            "name":                         "register_source",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"nil","parm_name":"source"},{"parm_type":"nil","parm_name":"type"}],
            "path":                         "YARD::Handlers::C::Base#register_source",
            "scope":                        "instance",
            "signature":                    "def register_source(object, source = nil, type = nil)",
            "source":                       "def register_source(object, source = nil, type = nil)\n  super(object, source, type) if source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_source"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Registering objects",
            "name":                         "register_visibility",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"nil","parm_name":"visibility"}],
            "path":                         "YARD::Handlers::C::Base#register_visibility",
            "scope":                        "instance",
            "signature":                    "def register_visibility(object, visibility = nil)",
            "source":                       "def register_visibility(object, visibility = nil)\n  super(object, visibility) if visibility\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23register_visibility"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":104,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Processing other files",
            "name":                         "remove_var_prefix",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"var"}],
            "path":                         "YARD::Handlers::C::Base#remove_var_prefix",
            "scope":                        "instance",
            "signature":                    "def remove_var_prefix(var)",
            "source":                       "def remove_var_prefix(var)\n  var.gsub(/^rb_[mc]|^[a-z_]+/, '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":104,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23remove_var_prefix"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/handlers/c/base.rb"}],
            "group":                        "Looking up Symbol and Var Values",
            "name":                         "symbols",
            "namespace":                    "YARD::Handlers::C::Base",
            "path":                         "YARD::Handlers::C::Base#symbols",
            "scope":                        "instance",
            "signature":                    "def symbols",
            "source":                       "def symbols\n  globals.cruby_symbols ||= {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase%23symbols"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/handlers/c/base.rb"}],
            "name":                         "handles?",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"},{"parm_type":null,"parm_name":"processor"}],
            "path":                         "YARD::Handlers::C::Base.handles?",
            "scope":                        "class",
            "signature":                    "def self.handles?(statement, processor)",
            "source":                       "def self.handles?(statement, processor)\n  processor.globals.cruby_processed_files ||= {}\n  processor.globals.cruby_processed_files[processor.file] = true\n\n  if statement.respond_to? :declaration\n    src = statement.declaration\n  else\n    src = statement.source\n  end\n\n  handlers.any? do |a_handler|\n    statement_class >= statement.class &&\n      case a_handler\n      when String\n        src == a_handler\n      when Regexp\n        src =~ a_handler\n      end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase.handles%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/handlers/c/base.rb"}],
            "name":                         "statement_class",
            "namespace":                    "YARD::Handlers::C::Base",
            "parameters":                   [{"parm_type":"nil","parm_name":"type"}],
            "path":                         "YARD::Handlers::C::Base.statement_class",
            "scope":                        "class",
            "signature":                    "def self.statement_class(type = nil)",
            "source":                       "def self.statement_class(type = nil)\n  type ? @statement_class = type : (@statement_class || Statement)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ABase.statement_class"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::ClassHandler::MATCH1","YARD::Handlers::C::ClassHandler::MATCH2","YARD::Handlers::C::ClassHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/class_handler.rb"}],
            "name":                         "ClassHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::ClassHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%3A%3AMATCH1","YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%3A%3AMATCH2","YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fclass_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":18,"file_path":"lib/yard/handlers/c/class_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::ClassHandler",
            "path":                         "YARD::Handlers::C::ClassHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH1) do |var_name, class_name, parent|\n    handle_class(var_name, class_name, parent)\n  end\n  statement.source.scan(MATCH2) do |var_name, in_module, class_name, parent|\n    handle_class(var_name, class_name, parent, in_module)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/class_handler.rb"}],
            "name":                         "MATCH1",
            "namespace":                    "YARD::Handlers::C::ClassHandler",
            "path":                         "YARD::Handlers::C::ClassHandler::MATCH1",
            "signature":                    "MATCH1 = /([\\w\\.]+)\\s* = \\s*(?:rb_define_class|boot_defclass)\\s*",
            "source":                       "MATCH1 = /([\\w\\.]+)\\s* = \\s*(?:rb_define_class|boot_defclass)\\s*\n\\(\n   \\s*\"([\\w:]+)\",\n   \\s*(\\w+|0)\\s*\n\\)/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s* = \\s*(?:rb_define_class|boot_defclass)\\s*\n\\(\n   \\s*\"([\\w:]+)\",\n   \\s*(\\w+|0)\\s*\n\\)/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%3A%3AMATCH1"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/c/class_handler.rb"}],
            "name":                         "MATCH2",
            "namespace":                    "YARD::Handlers::C::ClassHandler",
            "path":                         "YARD::Handlers::C::ClassHandler::MATCH2",
            "signature":                    "MATCH2 = /([\\w\\.]+)\\s* = \\s*rb_define_class_under\\s*",
            "source":                       "MATCH2 = /([\\w\\.]+)\\s* = \\s*rb_define_class_under\\s*\n\\(\n   \\s*(\\w+),\n   \\s*\"(\\w+)\"(?:,\n   \\s*([\\w\\*\\s\\(\\)\\.\\->]+)\\s*)?  # for SWIG\n\\s*\\)/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s* = \\s*rb_define_class_under\\s*\n\\(\n   \\s*(\\w+),\n   \\s*\"(\\w+)\"(?:,\n   \\s*([\\w\\*\\s\\(\\)\\.\\->]+)\\s*)?  # for SWIG\n\\s*\\)/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AClassHandler%3A%3AMATCH2"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::ConstantHandler::MATCH","YARD::Handlers::C::ConstantHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/constant_handler.rb"}],
            "name":                         "ConstantHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::ConstantHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fconstant_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/c/constant_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::ConstantHandler",
            "path":                         "YARD::Handlers::C::ConstantHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH) do |type, var_name, const_name, value|\n    handle_constants(type, var_name, const_name, value)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/constant_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::ConstantHandler",
            "path":                         "YARD::Handlers::C::ConstantHandler::MATCH",
            "signature":                    "MATCH = %r{\\brb_define_((?:readonly_)?variable|(?:global_)?const)",
            "source":                       "MATCH = %r{\\brb_define_((?:readonly_)?variable|(?:global_)?const)\n\\s*\\((?:\\s*(\\w+),)?\\s*\"(\\w+)\",\\s*(.*?)\\s*\\)\\s*;}xm",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{\\brb_define_((?:readonly_)?variable|(?:global_)?const)\n\\s*\\((?:\\s*(\\w+),)?\\s*\"(\\w+)\",\\s*(.*?)\\s*\\)\\s*;}xm",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AConstantHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::HandlerMethods#handle_class","YARD::Handlers::C::HandlerMethods#handle_module","YARD::Handlers::C::HandlerMethods#handle_method","YARD::Handlers::C::HandlerMethods#handle_attribute","YARD::Handlers::C::HandlerMethods#handle_alias","YARD::Handlers::C::HandlerMethods#handle_constants","YARD::Handlers::C::HandlerMethods#find_constant_docstring","YARD::Handlers::C::HandlerMethods#find_method_body"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "instance_mixins":              ["YARD::CodeObjects","YARD::Parser::C"],
            "name":                         "HandlerMethods",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::HandlerMethods",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_class","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_module","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_method","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_attribute","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_alias","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_constants","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23find_constant_docstring","YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23find_method_body"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":96,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "find_constant_docstring",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#find_constant_docstring",
            "scope":                        "instance",
            "signature":                    "def find_constant_docstring(object)",
            "source":                       "def find_constant_docstring(object)\n  comment = nil\n\n  # look inside overrides for declaration value\n  override_comments.each do |name, override_comment|\n    next unless override_comment.file == statement.file\n    just_const_name = name.gsub(/\\A.+::/, '')\n    if object.path == name || object.name.to_s == just_const_name\n      comment = override_comment.source\n      stmt = override_comment\n      break\n    end\n  end\n\n  # use any comments on this statement as a last resort\n  if comment.nil? && statement.comments && statement.comments.source =~ /\\S/\n    comment = statement.comments.source\n    stmt = statement.comments\n  end\n\n  # In the case of rb_define_const, the definition and comment are in\n  # \"/* definition: comment */\" form.  The literal ':' and '\\' characters\n  # can be escaped with a backslash.\n  if comment\n    comment.scan(/\\A\\s*(.*?[^\\s\\\\]):\\s*(.+)/m) do |new_value, new_comment|\n      object.value = new_value.gsub(/\\\\:/, ':')\n      comment = new_comment\n    end\n    register_docstring(object, comment, stmt)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":96,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23find_constant_docstring"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "find_method_body",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"symbol"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#find_method_body",
            "scope":                        "instance",
            "signature":                    "def find_method_body(object, symbol)",
            "source":                       "def find_method_body(object, symbol)\n  file, in_file = statement.file, false\n  if statement.comments && statement.comments.source =~ /\\A\\s*in (\\S+)\\Z/\n    file, in_file = $1, true\n    process_file(file, object)\n  end\n\n  if src_stmt = symbols[symbol]\n    register_file_info(object, src_stmt.file, src_stmt.line, true)\n    register_source(object, src_stmt)\n    unless src_stmt.comments.nil? || src_stmt.comments.source.empty?\n      register_docstring(object, src_stmt.comments.source, src_stmt)\n      return # found docstring\n    end\n  end\n\n  # found source (possibly) but no docstring\n  # so look in overrides\n  override_comments.each do |name, override_comment|\n    next unless override_comment.file == file\n    name = name.gsub(/::([^:]+?)\\Z/, '.\\1')\n    just_method_name = name.gsub(/\\A.+(#|::|\\.)/, '')\n    just_method_name = 'initialize' if just_method_name == 'new'\n    if object.path == name || object.name.to_s == just_method_name\n      register_docstring(object, override_comment.source, override_comment)\n      return\n    end\n  end\n\n  # use any comments on this statement as a last resort\n  if !in_file && statement.comments && statement.comments.source =~ /\\S/\n    register_docstring(object, statement.comments.source, statement)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23find_method_body"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_alias",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"new_name"},{"parm_type":null,"parm_name":"old_name"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_alias",
            "scope":                        "instance",
            "signature":                    "def handle_alias(var_name, new_name, old_name)",
            "source":                       "def handle_alias(var_name, new_name, old_name)\n  namespace = namespace_for_variable(var_name)\n  new_meth, old_meth = new_name.to_sym, old_name.to_sym\n  old_obj = namespace.child(:name => old_meth, :scope => :instance)\n  new_obj = register MethodObject.new(namespace, new_meth, :instance) do |o|\n    register_visibility(o, visibility)\n    register_file_info(o, statement.file, statement.line)\n  end\n\n  if old_obj\n    new_obj.signature = old_obj.signature\n    new_obj.source = old_obj.source\n    new_obj.docstring = old_obj.docstring\n    new_obj.docstring.object = new_obj\n  else\n    new_obj.signature = \"def #{new_meth}\" # this is all we know.\n  end\n\n  namespace.aliases[new_obj] = old_meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_alias"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_attribute",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"read"},{"parm_type":null,"parm_name":"write"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_attribute",
            "scope":                        "instance",
            "signature":                    "def handle_attribute(var_name, name, read, write)",
            "source":                       "def handle_attribute(var_name, name, read, write)\n  values = {:read => read.to_i, :write => write.to_i}\n  {:read => name, :write => \"#{name}=\"}.each do |type, meth_name|\n    next unless values[type] > 0\n    obj = handle_method(:instance, var_name, meth_name, nil)\n    obj.namespace.attributes[:instance][name] ||= SymbolHash[:read => nil, :write => nil]\n    obj.namespace.attributes[:instance][name][type] = obj\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_attribute"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_class",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"class_name"},{"parm_type":null,"parm_name":"parent"},{"parm_type":"nil","parm_name":"in_module"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_class",
            "scope":                        "instance",
            "signature":                    "def handle_class(var_name, class_name, parent, in_module = nil)",
            "source":                       "def handle_class(var_name, class_name, parent, in_module = nil)\n  parent = nil if parent == \"0\"\n  namespace = in_module ? namespace_for_variable(in_module) : Registry.root\n  register ClassObject.new(namespace, class_name) do |obj|\n    if parent\n      parent_class = namespace_for_variable(parent)\n      if parent_class.is_a?(Proxy)\n        obj.superclass = \"::#{parent_class.path}\"\n        obj.superclass.type = :class\n      else\n        obj.superclass = parent_class\n      end\n    end\n    namespaces[var_name] = obj\n    register_file_info(obj, statement.file, statement.line)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_class"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":83,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_constants",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"const_name"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_constants",
            "scope":                        "instance",
            "signature":                    "def handle_constants(type, var_name, const_name, value)",
            "source":                       "def handle_constants(type, var_name, const_name, value)\n  return unless type == 'const'\n  namespace = namespace_for_variable(var_name)\n  register ConstantObject.new(namespace, const_name) do |obj|\n    obj.source_type = :c\n    obj.value = value\n    register_file_info(obj, statement.file, statement.line)\n    find_constant_docstring(obj)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":83,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_constants"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_method",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"scope"},{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"func_name"},{"parm_type":"nil","parm_name":"source_file"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_method",
            "scope":                        "instance",
            "signature":                    "def handle_method(scope, var_name, name, func_name, source_file = nil)",
            "source":                       "def handle_method(scope, var_name, name, func_name, source_file = nil)\n  visibility = :public\n  case scope\n  when \"singleton_method\"; scope = :class\n  when \"module_function\"; scope = :module\n  when \"private_method\"; scope = :instance; visibility = :private\n  else; scope = :instance\n  end\n\n  namespace = namespace_for_variable(var_name)\n  return if namespace.nil? # XXX: raise UndocumentableError might be too noisy.\n  register MethodObject.new(namespace, name, scope) do |obj|\n    register_visibility(obj, visibility)\n    find_method_body(obj, func_name)\n    obj.docstring.add_tag(Tags::Tag.new(:return, '', 'Boolean')) if name =~ /\\?$/\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_method"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/handlers/c/handler_methods.rb"}],
            "name":                         "handle_module",
            "namespace":                    "YARD::Handlers::C::HandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"var_name"},{"parm_type":null,"parm_name":"module_name"},{"parm_type":"nil","parm_name":"in_module"}],
            "path":                         "YARD::Handlers::C::HandlerMethods#handle_module",
            "scope":                        "instance",
            "signature":                    "def handle_module(var_name, module_name, in_module = nil)",
            "source":                       "def handle_module(var_name, module_name, in_module = nil)\n  namespace = in_module ? namespace_for_variable(in_module) : Registry.root\n  register ModuleObject.new(namespace, module_name) do |obj|\n    namespaces[var_name] = obj\n    register_file_info(obj, statement.file, statement.line)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fhandler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AHandlerMethods%23handle_module"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::InitHandler::MATCH","YARD::Handlers::C::InitHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles the Init_Libname() method",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/init_handler.rb"}],
            "name":                         "InitHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::InitHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Finit_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/c/init_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::InitHandler",
            "path":                         "YARD::Handlers::C::InitHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  parse_block\n  ns = namespace_for_variable(statement.declaration[MATCH, 1])\n  if ns.is_a?(YARD::CodeObjects::NamespaceObject) && ns.docstring.blank?\n    if statement.comments\n      register_docstring(ns, statement.comments.source, statement)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Finit_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/c/init_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::InitHandler",
            "path":                         "YARD::Handlers::C::InitHandler::MATCH",
            "signature":                    "MATCH = %r{\\A\\s*(?:static\\s+)?void\\s+[Ii]nit_(\\w+)\\s*}",
            "source":                       "MATCH = %r{\\A\\s*(?:static\\s+)?void\\s+[Ii]nit_(\\w+)\\s*}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{\\A\\s*(?:static\\s+)?void\\s+[Ii]nit_(\\w+)\\s*}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Finit_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AInitHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::MethodHandler::MATCH1","YARD::Handlers::C::MethodHandler::MATCH2","YARD::Handlers::C::MethodHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/method_handler.rb"}],
            "name":                         "MethodHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::MethodHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%3A%3AMATCH1","YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%3A%3AMATCH2","YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmethod_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":21,"file_path":"lib/yard/handlers/c/method_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::MethodHandler",
            "path":                         "YARD::Handlers::C::MethodHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH1) do |type, var_name, name, func_name, param_count|\n    break if var_name == \"ruby_top_self\"\n    break if var_name == \"nstr\"\n    break if var_name == \"envtbl\"\n\n    var_name = \"rb_cObject\" if var_name == \"rb_mKernel\"\n    handle_method(type, var_name, name, func_name)\n  end\n\n  statement.source.scan(MATCH2) do |name, func_name, param_count|\n    handle_method(\"method\", \"rb_mKernel\", name, func_name)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/method_handler.rb"}],
            "name":                         "MATCH1",
            "namespace":                    "YARD::Handlers::C::MethodHandler",
            "path":                         "YARD::Handlers::C::MethodHandler::MATCH1",
            "signature":                    "MATCH1 = %r{rb_define_",
            "source":                       "MATCH1 = %r{rb_define_\n                 (\n singleton_method |\n method           |\n module_function  |\n private_method\n                 )\n                 \\s*\\(\\s*([\\w\\.]+),\n\\s*\"([^\"]+)\",\n\\s*(?:RUBY_METHOD_FUNC\\(|VALUEFUNC\\()?(\\w+)\\)?,\n\\s*(-?\\w+)\\s*\\)}xm",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{rb_define_\n                 (\n singleton_method |\n method           |\n module_function  |\n private_method\n                 )\n                 \\s*\\(\\s*([\\w\\.]+),\n\\s*\"([^\"]+)\",\n\\s*(?:RUBY_METHOD_FUNC\\(|VALUEFUNC\\()?(\\w+)\\)?,\n\\s*(-?\\w+)\\s*\\)}xm",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%3A%3AMATCH1"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/handlers/c/method_handler.rb"}],
            "name":                         "MATCH2",
            "namespace":                    "YARD::Handlers::C::MethodHandler",
            "path":                         "YARD::Handlers::C::MethodHandler::MATCH2",
            "signature":                    "MATCH2 = %r{rb_define_global_function\\s*\\(",
            "source":                       "MATCH2 = %r{rb_define_global_function\\s*\\(\n\\s*\"([^\"]+)\",\n\\s*(?:RUBY_METHOD_FUNC\\(|VALUEFUNC\\()?(\\w+)\\)?,\n\\s*(-?\\w+)\\s*\\)}xm",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{rb_define_global_function\\s*\\(\n\\s*\"([^\"]+)\",\n\\s*(?:RUBY_METHOD_FUNC\\(|VALUEFUNC\\()?(\\w+)\\)?,\n\\s*(-?\\w+)\\s*\\)}xm",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMethodHandler%3A%3AMATCH2"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::MixinHandler::MATCH","YARD::Handlers::C::MixinHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/mixin_handler.rb"}],
            "name":                         "MixinHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::MixinHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmixin_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/c/mixin_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::MixinHandler",
            "path":                         "YARD::Handlers::C::MixinHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH) do |klass_var, mixin_var|\n    namespace = namespace_for_variable(klass_var)\n    ensure_loaded!(namespace)\n    namespace.mixins(:instance) << namespace_for_variable(mixin_var)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmixin_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/mixin_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::MixinHandler",
            "path":                         "YARD::Handlers::C::MixinHandler::MATCH",
            "signature":                    "MATCH = /rb_include_module\\s*\\(\\s*(\\w+?),\\s*(\\w+?)\\s*\\)/",
            "source":                       "MATCH = /rb_include_module\\s*\\(\\s*(\\w+?),\\s*(\\w+?)\\s*\\)/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/rb_include_module\\s*\\(\\s*(\\w+?),\\s*(\\w+?)\\s*\\)/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmixin_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AMixinHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::ModuleHandler::MATCH1","YARD::Handlers::C::ModuleHandler::MATCH2","YARD::Handlers::C::ModuleHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/module_handler.rb"}],
            "name":                         "ModuleHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::ModuleHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%3A%3AMATCH1","YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%3A%3AMATCH2","YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmodule_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/c/module_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::ModuleHandler",
            "path":                         "YARD::Handlers::C::ModuleHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH1) do |var_name, module_name|\n    handle_module(var_name, module_name)\n  end\n  statement.source.scan(MATCH2) do |var_name, in_module, module_name|\n    handle_module(var_name, module_name, in_module)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmodule_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/module_handler.rb"}],
            "name":                         "MATCH1",
            "namespace":                    "YARD::Handlers::C::ModuleHandler",
            "path":                         "YARD::Handlers::C::ModuleHandler::MATCH1",
            "signature":                    "MATCH1 = /([\\w\\.]+)\\s* = \\s*rb_define_module\\s*\\(\\s*\"([\\w:]+)\"\\s*\\)/mx",
            "source":                       "MATCH1 = /([\\w\\.]+)\\s* = \\s*rb_define_module\\s*\\(\\s*\"([\\w:]+)\"\\s*\\)/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s* = \\s*rb_define_module\\s*\\(\\s*\"([\\w:]+)\"\\s*\\)/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmodule_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%3A%3AMATCH1"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/c/module_handler.rb"}],
            "name":                         "MATCH2",
            "namespace":                    "YARD::Handlers::C::ModuleHandler",
            "path":                         "YARD::Handlers::C::ModuleHandler::MATCH2",
            "signature":                    "MATCH2 = /([\\w\\.]+)\\s* = \\s*rb_define_module_under\\s*\\(\\s*(\\w+),\\s*\"(\\w+)\"\\s*\\)/mx",
            "source":                       "MATCH2 = /([\\w\\.]+)\\s* = \\s*rb_define_module_under\\s*\\(\\s*(\\w+),\\s*\"(\\w+)\"\\s*\\)/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s* = \\s*rb_define_module_under\\s*\\(\\s*(\\w+),\\s*\"(\\w+)\"\\s*\\)/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fmodule_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AModuleHandler%3A%3AMATCH2"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::OverrideCommentHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Parses comments",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/override_comment_handler.rb"}],
            "name":                         "OverrideCommentHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::OverrideCommentHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AOverrideCommentHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Foverride_comment_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AOverrideCommentHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/c/override_comment_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::OverrideCommentHandler",
            "path":                         "YARD::Handlers::C::OverrideCommentHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return if statement.overrides.empty?\n  statement.overrides.each do |type, name|\n    override_comments << [name, statement]\n    obj = nil\n    case type\n    when :class\n      name, superclass = *name.split(/\\s*<\\s*/)\n      obj = YARD::CodeObjects::ClassObject.new(:root, name)\n      obj.superclass = \"::#{superclass}\" if superclass\n    when :module\n      obj = YARD::CodeObjects::ModuleObject.new(:root, name)\n    end\n    register_docstring(obj, statement.source, statement) if obj\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Foverride_comment_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AOverrideCommentHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::PathHandler::MATCH","YARD::Handlers::C::PathHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/path_handler.rb"}],
            "name":                         "PathHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::PathHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fpath_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/c/path_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::PathHandler",
            "path":                         "YARD::Handlers::C::PathHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH) do |var_name, path|\n    namespaces[var_name] = P(path)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fpath_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/path_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::PathHandler",
            "path":                         "YARD::Handlers::C::PathHandler::MATCH",
            "signature":                    "MATCH = /([\\w\\.]+)\\s* = \\s*rb_path2class\\s*\\(\\s*\"([\\w:]+)\"\\)/mx",
            "source":                       "MATCH = /([\\w\\.]+)\\s* = \\s*rb_path2class\\s*\\(\\s*\"([\\w:]+)\"\\)/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s* = \\s*rb_path2class\\s*\\(\\s*\"([\\w:]+)\"\\)/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fpath_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3APathHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::StructHandler::MATCH","YARD::Handlers::C::StructHandler#process"],
            "docstring":                    "",
            "files":                        [{"file_line":1,"file_path":"lib/yard/handlers/c/struct_handler.rb"}],
            "name":                         "StructHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::StructHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler%23process"],
            "y_ld:files":                   [{"file_line":1,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fstruct_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/c/struct_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::StructHandler",
            "path":                         "YARD::Handlers::C::StructHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  statement.source.scan(MATCH) do |var_name, class_name, parent|\n    handle_class(var_name, class_name, parent)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fstruct_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/struct_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::StructHandler",
            "path":                         "YARD::Handlers::C::StructHandler::MATCH",
            "signature":                    "MATCH = /([\\w\\.]+)\\s*=\\s*(?:rb_struct_define_without_accessor)\\s*",
            "source":                       "MATCH = /([\\w\\.]+)\\s*=\\s*(?:rb_struct_define_without_accessor)\\s*\n\\(\\s*\"([\\w:]+)\"\\s*,\\s*(\\w+)\\s*/mx",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/([\\w\\.]+)\\s*=\\s*(?:rb_struct_define_without_accessor)\\s*\n\\(\\s*\"([\\w:]+)\"\\s*,\\s*(\\w+)\\s*/mx",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fstruct_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3AStructHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::C::SymbolHandler::MATCH","YARD::Handlers::C::SymbolHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Keeps track of function bodies for symbol lookup during Ruby method declarations",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/c/symbol_handler.rb"}],
            "name":                         "SymbolHandler",
            "namespace":                    "YARD::Handlers::C",
            "path":                         "YARD::Handlers::C::SymbolHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::C::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler%3A%3AMATCH","YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fsymbol_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3AC%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/c/symbol_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::C::SymbolHandler",
            "path":                         "YARD::Handlers::C::SymbolHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process { symbols[statement.source[MATCH, 1]] = statement }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fsymbol_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/c/symbol_handler.rb"}],
            "name":                         "MATCH",
            "namespace":                    "YARD::Handlers::C::SymbolHandler",
            "path":                         "YARD::Handlers::C::SymbolHandler::MATCH",
            "signature":                    "MATCH = %r{\\A\\s*(?:(?:static|SWIGINTERN)\\s+)?(?:intern\\s+)?VALUE\\s+(\\w+)\\s*\\(}",
            "source":                       "MATCH = %r{\\A\\s*(?:(?:static|SWIGINTERN)\\s+)?(?:intern\\s+)?VALUE\\s+(\\w+)\\s*\\(}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "%r{\\A\\s*(?:(?:static|SWIGINTERN)\\s+)?(?:intern\\s+)?VALUE\\s+(\\w+)\\s*\\(}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fc%2Fsymbol_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AC%3A%3ASymbolHandler%3A%3AMATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{"object":{"write":"YARD::Handlers::NamespaceMissingError#object=","read":"YARD::Handlers::NamespaceMissingError#object"}}},
            "children":                     ["YARD::Handlers::NamespaceMissingError#object=","YARD::Handlers::NamespaceMissingError#object","YARD::Handlers::NamespaceMissingError#initialize"],
            "current_file_has_comments":    true,
            "docstring":                    "Raised during processing phase when a handler needs to perform\nan operation on an object's namespace but the namespace could\nnot be resolved.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "NamespaceMissingError",
            "namespace":                    "YARD::Handlers",
            "path":                         "YARD::Handlers::NamespaceMissingError",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::UndocumentableError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23object%3D","YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23object","YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23initialize"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ANamespaceMissingError",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3AUndocumentableError"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Handlers::NamespaceMissingError",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Handlers::NamespaceMissingError#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(object) @object = object end",
            "source":                       "def initialize(object) @object = object end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The object the error occurred on",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Handlers::NamespaceMissingError",
            "path":                         "YARD::Handlers::NamespaceMissingError#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The object the error occurred on",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/handlers/base.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Handlers::NamespaceMissingError",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::NamespaceMissingError#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fhandlers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ANamespaceMissingError%23object%3D"
        },
        {
            "attributes":                   {"class":{"namespace_for_handler":{"write":null,"read":"YARD::Handlers::Processor.namespace_for_handler"}},"instance":{"extra_state":{"write":"YARD::Handlers::Processor#extra_state=","read":"YARD::Handlers::Processor#extra_state"},"namespace":{"write":"YARD::Handlers::Processor#namespace=","read":"YARD::Handlers::Processor#namespace"},"owner":{"write":"YARD::Handlers::Processor#owner=","read":"YARD::Handlers::Processor#owner"},"file":{"write":"YARD::Handlers::Processor#file=","read":"YARD::Handlers::Processor#file"},"visibility":{"write":"YARD::Handlers::Processor#visibility=","read":"YARD::Handlers::Processor#visibility"},"scope":{"write":"YARD::Handlers::Processor#scope=","read":"YARD::Handlers::Processor#scope"},"globals":{"write":"YARD::Handlers::Processor#globals=","read":"YARD::Handlers::Processor#globals"},"parser_type":{"write":"YARD::Handlers::Processor#parser_type=","read":"YARD::Handlers::Processor#parser_type"}}},
            "children":                     ["YARD::Handlers::Processor.register_handler_namespace","YARD::Handlers::Processor.namespace_for_handler","YARD::Handlers::Processor#file=","YARD::Handlers::Processor#file","YARD::Handlers::Processor#namespace=","YARD::Handlers::Processor#namespace","YARD::Handlers::Processor#visibility=","YARD::Handlers::Processor#visibility","YARD::Handlers::Processor#scope=","YARD::Handlers::Processor#scope","YARD::Handlers::Processor#owner=","YARD::Handlers::Processor#owner","YARD::Handlers::Processor#parser_type=","YARD::Handlers::Processor#parser_type","YARD::Handlers::Processor#globals=","YARD::Handlers::Processor#globals","YARD::Handlers::Processor#extra_state=","YARD::Handlers::Processor#extra_state","YARD::Handlers::Processor#initialize","YARD::Handlers::Processor#process","YARD::Handlers::Processor#parse_remaining_files","YARD::Handlers::Processor#find_handlers","YARD::Handlers::Processor#handles?","YARD::Handlers::Processor#handler_base_class","YARD::Handlers::Processor#handler_base_namespace","YARD::Handlers::Processor#load_handlers"],
            "current_file_has_comments":    true,
            "docstring":                    "Iterates over all statements in a file and delegates them to the\n{Handlers::Base} objects that are registered to handle the statement.\n\nThis class is passed to each handler and keeps overall processing state.\nFor example, if the {#visibility} is set in a handler, all following\nstatements will have access to this state. This allows \"public\",\n\"protected\" and \"private\" statements to be handled in classes and modules.\nIn addition, the {#namespace} can be set during parsing to control\nwhere objects are being created from. You can also access extra stateful\nproperties that any handler can set during the duration of the post\nprocessing of a file from {#extra_state}. If you need to access state\nacross different files, look at {#globals}.",
            "dynamic":                      true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "Processor",
            "namespace":                    "YARD::Handlers",
            "path":                         "YARD::Handlers::Processor",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3AProcessor.register_handler_namespace","YARD%3A%3AHandlers%3A%3AProcessor.namespace_for_handler","YARD%3A%3AHandlers%3A%3AProcessor%23file%3D","YARD%3A%3AHandlers%3A%3AProcessor%23file","YARD%3A%3AHandlers%3A%3AProcessor%23namespace%3D","YARD%3A%3AHandlers%3A%3AProcessor%23namespace","YARD%3A%3AHandlers%3A%3AProcessor%23visibility%3D","YARD%3A%3AHandlers%3A%3AProcessor%23visibility","YARD%3A%3AHandlers%3A%3AProcessor%23scope%3D","YARD%3A%3AHandlers%3A%3AProcessor%23scope","YARD%3A%3AHandlers%3A%3AProcessor%23owner%3D","YARD%3A%3AHandlers%3A%3AProcessor%23owner","YARD%3A%3AHandlers%3A%3AProcessor%23parser_type%3D","YARD%3A%3AHandlers%3A%3AProcessor%23parser_type","YARD%3A%3AHandlers%3A%3AProcessor%23globals%3D","YARD%3A%3AHandlers%3A%3AProcessor%23globals","YARD%3A%3AHandlers%3A%3AProcessor%23extra_state%3D","YARD%3A%3AHandlers%3A%3AProcessor%23extra_state","YARD%3A%3AHandlers%3A%3AProcessor%23initialize","YARD%3A%3AHandlers%3A%3AProcessor%23process","YARD%3A%3AHandlers%3A%3AProcessor%23parse_remaining_files","YARD%3A%3AHandlers%3A%3AProcessor%23find_handlers","YARD%3A%3AHandlers%3A%3AProcessor%23handles%3F","YARD%3A%3AHandlers%3A%3AProcessor%23handler_base_class","YARD%3A%3AHandlers%3A%3AProcessor%23handler_base_namespace","YARD%3A%3AHandlers%3A%3AProcessor%23load_handlers"],
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Share state across different handlers inside of a file.\nThis attribute is similar to {#visibility}, {#scope}, {#namespace}\nand {#owner}, in that they all maintain state across all handlers\nfor the entire source file. Use this attribute to store any data\nyour handler might need to save during the parsing of a file. If\nyou need to save state across files, see {#globals}.",
            "dynamic":                      true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "extra_state",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#extra_state",
            "scope":                        "instance",
            "signature":                    "def extra_state",
            "source":                       "def extra_state\n  @extra_state\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23extra_state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Share state across different handlers inside of a file.\nThis attribute is similar to {#visibility}, {#scope}, {#namespace}\nand {#owner}, in that they all maintain state across all handlers\nfor the entire source file. Use this attribute to store any data\nyour handler might need to save during the parsing of a file. If\nyou need to save state across files, see {#globals}.",
            "dynamic":                      true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "extra_state=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#extra_state=",
            "scope":                        "instance",
            "signature":                    "def extra_state=(value)",
            "source":                       "def extra_state=(value)\n  @extra_state = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23extra_state%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "file=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#file=",
            "scope":                        "instance",
            "signature":                    "def file=(value)",
            "source":                       "def file=(value)\n  @file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches for all handlers in {Base.subclasses} that match the +statement+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "find_handlers",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Handlers::Processor#find_handlers",
            "scope":                        "instance",
            "signature":                    "def find_handlers(statement)",
            "source":                       "def find_handlers(statement)\n  Base.subclasses.find_all do |handler|\n    handler_base_class > handler &&\n    (handler.namespace_only? ? owner.is_a?(CodeObjects::NamespaceObject) : true) &&\n    handles?(handler, statement)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23find_handlers"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Handlers can share state for the entire post processing stage through\nthis attribute. Note that post processing stage spans multiple files.\nTo share state only within a single file, use {#extra_state}",
            "dynamic":                      true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "globals",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#globals",
            "scope":                        "instance",
            "signature":                    "def globals",
            "source":                       "def globals\n  @globals\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23globals"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Handlers can share state for the entire post processing stage through\nthis attribute. Note that post processing stage spans multiple files.\nTo share state only within a single file, use {#extra_state}",
            "dynamic":                      true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "globals=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#globals=",
            "scope":                        "instance",
            "signature":                    "def globals=(value)",
            "source":                       "def globals=(value)\n  @globals = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23globals%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the handler base class",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":170,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "handler_base_class",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#handler_base_class",
            "scope":                        "instance",
            "signature":                    "def handler_base_class",
            "source":                       "def handler_base_class\n  handler_base_namespace.const_get(:Base)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":170,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23handler_base_class"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The module holding the handlers to be loaded",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":178,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "handler_base_namespace",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#handler_base_namespace",
            "scope":                        "instance",
            "signature":                    "def handler_base_namespace",
            "source":                       "def handler_base_namespace\n  self.class.namespace_for_handler[parser_type]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":178,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23handler_base_namespace"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "handles?",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"handler"},{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Handlers::Processor#handles?",
            "scope":                        "instance",
            "signature":                    "def handles?(handler, statement)",
            "source":                       "def handles?(handler, statement)\n  return false unless handler.matches_file?(file)\n  if handler.method(:handles?).arity == 1\n    handler.handles?(statement)\n  elsif [-1, 2].include?(handler.method(:handles?).arity)\n    handler.handles?(statement, self)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23handles%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new Processor for a +file+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"parser"}],
            "path":                         "YARD::Handlers::Processor#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(parser)",
            "source":                       "def initialize(parser)\n  @file = parser.file || \"(stdin)\"\n  @namespace = YARD::Registry.root\n  @visibility = :public\n  @scope = :instance\n  @owner = @namespace\n  @parser_type = parser.parser_type\n  @handlers_loaded = {}\n  @globals = parser.globals || OpenStruct.new\n  @extra_state = OpenStruct.new\n  load_handlers\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads handlers from {#handler_base_namespace}. This ensures that\nRuby1.9 handlers are never loaded into 1.8; also lowers the amount\nof modules that are loaded",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":186,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "load_handlers",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#load_handlers",
            "scope":                        "instance",
            "signature":                    "def load_handlers",
            "source":                       "def load_handlers\n  return if @handlers_loaded[parser_type]\n  handler_base_namespace.constants.each do |c|\n    const = handler_base_namespace.const_get(c)\n    unless Handlers::Base.subclasses.include?(const)\n      Handlers::Base.subclasses << const\n    end\n  end\n  @handlers_loaded[parser_type] = true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":186,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23load_handlers"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "namespace",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  @namespace\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23namespace"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "namespace=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#namespace=",
            "scope":                        "instance",
            "signature":                    "def namespace=(value)",
            "source":                       "def namespace=(value)\n  @namespace = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23namespace%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "owner",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#owner",
            "scope":                        "instance",
            "signature":                    "def owner",
            "source":                       "def owner\n  @owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23owner"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "owner=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#owner=",
            "scope":                        "instance",
            "signature":                    "def owner=(value)",
            "source":                       "def owner=(value)\n  @owner = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23owner%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Continue parsing the remainder of the files in the +globals.ordered_parser+\nobject. After the remainder of files are parsed, processing will continue\non the current file.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":138,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "parse_remaining_files",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#parse_remaining_files",
            "scope":                        "instance",
            "signature":                    "def parse_remaining_files",
            "source":                       "def parse_remaining_files\n  if globals.ordered_parser\n    globals.ordered_parser.parse\n    log.debug(\"Re-processing #{@file}...\")\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":138,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23parse_remaining_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "parser_type",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#parser_type",
            "scope":                        "instance",
            "signature":                    "def parser_type",
            "source":                       "def parser_type\n  @parser_type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23parser_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "parser_type=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#parser_type=",
            "scope":                        "instance",
            "signature":                    "def parser_type=(value)",
            "source":                       "def parser_type=(value)\n  @parser_type = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23parser_type%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a list of statements by finding handlers to process each\none.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":110,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"statements"}],
            "path":                         "YARD::Handlers::Processor#process",
            "scope":                        "instance",
            "signature":                    "def process(statements)",
            "source":                       "def process(statements)\n  statements.each_with_index do |stmt, index|\n    find_handlers(stmt).each do |handler|\n      begin\n        handler.new(self, stmt).process\n      rescue NamespaceMissingError => missingerr\n        log.warn \"The #{missingerr.object.type} #{missingerr.object.path} has not yet been recognized.\"\n        log.warn \"If this class/method is part of your source tree, this will affect your documentation results.\"\n        log.warn \"You can correct this issue by loading the source file for this object before `#{file}'\"\n        log.warn\n      rescue Parser::UndocumentableError => undocerr\n        log.warn \"in #{handler.to_s}: Undocumentable #{undocerr.message}\"\n        log.warn \"\\tin file '#{file}':#{stmt.line}:\\n\\n\" + stmt.show + \"\\n\"\n      rescue => e\n        log.error \"Unhandled exception in #{handler.to_s}:\"\n        log.error \"  in `#{file}`:#{stmt.line}:\\n\\n#{stmt.show}\\n\"\n        log.backtrace(e)\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":110,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23process"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#scope",
            "scope":                        "instance",
            "signature":                    "def scope",
            "source":                       "def scope\n  @scope\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23scope"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "scope=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#scope=",
            "scope":                        "instance",
            "signature":                    "def scope=(value)",
            "source":                       "def scope=(value)\n  @scope = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23scope%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "visibility",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor#visibility",
            "scope":                        "instance",
            "signature":                    "def visibility",
            "source":                       "def visibility\n  @visibility\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23visibility"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "visibility=",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Handlers::Processor#visibility=",
            "scope":                        "instance",
            "signature":                    "def visibility=(value)",
            "source":                       "def visibility=(value)\n  @visibility = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor%23visibility%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/handlers/processor.rb"},{"file_line":33,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "namespace_for_handler",
            "namespace":                    "YARD::Handlers::Processor",
            "path":                         "YARD::Handlers::Processor.namespace_for_handler",
            "scope":                        "class",
            "signature":                    "def namespace_for_handler",
            "source":                       "def namespace_for_handler\n  @namespace_for_handler\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"},{"file_line":33,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor.namespace_for_handler"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a new namespace for handlers of the given type.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/handlers/processor.rb"}],
            "name":                         "register_handler_namespace",
            "namespace":                    "YARD::Handlers::Processor",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":null,"parm_name":"ns"}],
            "path":                         "YARD::Handlers::Processor.register_handler_namespace",
            "scope":                        "class",
            "signature":                    "def register_handler_namespace(type, ns)",
            "source":                       "def register_handler_namespace(type, ns)\n  namespace_for_handler[type] = ns\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fhandlers%2Fprocessor.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3AProcessor.register_handler_namespace"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy","YARD::Handlers::Ruby::HandlesExtension","YARD::Handlers::Ruby::MethodCallWrapper","YARD::Handlers::Ruby::TestNodeWrapper","YARD::Handlers::Ruby::Base","YARD::Handlers::Ruby::DSLHandler","YARD::Handlers::Ruby::YieldHandler","YARD::Handlers::Ruby::MixinHandler","YARD::Handlers::Ruby::AliasHandler","YARD::Handlers::Ruby::ClassHandler","YARD::Handlers::Ruby::MethodHandler","YARD::Handlers::Ruby::ModuleHandler","YARD::Handlers::Ruby::ExtendHandler","YARD::Handlers::Ruby::CommentHandler","YARD::Handlers::Ruby::ConstantHandler","YARD::Handlers::Ruby::ExceptionHandler","YARD::Handlers::Ruby::AttributeHandler","YARD::Handlers::Ruby::VisibilityHandler","YARD::Handlers::Ruby::DSLHandlerMethods","YARD::Handlers::Ruby::ClassVariableHandler","YARD::Handlers::Ruby::StructHandlerMethods","YARD::Handlers::Ruby::ModuleFunctionHandler","YARD::Handlers::Ruby::ClassConditionHandler","YARD::Handlers::Ruby::PrivateConstantHandler","YARD::Handlers::Ruby::MethodConditionHandler"],
            "current_file_has_comments":    true,
            "docstring":                    "All Ruby handlers",
            "dynamic":                      true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/autoload.rb"},{"file_line":3,"file_path":"lib/yard/handlers/ruby/base.rb"},{"file_line":3,"file_path":"lib/yard/handlers/ruby/dsl_handler.rb"},{"file_line":3,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"},{"file_line":3,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "Ruby",
            "namespace":                    "YARD::Handlers",
            "path":                         "YARD::Handlers::Ruby",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy","YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodCallWrapper","YARD%3A%3AHandlers%3A%3ARuby%3A%3ATestNodeWrapper","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AYieldHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AAliasHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ACommentHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AExceptionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AVisibilityHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassVariableHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods","YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleFunctionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodConditionHandler"],
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::AliasHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles alias and alias_method calls",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/alias_handler.rb"}],
            "name":                         "AliasHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::AliasHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AAliasHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Falias_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AAliasHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/alias_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::AliasHandler",
            "path":                         "YARD::Handlers::Ruby::AliasHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  names = []\n  if statement.type == :alias\n    names = statement.map {|o| o.jump(:ident, :op, :kw, :const).source }\n  elsif statement.call?\n    statement.parameters(false).each do |obj|\n      case obj.type\n      when :symbol_literal\n        names << obj.jump(:ident, :op, :kw, :const).source\n      when :string_literal\n        names << obj.jump(:string_content).source\n      end\n    end\n  end\n  raise YARD::Parser::UndocumentableError, \"alias/alias_method\" if names.size != 2\n\n  new_meth, old_meth = names[0].to_sym, names[1].to_sym\n  old_obj = namespace.child(:name => old_meth, :scope => scope)\n  new_obj = register MethodObject.new(namespace, new_meth, scope) do |o|\n    o.add_file(parser.file, statement.line)\n  end\n\n  if old_obj\n    new_obj.signature = old_obj.signature\n    new_obj.source = old_obj.source\n    new_obj.docstring = old_obj.docstring + YARD::Docstring.new(statement.comments)\n    new_obj.docstring.line_range = statement.comments_range\n    new_obj.docstring.hash_flag = statement.comments_hash_flag\n    new_obj.docstring.object = new_obj\n  else\n    new_obj.signature = \"def #{new_meth}\" # this is all we know.\n  end\n\n  namespace.aliases[new_obj] = old_meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Falias_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AAliasHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::AttributeHandler#process","YARD::Handlers::Ruby::AttributeHandler#validated_attribute_names"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles +attr_*+ statements in modules/classes",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/attribute_handler.rb"}],
            "name":                         "AttributeHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::AttributeHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler%23validated_attribute_names"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fattribute_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":9,"file_path":"lib/yard/handlers/ruby/attribute_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::AttributeHandler",
            "path":                         "YARD::Handlers::Ruby::AttributeHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return if statement.type == :var_ref || statement.type == :vcall\n  read, write = true, false\n  params = statement.parameters(false).dup\n\n  # Change read/write based on attr_reader/writer/accessor\n  case statement.method_name(true)\n  when :attr\n    # In the case of 'attr', the second parameter (if given) isn't a symbol.\n    if params.size == 2\n      write = true if params.pop == s(:var_ref, s(:kw, \"true\"))\n    end\n  when :attr_accessor\n    write = true\n  when :attr_reader\n    # change nothing\n  when :attr_writer\n    read, write = false, true\n  end\n\n  # Add all attributes\n  validated_attribute_names(params).each do |name|\n    namespace.attributes[scope][name] ||= SymbolHash[:read => nil, :write => nil]\n\n    # Show their methods as well\n    {:read => name, :write => \"#{name}=\"}.each do |type, meth|\n      if (type == :read ? read : write)\n        o = MethodObject.new(namespace, meth, scope)\n        if type == :write\n          o.parameters = [['value', nil]]\n          src = \"def #{meth}(value)\"\n          full_src = \"#{src}\\n  @#{name} = value\\nend\"\n          doc = \"Sets the attribute #{name}\\n@param value the value to set the attribute #{name} to.\"\n        else\n          src = \"def #{meth}\"\n          full_src = \"#{src}\\n  @#{name}\\nend\"\n          doc = \"Returns the value of attribute #{name}\"\n        end\n        o.source ||= full_src\n        o.signature ||= src\n        register(o)\n        o.docstring = doc if o.docstring.blank?(false)\n\n        # Regsiter the object explicitly\n        namespace.attributes[scope][name][type] = o\n      elsif obj = namespace.children.find {|o| o.name == meth.to_sym && o.scope == scope }\n        # register an existing method as attribute\n        namespace.attributes[scope][name][type] = obj\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fattribute_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler%23process"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Strips out any non-essential arguments from the attr statement.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/handlers/ruby/attribute_handler.rb"}],
            "name":                         "validated_attribute_names",
            "namespace":                    "YARD::Handlers::Ruby::AttributeHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"params"}],
            "path":                         "YARD::Handlers::Ruby::AttributeHandler#validated_attribute_names",
            "scope":                        "instance",
            "signature":                    "def validated_attribute_names(params)",
            "source":                       "def validated_attribute_names(params)\n  params.map do |obj|\n    case obj.type\n    when :symbol_literal\n      obj.jump(:ident, :op, :kw, :const).source\n    when :string_literal\n      obj.jump(:string_content).source\n    else\n      raise YARD::Parser::UndocumentableError, obj.source\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fattribute_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AAttributeHandler%23validated_attribute_names"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Base.method_call","YARD::Handlers::Ruby::Base.meta_type","YARD::Handlers::Ruby::Base.handles?","YARD::Handlers::Ruby::Base#parse_block","YARD::Handlers::Ruby::Base#call_params","YARD::Handlers::Ruby::Base#caller_method"],
            "class_mixins":                 ["YARD::Parser::Ruby"],
            "current_file_has_comments":    true,
            "docstring":                    "This is the base handler class for the new-style (1.9) Ruby parser.\nAll handlers that subclass this base class will be used when the\nnew-style parser is used. For implementing legacy handlers, see\n{Legacy::Base}.",
            "dynamic":                      true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "groups":                       ["Statement Matcher Extensions","Testing for a Handler","Parsing an Inner Block","Macro Handling"],
            "instance_mixins":              ["YARD::Parser::Ruby"],
            "name":                         "Base",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::Base",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.method_call","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.meta_type","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.handles%3F","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23parse_block","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23call_params","YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23caller_method"],
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":141,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Macro Handling",
            "name":                         "call_params",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "path":                         "YARD::Handlers::Ruby::Base#call_params",
            "scope":                        "instance",
            "signature":                    "def call_params",
            "source":                       "def call_params\n  return [] unless statement.respond_to?(:parameters)\n  statement.parameters(false).compact.map do |param|\n    if param.type == :list\n      param.map {|n| n.jump(:ident, :kw, :tstring_content).source }\n    else\n      param.jump(:ident, :kw, :tstring_content).source\n    end\n  end.flatten\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":141,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23call_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Macro Handling",
            "name":                         "caller_method",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "path":                         "YARD::Handlers::Ruby::Base#caller_method",
            "scope":                        "instance",
            "signature":                    "def caller_method",
            "source":                       "def caller_method\n  if statement.call? || statement.def?\n    statement.method_name(true).to_s\n  elsif statement.type == :var_ref || statement.type == :vcall\n    statement[0].jump(:ident, :kw).source\n  else\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23caller_method"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":132,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Parsing an Inner Block",
            "name":                         "parse_block",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"inner_node"},{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Handlers::Ruby::Base#parse_block",
            "scope":                        "instance",
            "signature":                    "def parse_block(inner_node, opts = {})",
            "source":                       "def parse_block(inner_node, opts = {})\n  push_state(opts) do\n    nodes = inner_node.type == :list ? inner_node.children : [inner_node]\n    parser.process(nodes)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":132,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase%23parse_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":110,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Testing for a Handler",
            "name":                         "handles?",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Handlers::Ruby::Base.handles?",
            "scope":                        "class",
            "signature":                    "def handles?(node)",
            "source":                       "def handles?(node)\n  handlers.any? do |a_handler|\n    case a_handler\n    when Symbol\n      a_handler == node.type\n    when String\n      node.source == a_handler\n    when Regexp\n      node.source =~ a_handler\n    when Parser::Ruby::AstNode\n      a_handler == node\n    when HandlesExtension\n      a_handler.matches?(node)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":110,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.handles%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Matcher for handling a node with a specific meta-type. An {AstNode}\nhas a {AstNode#type} to define its type but can also be associated\nwith a set of types. For instance, +:if+ and +:unless+ are both\nof the meta-type +:condition+.\n\nA meta-type is any method on the {AstNode} class ending in \"?\",\nthough you should not include the \"?\" suffix in your declaration.\nSome examples are: \"condition\", \"call\", \"literal\", \"kw\", \"token\",\n\"ref\".",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":102,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Statement Matcher Extensions",
            "name":                         "meta_type",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::Handlers::Ruby::Base.meta_type",
            "scope":                        "class",
            "signature":                    "def meta_type(type)",
            "source":                       "def meta_type(type)\n  TestNodeWrapper.new(type.to_s + \"?\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":102,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.meta_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Matcher for handling any type of method call. Method calls can\nbe expressed by many {AstNode} types depending on the syntax\nwith which it is called, so YARD allows you to use this matcher\nto simplify matching a method call.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":83,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "group":                        "Statement Matcher Extensions",
            "name":                         "method_call",
            "namespace":                    "YARD::Handlers::Ruby::Base",
            "parameters":                   [{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::Handlers::Ruby::Base.method_call",
            "scope":                        "class",
            "signature":                    "def method_call(name = nil)",
            "source":                       "def method_call(name = nil)\n  MethodCallWrapper.new(name ? name.to_s : nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":83,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase.method_call"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ClassConditionHandler#process","YARD::Handlers::Ruby::ClassConditionHandler#parse_condition","YARD::Handlers::Ruby::ClassConditionHandler#parse_then_block","YARD::Handlers::Ruby::ClassConditionHandler#parse_else_block"],
            "current_file_has_comments":    true,
            "docstring":                    "Matches if/unless conditions inside classes and attempts to process only\none branch (by evaluating the condition if possible).",
            "files":                        [{"file_line":11,"file_path":"lib/yard/handlers/ruby/class_condition_handler.rb"}],
            "name":                         "ClassConditionHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ClassConditionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_condition","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_then_block","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_else_block"],
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the condition part of the if/unless statement",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/handlers/ruby/class_condition_handler.rb"}],
            "name":                         "parse_condition",
            "namespace":                    "YARD::Handlers::Ruby::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::ClassConditionHandler#parse_condition",
            "scope":                        "instance",
            "signature":                    "def parse_condition",
            "source":                       "def parse_condition\n  condition = nil\n\n  # Right now we can handle very simple unary conditions like:\n  #   if true\n  #   if false\n  #   if 0\n  #   if 100 (not 0)\n  #   if defined? SOME_CONSTANT\n  #\n  # The last case will do a lookup in the registry and then one\n  # in the Ruby world (using eval).\n  case statement.condition.type\n  when :int\n    condition = statement.condition[0] != \"0\"\n  when :defined\n    # defined? keyword used, let's see if we can look up the name\n    # in the registry, then we'll try using Ruby's powers. eval() is not\n    # *too* dangerous here since code is not actually executed.\n    name = statement.condition[0].source\n    obj = YARD::Registry.resolve(namespace, name, true)\n    begin\n      condition = true if obj || Object.instance_eval(\"defined? #{name}\")\n    rescue SyntaxError, NameError\n      condition = false\n    end\n  when :var_ref\n    var = statement.condition[0]\n    if var == s(:kw, \"true\")\n      condition = true\n    elsif var == s(:kw, \"false\")\n      condition = false\n    end\n  end\n\n  # Invert an unless condition\n  if statement.type == :unless || statement.type == :unless_mod\n    condition = !condition if condition != nil\n  end\n  condition\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_condition"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/handlers/ruby/class_condition_handler.rb"}],
            "name":                         "parse_else_block",
            "namespace":                    "YARD::Handlers::Ruby::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::ClassConditionHandler#parse_else_block",
            "scope":                        "instance",
            "signature":                    "def parse_else_block",
            "source":                       "def parse_else_block\n  parse_block(statement.else_block) if statement.else_block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_else_block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/handlers/ruby/class_condition_handler.rb"}],
            "name":                         "parse_then_block",
            "namespace":                    "YARD::Handlers::Ruby::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::ClassConditionHandler#parse_then_block",
            "scope":                        "instance",
            "signature":                    "def parse_then_block",
            "source":                       "def parse_then_block\n  parse_block(statement.then_block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23parse_then_block"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":15,"file_path":"lib/yard/handlers/ruby/class_condition_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::ClassConditionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  condition = parse_condition\n  if condition == nil\n    # Parse both blocks if we're unsure of the condition\n    parse_then_block\n    parse_else_block\n  elsif condition\n    parse_then_block\n  else\n    parse_else_block\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassConditionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ClassHandler#process","YARD::Handlers::Ruby::ClassHandler#extract_parameters","YARD::Handlers::Ruby::ClassHandler#create_struct_superclass","YARD::Handlers::Ruby::ClassHandler#struct_superclass_name","YARD::Handlers::Ruby::ClassHandler#parse_struct_superclass","YARD::Handlers::Ruby::ClassHandler#parse_superclass"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles class declarations",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::StructHandlerMethods"],
            "name":                         "ClassHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ClassHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23extract_parameters","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23create_struct_superclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23struct_superclass_name","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23parse_struct_superclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23parse_superclass"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "create_struct_superclass",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"},{"parm_type":null,"parm_name":"superclass_def"}],
            "path":                         "YARD::Handlers::Ruby::ClassHandler#create_struct_superclass",
            "scope":                        "instance",
            "signature":                    "def create_struct_superclass(superclass, superclass_def)",
            "source":                       "def create_struct_superclass(superclass, superclass_def)\n  return if superclass == \"Struct\"\n  the_super = register ClassObject.new(P(\"Struct\"), superclass[8..-1]) do |o|\n    o.superclass = \"Struct\"\n  end\n  parse_struct_superclass(the_super, superclass_def)\n  the_super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23create_struct_superclass"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extract the parameters from the Struct.new AST node, returning them as a list\nof strings",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "extract_parameters",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::ClassHandler#extract_parameters",
            "scope":                        "instance",
            "signature":                    "def extract_parameters(superclass)",
            "source":                       "def extract_parameters(superclass)\n  members = superclass.parameters.select {|x| x && x.type == :symbol_literal}\n  members.map! {|x| x.source.strip[1..-1]}\n  members\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23extract_parameters"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "parse_struct_superclass",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::ClassHandler#parse_struct_superclass",
            "scope":                        "instance",
            "signature":                    "def parse_struct_superclass(klass, superclass)",
            "source":                       "def parse_struct_superclass(klass, superclass)\n  return unless superclass.call? && superclass.parameters\n  members = extract_parameters(superclass)\n  create_attributes(klass, members)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23parse_struct_superclass"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "parse_superclass",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::ClassHandler#parse_superclass",
            "scope":                        "instance",
            "signature":                    "def parse_superclass(superclass)",
            "source":                       "def parse_superclass(superclass)\n  return nil unless superclass\n\n  case superclass.type\n  when :var_ref\n    return namespace.path if superclass.first == s(:kw, \"self\")\n    return superclass.source if superclass.first.type == :const\n  when :const, :const_ref, :const_path_ref, :top_const_ref\n    return superclass.source\n  when :fcall, :command\n    methname = superclass.method_name.source\n    if methname == \"DelegateClass\"\n      return superclass.parameters.first.source\n    elsif superclass.method_name.type == :const\n      return methname\n    end\n  when :call, :command_call\n    cname = superclass.namespace.source\n    if cname =~ /^O?Struct$/ && superclass.method_name(true) == :new\n      return cname\n    end\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23parse_superclass"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "path":                         "YARD::Handlers::Ruby::ClassHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if statement.type == :class\n    classname = statement[0].source\n    superclass = parse_superclass(statement[1])\n    if superclass == \"Struct\"\n      is_a_struct = true\n      superclass = struct_superclass_name(statement[1]) # refine the superclass if possible\n      create_struct_superclass(superclass, statement[1])\n    end\n    undocsuper = statement[1] && superclass.nil?\n    klass = register ClassObject.new(namespace, classname) do |o|\n      o.superclass = superclass if superclass\n      o.superclass.type = :class if o.superclass.is_a?(Proxy)\n    end\n    if is_a_struct\n      parse_struct_superclass(klass, statement[1])\n    elsif klass\n      create_attributes(klass, members_from_tags(klass))\n    end\n    parse_block(statement[2], :namespace => klass)\n\n    if undocsuper\n      raise YARD::Parser::UndocumentableError, 'superclass (class was added without superclass)'\n    end\n  elsif statement.type == :sclass\n    if statement[0] == s(:var_ref, s(:kw, \"self\"))\n      parse_block(statement[1], :namespace => namespace, :scope => :class)\n    else\n      classname = statement[0].source\n      proxy = Proxy.new(namespace, classname)\n\n      # Allow constants to reference class names\n      if ConstantObject === proxy\n        if proxy.value =~ /\\A#{NAMESPACEMATCH}\\Z/\n          proxy = Proxy.new(namespace, proxy.value)\n        else\n          raise YARD::Parser::UndocumentableError, \"constant class reference '#{classname}'\"\n        end\n      end\n\n      if classname[0,1] =~ /[A-Z]/\n        register ClassObject.new(namespace, classname) if Proxy === proxy\n        parse_block(statement[1], :namespace => proxy, :scope => :class)\n      else\n        raise YARD::Parser::UndocumentableError, \"class '#{classname}'\"\n      end\n    end\n  else\n    sig_end = (statement[1] ? statement[1].source_end : statement[0].source_end) - statement.source_start\n    raise YARD::Parser::UndocumentableError, \"class: #{statement.source[0..sig_end]}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":82,"file_path":"lib/yard/handlers/ruby/class_handler.rb"}],
            "name":                         "struct_superclass_name",
            "namespace":                    "YARD::Handlers::Ruby::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::ClassHandler#struct_superclass_name",
            "scope":                        "instance",
            "signature":                    "def struct_superclass_name(superclass)",
            "source":                       "def struct_superclass_name(superclass)\n  if superclass.call?\n    first = superclass.parameters.first\n    if first.type == :string_literal && first[0].type == :string_content && first[0].size == 1\n      return \"Struct::#{first[0][0][0]}\"\n    end\n  end\n  \"Struct\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":82,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassHandler%23struct_superclass_name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ClassVariableHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles a class variable (@@variable)",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/class_variable_handler.rb"}],
            "name":                         "ClassVariableHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ClassVariableHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassVariableHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_variable_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassVariableHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/class_variable_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ClassVariableHandler",
            "path":                         "YARD::Handlers::Ruby::ClassVariableHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if statement[0].type == :var_field && statement[0][0].type == :cvar\n    name = statement[0][0][0]\n    value = statement[1].source\n    register ClassVariableObject.new(namespace, name) do |o|\n      o.source = statement\n      o.value = value\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fclass_variable_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AClassVariableHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::CommentHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles any lone comment statement in a Ruby file",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/comment_handler.rb"}],
            "name":                         "CommentHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::CommentHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ACommentHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fcomment_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ACommentHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/comment_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::CommentHandler",
            "path":                         "YARD::Handlers::Ruby::CommentHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  register_docstring(nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fcomment_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ACommentHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ConstantHandler#process","YARD::Handlers::Ruby::ConstantHandler#process_constant","YARD::Handlers::Ruby::ConstantHandler#process_structclass","YARD::Handlers::Ruby::ConstantHandler#extract_parameters"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles any constant assignment",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/constant_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::StructHandlerMethods"],
            "name":                         "ConstantHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ConstantHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process_constant","YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process_structclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23extract_parameters"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fconstant_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extract the parameters from the Struct.new AST node, returning them as a list\nof strings",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/handlers/ruby/constant_handler.rb"}],
            "name":                         "extract_parameters",
            "namespace":                    "YARD::Handlers::Ruby::ConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::ConstantHandler#extract_parameters",
            "scope":                        "instance",
            "signature":                    "def extract_parameters(superclass)",
            "source":                       "def extract_parameters(superclass)\n  return [] unless superclass.parameters\n  members = superclass.parameters.select {|x| x && x.type == :symbol_literal}\n  members.map! {|x| x.source.strip[1..-1]}\n  members\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23extract_parameters"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/constant_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ConstantHandler",
            "path":                         "YARD::Handlers::Ruby::ConstantHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if statement[1].call? && statement[1][0][0] == s(:const, \"Struct\") &&\n      statement[1][2] == s(:ident, \"new\")\n    process_structclass(statement)\n  elsif statement[0].type == :var_field && statement[0][0].type == :const\n    process_constant(statement)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/handlers/ruby/constant_handler.rb"}],
            "name":                         "process_constant",
            "namespace":                    "YARD::Handlers::Ruby::ConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Handlers::Ruby::ConstantHandler#process_constant",
            "scope":                        "instance",
            "signature":                    "def process_constant(statement)",
            "source":                       "def process_constant(statement)\n  name = statement[0][0][0]\n  value = statement[1].source\n  register ConstantObject.new(namespace, name) {|o| o.source = statement; o.value = value.strip }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process_constant"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/handlers/ruby/constant_handler.rb"}],
            "name":                         "process_structclass",
            "namespace":                    "YARD::Handlers::Ruby::ConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Handlers::Ruby::ConstantHandler#process_structclass",
            "scope":                        "instance",
            "signature":                    "def process_structclass(statement)",
            "source":                       "def process_structclass(statement)\n  lhs = statement[0][0]\n  if lhs.type == :const\n    klass = create_class(lhs[0], P(:Struct))\n    create_attributes(klass, extract_parameters(statement[1]))\n  else\n    raise YARD::Parser::UndocumentableError, \"Struct assignment to #{statement[0].source}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AConstantHandler%23process_structclass"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::DSLHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles automatic detection of dsl-style methods",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/dsl_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::DSLHandlerMethods","YARD::CodeObjects"],
            "name":                         "DSLHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::DSLHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandler%23process"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":10,"file_path":"lib/yard/handlers/ruby/dsl_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandler",
            "path":                         "YARD::Handlers::Ruby::DSLHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process { handle_comments }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::DSLHandlerMethods::IGNORE_METHODS","YARD::Handlers::Ruby::DSLHandlerMethods#handle_comments","YARD::Handlers::Ruby::DSLHandlerMethods#register_docstring","YARD::Handlers::Ruby::DSLHandlerMethods#implicit_docstring?","YARD::Handlers::Ruby::DSLHandlerMethods#method_name","YARD::Handlers::Ruby::DSLHandlerMethods#method_signature","YARD::Handlers::Ruby::DSLHandlerMethods#find_attached_macro"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "instance_mixins":              ["YARD::Parser","YARD::CodeObjects"],
            "name":                         "DSLHandlerMethods",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%3A%3AIGNORE_METHODS","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23handle_comments","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23register_docstring","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23implicit_docstring%3F","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23method_name","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23method_signature","YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23find_attached_macro"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "find_attached_macro",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#find_attached_macro",
            "scope":                        "instance",
            "signature":                    "def find_attached_macro",
            "source":                       "def find_attached_macro\n  Registry.all(:macro).each do |macro|\n    next unless macro.method_object\n    next unless macro.method_object.name.to_s == caller_method.to_s\n    (namespace.inheritance_tree + [P('Object')]).each do |obj|\n      return macro if obj == macro.method_object.namespace\n    end\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23find_attached_macro"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "handle_comments",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#handle_comments",
            "scope":                        "instance",
            "signature":                    "def handle_comments",
            "source":                       "def handle_comments\n  return if IGNORE_METHODS[caller_method]\n\n  @docstring = statement.comments || \"\"\n  @docstring = @docstring.join(\"\\n\") if @docstring.is_a?(Array)\n  if macro = find_attached_macro\n    @docstring += \"\\n\" +\n      macro.expand([caller_method, *call_params], statement.source)\n  elsif !statement.comments_hash_flag && !implicit_docstring?\n    return register_docstring(nil)\n  end\n\n  # ignore DSL definitions if @method/@attribute directive is used\n  if @docstring =~ /^@!?(method|attribute)\\b/\n    return register_docstring(nil)\n  end\n\n  object = MethodObject.new(namespace, method_name, scope)\n  object.signature = method_signature\n  register(object)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23handle_comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "implicit_docstring?",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#implicit_docstring?",
            "scope":                        "instance",
            "signature":                    "def implicit_docstring?",
            "source":                       "def implicit_docstring?\n  tags = %w(method attribute overload visibility scope return)\n  tags.any? {|tag| @docstring =~ /^@!?#{tag}\\b/ }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23implicit_docstring%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "method_name",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#method_name",
            "scope":                        "instance",
            "signature":                    "def method_name",
            "source":                       "def method_name\n  name = call_params.first || \"\"\n  if name =~ /^#{CodeObjects::METHODNAMEMATCH}$/\n    name\n  else\n    raise UndocumentableError, \"method, missing name\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "method_signature",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#method_signature",
            "scope":                        "instance",
            "signature":                    "def method_signature",
            "source":                       "def method_signature\n  \"def #{method_name}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23method_signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "register_docstring",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"@docstring","parm_name":"docstring"},{"parm_type":"statement","parm_name":"stmt"}],
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods#register_docstring",
            "scope":                        "instance",
            "signature":                    "def register_docstring(object, docstring = @docstring, stmt = statement)",
            "source":                       "def register_docstring(object, docstring = @docstring, stmt = statement)\n  super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%23register_docstring"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/ruby/dsl_handler_methods.rb"}],
            "name":                         "IGNORE_METHODS",
            "namespace":                    "YARD::Handlers::Ruby::DSLHandlerMethods",
            "path":                         "YARD::Handlers::Ruby::DSLHandlerMethods::IGNORE_METHODS",
            "signature":                    "IGNORE_METHODS = Hash[*%w(alias alias_method autoload attr attr_accessor",
            "source":                       "IGNORE_METHODS = Hash[*%w(alias alias_method autoload attr attr_accessor\nattr_reader attr_writer extend include public private protected\nprivate_constant).map {|n| [n, true] }.flatten]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "Hash[*%w(alias alias_method autoload attr attr_accessor\nattr_reader attr_writer extend include public private protected\nprivate_constant).map {|n| [n, true] }.flatten]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fdsl_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ADSLHandlerMethods%3A%3AIGNORE_METHODS"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ExceptionHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'raise' calls inside methods",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/exception_handler.rb"}],
            "name":                         "ExceptionHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ExceptionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AExceptionHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fexception_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AExceptionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/exception_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ExceptionHandler",
            "path":                         "YARD::Handlers::Ruby::ExceptionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return unless owner.is_a?(MethodObject) # Only methods yield\n  return if [:command_call, :call].include? statement.type\n  return if owner.has_tag?(:raise)\n\n  klass = nil\n  if statement.call?\n    params = statement.parameters(false)\n    if params.size == 1\n      if params.first.ref? && params.first.first.type != :ident\n        klass = params.first.source\n      elsif params.first.call? && params.first.method_name(true) == :new\n        klass = params.first.namespace.source\n      end\n    elsif params.size > 1\n      klass = params.first.source\n    end\n  end\n\n  owner.docstring.add_tag YARD::Tags::Tag.new(:raise, '', klass) if klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fexception_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AExceptionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ExtendHandler#scope","YARD::Handlers::Ruby::ExtendHandler#process_mixin"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'extend' call to include modules into the class scope of another",
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/ruby/extend_handler.rb"}],
            "name":                         "ExtendHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ExtendHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::MixinHandler",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler%23scope","YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler%23process_mixin"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fextend_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/handlers/ruby/extend_handler.rb"}],
            "name":                         "process_mixin",
            "namespace":                    "YARD::Handlers::Ruby::ExtendHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"mixin"}],
            "path":                         "YARD::Handlers::Ruby::ExtendHandler#process_mixin",
            "scope":                        "instance",
            "signature":                    "def process_mixin(mixin)",
            "source":                       "def process_mixin(mixin)\n  if mixin == s(:var_ref, s(:kw, \"self\"))\n    if namespace.is_a?(ClassObject)\n      raise UndocumentableError, \"extend(self) statement on class\"\n    end\n    namespace.mixins(scope) << namespace\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fextend_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler%23process_mixin"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/extend_handler.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::Handlers::Ruby::ExtendHandler",
            "path":                         "YARD::Handlers::Ruby::ExtendHandler#scope",
            "scope":                        "instance",
            "signature":                    "def scope; :class end",
            "source":                       "def scope; :class end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fextend_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AExtendHandler%23scope"
        },
        {
            "attributes":                   {"class":{},"instance":{"name":{"write":null,"read":"YARD::Handlers::Ruby::HandlesExtension#name"}}},
            "children":                     ["YARD::Handlers::Ruby::HandlesExtension#initialize","YARD::Handlers::Ruby::HandlesExtension#matches?","YARD::Handlers::Ruby::HandlesExtension#name"],
            "current_file_has_comments":    true,
            "docstring":                    "To implement a custom handler matcher, subclass this class and implement\n{#matches?} to return whether a node matches the handler.",
            "dynamic":                      true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "HandlesExtension",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::HandlesExtension",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23initialize","YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23matches%3F","YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23name"],
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new extension with a specific matcher value +name+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Handlers::Ruby::HandlesExtension",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Handlers::Ruby::HandlesExtension#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(name) @name = name end",
            "source":                       "def initialize(name) @name = name end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests if the node matches the handler",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "matches?",
            "namespace":                    "YARD::Handlers::Ruby::HandlesExtension",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Handlers::Ruby::HandlesExtension#matches?",
            "scope":                        "instance",
            "signature":                    "def matches?(node) raise NotImplementedError end",
            "source":                       "def matches?(node) raise NotImplementedError end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23matches%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Handlers::Ruby::HandlesExtension",
            "path":                         "YARD::Handlers::Ruby::HandlesExtension#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension%23name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::Base","YARD::Handlers::Ruby::Legacy::DSLHandler","YARD::Handlers::Ruby::Legacy::MixinHandler","YARD::Handlers::Ruby::Legacy::YieldHandler","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD::Handlers::Ruby::Legacy::AliasHandler","YARD::Handlers::Ruby::Legacy::MethodHandler","YARD::Handlers::Ruby::Legacy::ModuleHandler","YARD::Handlers::Ruby::Legacy::ExtendHandler","YARD::Handlers::Ruby::Legacy::CommentHandler","YARD::Handlers::Ruby::Legacy::ConstantHandler","YARD::Handlers::Ruby::Legacy::ExceptionHandler","YARD::Handlers::Ruby::Legacy::AttributeHandler","YARD::Handlers::Ruby::Legacy::VisibilityHandler","YARD::Handlers::Ruby::Legacy::ClassVariableHandler","YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler","YARD::Handlers::Ruby::Legacy::ClassConditionHandler","YARD::Handlers::Ruby::Legacy::PrivateConstantHandler"],
            "current_file_has_comments":    true,
            "docstring":                    "Handlers for old Ruby 1.8 parser",
            "dynamic":                      true,
            "files":                        [{"file_line":82,"file_path":"lib/yard/autoload.rb"},{"file_line":3,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"},{"file_line":4,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"}],
            "name":                         "Legacy",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::Legacy",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ADSLHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AYieldHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAliasHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMethodHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ACommentHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExceptionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAttributeHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AVisibilityHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleFunctionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler"],
            "y_ld:files":                   [{"file_line":82,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::AliasHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles alias and alias_method calls",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/alias_handler.rb"}],
            "name":                         "AliasHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::AliasHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAliasHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Falias_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAliasHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/alias_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::AliasHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::AliasHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if TkALIAS === statement.tokens.first\n    tokens = statement.tokens[2..-1].to_s.split(/\\s+/)\n    names = [tokens[0], tokens[1]].map {|t| t.gsub(/^:(['\"])?(.+?)\\1?$|^(:)(.+)/, '\\2') }\n  else\n    names = tokval_list(statement.tokens[2..-1], :attr)\n  end\n  raise YARD::Parser::UndocumentableError, statement.tokens.first.text if names.size != 2\n\n  new_meth, old_meth = names[0].to_sym, names[1].to_sym\n  old_obj = namespace.child(:name => old_meth, :scope => scope)\n  new_obj = register MethodObject.new(namespace, new_meth, scope) do |o|\n    o.add_file(parser.file, statement.tokens.first.line_no, statement.comments)\n  end\n\n  if old_obj\n    new_obj.signature = old_obj.signature\n    new_obj.source = old_obj.source\n    new_obj.docstring = old_obj.docstring + YARD::Docstring.new(statement.comments)\n    new_obj.docstring.line_range = statement.comments_range\n    new_obj.docstring.hash_flag = statement.comments_hash_flag\n    new_obj.docstring.object = new_obj\n  else\n    new_obj.signature = \"def #{new_meth}\" # this is all we know.\n  end\n\n  namespace.aliases[new_obj] = old_meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Falias_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAliasHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::AttributeHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles +attr_*+ statements in modules/classes",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/attribute_handler.rb"}],
            "name":                         "AttributeHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::AttributeHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAttributeHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fattribute_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAttributeHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/attribute_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::AttributeHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::AttributeHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  begin\n    attr_type   = statement.tokens.first.text.to_sym\n    symbols     = tokval_list statement.tokens[2..-1], :attr, TkTRUE, TkFALSE\n    read, write = true, false\n  rescue SyntaxError\n    raise YARD::Parser::UndocumentableError, attr_type\n  end\n\n  # Change read/write based on attr_reader/writer/accessor\n  case attr_type\n  when :attr\n    # In the case of 'attr', the second parameter (if given) isn't a symbol.\n    write = symbols.pop if symbols.size == 2\n  when :attr_accessor\n    write = true\n  when :attr_reader\n    # change nothing\n  when :attr_writer\n    read, write = false, true\n  end\n\n  # Add all attributes\n  symbols.each do |name|\n    namespace.attributes[scope][name] = SymbolHash[:read => nil, :write => nil]\n\n    # Show their methods as well\n    {:read => name, :write => \"#{name}=\"}.each do |type, meth|\n      if (type == :read ? read : write)\n        o = MethodObject.new(namespace, meth, scope)\n        if type == :write\n          o.parameters = [['value', nil]]\n          src = \"def #{meth}(value)\"\n          full_src = \"#{src}\\n  @#{name} = value\\nend\"\n          doc = \"Sets the attribute #{name}\\n@param value the value to set the attribute #{name} to.\"\n        else\n          src = \"def #{meth}\"\n          full_src = \"#{src}\\n  @#{name}\\nend\"\n          doc = \"Returns the value of attribute #{name}\"\n        end\n        o.source ||= full_src\n        o.signature ||= src\n        register(o)\n        o.docstring = doc if o.docstring.blank?(false)\n\n        # Regsiter the object explicitly\n        namespace.attributes[scope][name][type] = o\n      elsif obj = namespace.children.find {|o| o.name == meth.to_sym && o.scope == scope }\n        # register an existing method as attribute\n        namespace.attributes[scope][name][type] = obj\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fattribute_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AAttributeHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::Base.handles?","YARD::Handlers::Ruby::Legacy::Base#parse_block","YARD::Handlers::Ruby::Legacy::Base#call_params","YARD::Handlers::Ruby::Legacy::Base#caller_method","YARD::Handlers::Ruby::Legacy::Base#extract_method_details","YARD::Handlers::Ruby::Legacy::Base#tokval","YARD::Handlers::Ruby::Legacy::Base#tokval_list"],
            "current_file_has_comments":    true,
            "docstring":                    "This is the base handler for the legacy parser. To implement a legacy\nhandler, subclass this class.",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "instance_mixins":              ["YARD::Parser::Ruby::Legacy::RubyToken"],
            "name":                         "Base",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::Base",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase.handles%3F","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23parse_block","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23call_params","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23caller_method","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23extract_method_details","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23tokval","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23tokval_list"],
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "call_params",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#call_params",
            "scope":                        "instance",
            "signature":                    "def call_params",
            "source":                       "def call_params\n  if statement.tokens.first.is_a?(TkDEF)\n    extract_method_details.last.map {|param| param.first }\n  else\n    tokens = statement.tokens[1..-1]\n    tokval_list(tokens, :attr, :identifier, TkId).map do |value|\n      value.to_s\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23call_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "caller_method",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#caller_method",
            "scope":                        "instance",
            "signature":                    "def caller_method",
            "source":                       "def caller_method\n  if statement.tokens.first.is_a?(TkIDENTIFIER)\n    statement.tokens.first.text\n  elsif statement.tokens.first.is_a?(TkDEF)\n    extract_method_details.first\n  else\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23caller_method"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracts method information for macro expansion only",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "extract_method_details",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#extract_method_details",
            "scope":                        "instance",
            "signature":                    "def extract_method_details",
            "source":                       "def extract_method_details\n  if statement.tokens.to_s =~ /^def\\s+(#{METHODMATCH})(?:(?:\\s+|\\s*\\()(.*)(?:\\)\\s*$)?)?/m\n    meth, args = $1, $2\n    meth.gsub!(/\\s+/,'')\n    args = tokval_list(Parser::Ruby::Legacy::TokenList.new(args), :all)\n    args.map! {|a| k, v = *a.split('=', 2); [k.strip, (v ? v.strip : nil)] } if args\n    if meth =~ /(?:#{NSEPQ}|#{CSEPQ})([^#{NSEP}#{CSEPQ}]+)$/\n      meth = $`\n    end\n    return meth, args\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23extract_method_details"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a statement's block with a set of state values. If the\nstatement has no block, nothing happens. A description of state\nvalues can be found at {Handlers::Base#push_state}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "parse_block",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#parse_block",
            "scope":                        "instance",
            "signature":                    "def parse_block(opts = {})",
            "source":                       "def parse_block(opts = {})\n  push_state(opts) do\n    if statement.block\n      blk = Parser::Ruby::Legacy::StatementList.new(statement.block)\n      parser.process(blk)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23parse_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The string value of a token. For example, the return value for the symbol :sym\nwould be :sym. The return value for a string +\"foo #{ bar}\"+ would be the literal\n+\"foo #{ bar}\"+ without any interpolation. The return value of the identifier\n'test' would be the same value: 'test'. Here is a list of common types and\ntheir return values:",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":116,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "tokval",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"token"},{"parm_type":null,"parm_name":"*accepted_types"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#tokval",
            "scope":                        "instance",
            "signature":                    "def tokval(token, *accepted_types)",
            "source":                       "def tokval(token, *accepted_types)\n  accepted_types = [TkVal] if accepted_types.empty?\n  accepted_types.push(TkNode) if accepted_types.include? TkVal\n\n  if accepted_types.include?(:attr)\n    accepted_types.push(TkSTRING, TkSYMBOL)\n  end\n\n  if accepted_types.include?(:string)\n    accepted_types.push(TkSTRING, TkDSTRING, TkXSTRING, TkDXSTRING)\n  end\n\n  if accepted_types.include?(:identifier)\n    accepted_types.push(TkIDENTIFIER, TkFID, TkGVAR)\n  end\n\n  if accepted_types.include?(:number)\n    accepted_types.push(TkFLOAT, TkINTEGER)\n  end\n\n  return unless accepted_types.any? {|t| t === token }\n\n  case token\n  when TkSTRING, TkDSTRING, TkXSTRING, TkDXSTRING\n    token.text[1..-2]\n  when TkSYMBOL\n    token.text[1..-1].to_sym\n  when TkFLOAT\n    token.text.to_f\n  when TkINTEGER\n    token.text.to_i\n  when TkREGEXP\n    token.text =~ /\\A\\/(.+)\\/([^\\/])\\Z/\n    Regexp.new($1, $2)\n  when TkTRUE\n    true\n  when TkFALSE\n    false\n  when TkNIL\n    nil\n  else\n    token.text\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":116,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23tokval"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns a list of symbols or string values from a statement.\nThe list must be a valid comma delimited list, and values\nwill only be returned to the end of the list only.\n\nExample:\n  attr_accessor :a, 'b', :c, :d => ['a', 'b', 'c', 'd']\n  attr_accessor 'a', UNACCEPTED_TYPE, 'c' => ['a', 'c']\n\nThe tokval list of a {Parser::Ruby::Legacy::TokenList} of the above\ncode would be the {#tokval} value of :a, 'b',\n:c and :d.\n\nIt should also be noted that this function stops immediately at\nany ruby keyword encountered:\n  \"attr_accessor :a, :b, :c if x == 5\"  => ['a', 'b', 'c']",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":182,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "tokval_list",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"tokenlist"},{"parm_type":null,"parm_name":"*accepted_types"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::Base#tokval_list",
            "scope":                        "instance",
            "signature":                    "def tokval_list(tokenlist, *accepted_types)",
            "source":                       "def tokval_list(tokenlist, *accepted_types)\n  return [] unless tokenlist\n  out = [[]]\n  parencount, beforeparen = 0, 0\n  needcomma = false\n  seen_comma = true\n  tokenlist.each do |token|\n    tokval = accepted_types == [:all] ? token.text : tokval(token, *accepted_types)\n    parencond = !out.last.empty? && tokval != nil\n    #puts \"#{seen_comma.inspect} #{parencount} #{token.class.class_name} #{out.inspect}\"\n    case token\n    when TkCOMMA\n      if parencount == 0\n        out << [] unless out.last.empty?\n        needcomma = false\n        seen_comma = true\n      else\n        out.last << token.text if parencond\n      end\n    when TkLPAREN\n      if seen_comma\n        beforeparen += 1\n      else\n        parencount += 1\n        out.last << token.text if parencond\n      end\n    when TkRPAREN\n      if beforeparen > 0\n        beforeparen -= 1\n      else\n        out.last << token.text if parencount > 0 && tokval != nil\n        parencount -= 1\n      end\n    when TkLBRACE, TkLBRACK, TkDO\n      parencount += 1\n      out.last << token.text if tokval != nil\n    when TkRBRACE, TkRBRACK, TkEND\n      out.last << token.text if tokval != nil\n      parencount -= 1\n    else\n      break if TkKW === token && ![TkTRUE, TkFALSE, TkSUPER, TkSELF, TkNIL].include?(token.class)\n\n      seen_comma = false unless TkWhitespace === token\n      if parencount == 0\n        next if needcomma\n        next if TkWhitespace === token\n        if tokval != nil\n          out.last << tokval\n        else\n          out.last.clear\n          needcomma = true\n        end\n      elsif parencond\n        needcomma = true\n        out.last << token.text\n      end\n    end\n\n    if beforeparen == 0 && parencount < 0\n      break\n    end\n  end\n  # Flatten any single element lists\n  out.map {|e| e.empty? ? nil : (e.size == 1 ? e.pop : e.flatten.join) }.compact\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":182,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase%23tokval_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/handlers/ruby/legacy/base.rb"}],
            "name":                         "handles?",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"stmt"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::Base.handles?",
            "scope":                        "class",
            "signature":                    "def self.handles?(stmt)",
            "source":                       "def self.handles?(stmt)\n  handlers.any? do |a_handler|\n    case a_handler\n    when String\n      stmt.tokens.first.text == a_handler\n    when Regexp\n      stmt.tokens.to_s =~ a_handler\n    else\n      a_handler == stmt.tokens.first.class\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fbase.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase.handles%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ClassConditionHandler#process","YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_condition","YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_then_block","YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_else_block"],
            "current_file_has_comments":    true,
            "docstring":                    "Matches if/unless conditions inside classes and attempts to process only\none branch (by evaluating the condition if possible).",
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/ruby/legacy/class_condition_handler.rb"}],
            "name":                         "ClassConditionHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassConditionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_condition","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_then_block","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_else_block"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the condition part of the if/unless statement",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/handlers/ruby/legacy/class_condition_handler.rb"}],
            "name":                         "parse_condition",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_condition",
            "scope":                        "instance",
            "signature":                    "def parse_condition",
            "source":                       "def parse_condition\n  condition = nil\n\n  # Right now we can handle very simple unary conditions like:\n  #   if true\n  #   if false\n  #   if 0\n  #   if 100 (not 0)\n  #   if defined? SOME_CONSTANT\n  #\n  # The last case will do a lookup in the registry and then one\n  # in the Ruby world (using eval).\n  case statement.tokens[1..-1].to_s.strip\n  when /^(\\d+)$/\n    condition = $1 != \"0\"\n  when /^defined\\?\\s*\\(?(.+?)\\)?$/\n    # defined? keyword used, let's see if we can look up the name\n    # in the registry, then we'll try using Ruby's powers. eval() is not\n    # *too* dangerous here since code is not actually executed.\n    name = $1\n    obj = YARD::Registry.resolve(namespace, name, true)\n    begin\n      condition = true if obj || Object.instance_eval(\"defined? #{name}\")\n    rescue SyntaxError, NameError\n      condition = false\n    end\n  when \"true\"\n    condition = true\n  when \"false\"\n    condition = false\n  end\n\n  if TkUNLESS === statement.tokens.first\n    condition = !condition if condition != nil\n  end\n  condition\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_condition"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/handlers/ruby/legacy/class_condition_handler.rb"}],
            "name":                         "parse_else_block",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_else_block",
            "scope":                        "instance",
            "signature":                    "def parse_else_block",
            "source":                       "def parse_else_block\n  return unless statement.block\n  stmtlist = YARD::Parser::Ruby::Legacy::StatementList\n  stmtlist.new(statement.block).each do |stmt|\n    if TkELSE === stmt.tokens.first\n      parser.process(stmtlist.new(stmt.block))\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_else_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/handlers/ruby/legacy/class_condition_handler.rb"}],
            "name":                         "parse_then_block",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassConditionHandler#parse_then_block",
            "scope":                        "instance",
            "signature":                    "def parse_then_block",
            "source":                       "def parse_then_block\n  parse_block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23parse_then_block"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/legacy/class_condition_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassConditionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassConditionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  condition = parse_condition\n  if condition == nil\n    # Parse both blocks if we're unsure of the condition\n    parse_then_block\n    parse_else_block\n  elsif condition\n    parse_then_block\n  else\n    parse_else_block\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_condition_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassConditionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ClassHandler#process","YARD::Handlers::Ruby::Legacy::ClassHandler#extract_parameters","YARD::Handlers::Ruby::Legacy::ClassHandler#create_struct_superclass","YARD::Handlers::Ruby::Legacy::ClassHandler#struct_superclass_name","YARD::Handlers::Ruby::Legacy::ClassHandler#parse_struct_subclass","YARD::Handlers::Ruby::Legacy::ClassHandler#parse_superclass"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles class declarations",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::StructHandlerMethods"],
            "name":                         "ClassHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23extract_parameters","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23create_struct_superclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23struct_superclass_name","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23parse_struct_subclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23parse_superclass"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "create_struct_superclass",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"},{"parm_type":null,"parm_name":"superclass_def"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#create_struct_superclass",
            "scope":                        "instance",
            "signature":                    "def create_struct_superclass(superclass, superclass_def)",
            "source":                       "def create_struct_superclass(superclass, superclass_def)\n  return if superclass == \"Struct\"\n  the_super = register ClassObject.new(P(\"Struct\"), superclass[8..-1]) do |o|\n    o.superclass = \"Struct\"\n  end\n  parse_struct_subclass(the_super, superclass_def)\n  the_super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23create_struct_superclass"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracts the parameter list from the Struct.new declaration and returns it\nformatted as a list of member names. Expects the user will have used symbols\nto define the struct member names",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "extract_parameters",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superstring"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#extract_parameters",
            "scope":                        "instance",
            "signature":                    "def extract_parameters(superstring)",
            "source":                       "def extract_parameters(superstring)\n  paramstring = superstring.match(/\\A(O?Struct)\\.new\\((.*?)\\)/)[2]\n  paramstring.split(\",\").select {|x| x.strip[0,1] == \":\"}.map {|x| x.strip[1..-1] } # the 1..-1 chops the leading :\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23extract_parameters"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "parse_struct_subclass",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"superclass_def"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#parse_struct_subclass",
            "scope":                        "instance",
            "signature":                    "def parse_struct_subclass(klass, superclass_def)",
            "source":                       "def parse_struct_subclass(klass, superclass_def)\n  # Bounce if there's no parens\n  return unless superclass_def =~ /O?Struct\\.new\\((.*?)\\)/\n  members = extract_parameters(superclass_def)\n  create_attributes(klass, members)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23parse_struct_subclass"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":99,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "parse_superclass",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#parse_superclass",
            "scope":                        "instance",
            "signature":                    "def parse_superclass(superclass)",
            "source":                       "def parse_superclass(superclass)\n  case superclass\n  when /\\A(#{NAMESPACEMATCH})(?:\\s|\\Z)/,\n       /\\A(Struct|OStruct)\\.new/,\n       /\\ADelegateClass\\((.+?)\\)\\s*\\Z/,\n       /\\A(#{NAMESPACEMATCH})\\(/\n    $1\n  when \"self\"\n    namespace.path\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":99,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23parse_superclass"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if statement.tokens.to_s =~ /^class\\s+(#{NAMESPACEMATCH})\\s*(?:<\\s*(.+)|\\Z)/m\n    classname = $1\n    superclass_def = $2\n    superclass = parse_superclass($2)\n    if superclass == \"Struct\"\n      is_a_struct = true\n      superclass = struct_superclass_name(superclass_def)\n      create_struct_superclass(superclass, superclass_def)\n    end\n    undocsuper = $2 && superclass.nil?\n\n    klass = register ClassObject.new(namespace, classname) do |o|\n      o.superclass = superclass if superclass\n      o.superclass.type = :class if o.superclass.is_a?(Proxy)\n    end\n    if is_a_struct\n      parse_struct_subclass(klass, superclass_def)\n    elsif klass\n      create_attributes(klass, members_from_tags(klass))\n    end\n    parse_block(:namespace => klass)\n\n    if undocsuper\n      raise YARD::Parser::UndocumentableError, 'superclass (class was added without superclass)'\n    end\n  elsif statement.tokens.to_s =~ /^class\\s*<<\\s*([\\w\\:]+)/\n    classname = $1\n    proxy = Proxy.new(namespace, classname)\n\n    # Allow constants to reference class names\n    if ConstantObject === proxy\n      if proxy.value =~ /\\A#{NAMESPACEMATCH}\\Z/\n        proxy = Proxy.new(namespace, proxy.value)\n      else\n        raise YARD::Parser::UndocumentableError, \"constant class reference '#{classname}'\"\n      end\n    end\n\n    if classname == \"self\"\n      parse_block(:namespace => namespace, :scope => :class)\n    elsif classname[0,1] =~ /[A-Z]/\n      register ClassObject.new(namespace, classname) if Proxy === proxy\n      parse_block(:namespace => proxy, :scope => :class)\n    else\n      raise YARD::Parser::UndocumentableError, \"class '#{classname}'\"\n    end\n  else\n    raise YARD::Parser::UndocumentableError, \"class: #{statement.tokens}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/handlers/ruby/legacy/class_handler.rb"}],
            "name":                         "struct_superclass_name",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassHandler#struct_superclass_name",
            "scope":                        "instance",
            "signature":                    "def struct_superclass_name(superclass)",
            "source":                       "def struct_superclass_name(superclass)\n  if match = superclass.match(/\\A(Struct)\\.new\\((.*?)\\)/)\n    paramstring = match[2].split(\",\")\n    first = paramstring.first.strip\n    if first[0,1] =~ /['\"]/ && first[-1,1] =~ /['\"]/ && first !~ /\\#\\{/\n      return \"Struct::#{first[1..-2]}\"\n    end\n  end\n  \"Struct\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassHandler%23struct_superclass_name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ClassVariableHandler::HANDLER_MATCH","YARD::Handlers::Ruby::Legacy::ClassVariableHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles a class variable (@@variable)",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/class_variable_handler.rb"}],
            "name":                         "ClassVariableHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassVariableHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler%3A%3AHANDLER_MATCH","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_variable_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/legacy/class_variable_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassVariableHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassVariableHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  name, value = *statement.tokens.to_s.split(/\\s*=\\s*/, 2)\n  register ClassVariableObject.new(namespace, name) do |o|\n    o.source = statement\n    o.value = value.strip\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_variable_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/ruby/legacy/class_variable_handler.rb"}],
            "name":                         "HANDLER_MATCH",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ClassVariableHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ClassVariableHandler::HANDLER_MATCH",
            "signature":                    "HANDLER_MATCH = /\\A@@\\w+\\s*=\\s*/m",
            "source":                       "HANDLER_MATCH = /\\A@@\\w+\\s*=\\s*/m",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A@@\\w+\\s*=\\s*/m",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fclass_variable_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AClassVariableHandler%3A%3AHANDLER_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::CommentHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles any lone comment statement in a Ruby file",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/comment_handler.rb"}],
            "name":                         "CommentHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::CommentHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ACommentHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fcomment_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ACommentHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/comment_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::CommentHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::CommentHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  register_docstring(nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fcomment_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ACommentHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ConstantHandler::HANDLER_MATCH","YARD::Handlers::Ruby::Legacy::ConstantHandler#process","YARD::Handlers::Ruby::Legacy::ConstantHandler#process_structclass","YARD::Handlers::Ruby::Legacy::ConstantHandler#extract_parameters"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles any constant assignment",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/constant_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::StructHandlerMethods"],
            "name":                         "ConstantHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ConstantHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%3A%3AHANDLER_MATCH","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23process_structclass","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23extract_parameters"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fconstant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/handlers/ruby/legacy/constant_handler.rb"}],
            "name":                         "extract_parameters",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"parameters"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ConstantHandler#extract_parameters",
            "scope":                        "instance",
            "signature":                    "def extract_parameters(parameters)",
            "source":                       "def extract_parameters(parameters)\n  members = tokval_list(YARD::Parser::Ruby::Legacy::TokenList.new(parameters), TkSYMBOL)\n  members.map {|m| m.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fconstant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23extract_parameters"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/ruby/legacy/constant_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ConstantHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ConstantHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  name, value = *statement.tokens.to_s.split(/\\s*=\\s*/, 2)\n  if value =~ /\\A\\s*Struct.new(?:\\s*\\(?|\\b)/\n    process_structclass(name, $')\n  else\n    register ConstantObject.new(namespace, name) {|o| o.source = statement; o.value = value.strip }\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fconstant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/handlers/ruby/legacy/constant_handler.rb"}],
            "name":                         "process_structclass",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"classname"},{"parm_type":null,"parm_name":"parameters"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ConstantHandler#process_structclass",
            "scope":                        "instance",
            "signature":                    "def process_structclass(classname, parameters)",
            "source":                       "def process_structclass(classname, parameters)\n  klass = create_class(classname, P(:Struct))\n  create_attributes(klass, extract_parameters(parameters))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fconstant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%23process_structclass"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/handlers/ruby/legacy/constant_handler.rb"}],
            "name":                         "HANDLER_MATCH",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ConstantHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ConstantHandler::HANDLER_MATCH",
            "signature":                    "HANDLER_MATCH = /\\A[A-Z]\\w*\\s*=[^=]\\s*/m",
            "source":                       "HANDLER_MATCH = /\\A[A-Z]\\w*\\s*=[^=]\\s*/m",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A[A-Z]\\w*\\s*=[^=]\\s*/m",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fconstant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AConstantHandler%3A%3AHANDLER_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::DSLHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles automatic detection of dsl-style methods",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"}],
            "instance_mixins":              ["YARD::Handlers::Ruby::DSLHandlerMethods","YARD::CodeObjects"],
            "name":                         "DSLHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::DSLHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ADSLHandler%23process"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ADSLHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":11,"file_path":"lib/yard/handlers/ruby/legacy/dsl_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::DSLHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::DSLHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process { handle_comments }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fdsl_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ADSLHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ExceptionHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'raise' calls inside methods",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/exception_handler.rb"}],
            "name":                         "ExceptionHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ExceptionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExceptionHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fexception_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExceptionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/legacy/exception_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ExceptionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ExceptionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return unless owner.is_a?(MethodObject) # Only methods yield\n  return if owner.has_tag?(:raise)\n\n  klass = statement.tokens.to_s[/^raise[\\(\\s]*(#{NAMESPACEMATCH})\\s*(?:\\)|,|\\s(?:if|unless|until)|;|(?:(?:\\.|\\:\\:)\\s*)?new|$)/, 1]\n  owner.docstring.add_tag YARD::Tags::Tag.new(:raise, '', klass) if klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fexception_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExceptionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ExtendHandler#scope","YARD::Handlers::Ruby::Legacy::ExtendHandler#process_mixin"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'extend' call to include modules into the class scope of another",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/extend_handler.rb"}],
            "name":                         "ExtendHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ExtendHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::MixinHandler",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler%23scope","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler%23process_mixin"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fextend_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/handlers/ruby/legacy/extend_handler.rb"}],
            "name":                         "process_mixin",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ExtendHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"mixin"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::ExtendHandler#process_mixin",
            "scope":                        "instance",
            "signature":                    "def process_mixin(mixin)",
            "source":                       "def process_mixin(mixin)\n  if mixin == \"self\"\n    if namespace.is_a?(ClassObject)\n      raise UndocumentableError, \"extend(self) statement on class\"\n    end\n    namespace.mixins(scope) << namespace\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fextend_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler%23process_mixin"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/extend_handler.rb"}],
            "name":                         "scope",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ExtendHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ExtendHandler#scope",
            "scope":                        "instance",
            "signature":                    "def scope; :class end",
            "source":                       "def scope; :class end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fextend_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AExtendHandler%23scope"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::MethodHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles a method definition",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/method_handler.rb"}],
            "name":                         "MethodHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::MethodHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMethodHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMethodHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/legacy/method_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::MethodHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::MethodHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  nobj = namespace\n  mscope = scope\n\n  if statement.tokens.to_s =~ /^def\\s+(#{METHODMATCH})(?:(?:\\s+|\\s*\\()(.*)(?:\\)\\s*$)?)?/m\n    meth, args = $1, $2\n    meth.gsub!(/\\s+/,'')\n    args = tokval_list(YARD::Parser::Ruby::Legacy::TokenList.new(args), :all)\n    args.map! {|a| k, v = *a.split('=', 2); [k.strip, (v ? v.strip : nil)] } if args\n  else\n    raise YARD::Parser::UndocumentableError, \"method: invalid name\"\n  end\n\n  # Class method if prefixed by self(::|.) or Module(::|.)\n  if meth =~ /(?:#{NSEPQ}|#{CSEPQ})([^#{NSEP}#{CSEPQ}]+)$/\n    mscope, meth, prefix = :class, $1, $`\n    if prefix =~ /^[a-z]/ && prefix != \"self\"\n      raise YARD::Parser::UndocumentableError, 'method defined on object instance'\n    end\n    nobj = P(namespace, prefix) unless prefix == \"self\"\n  end\n\n  nobj = P(namespace, nobj.value) while nobj.type == :constant\n  obj = register MethodObject.new(nobj, meth, mscope) do |o|\n    o.explicit = true\n    o.parameters = args\n  end\n\n  # delete any aliases referencing old method\n  nobj.aliases.each do |aobj, name|\n    next unless name == obj.name\n    nobj.aliases.delete(aobj)\n  end if nobj.is_a?(NamespaceObject)\n\n  if mscope == :instance && meth == \"initialize\"\n    unless obj.has_tag?(:return)\n      obj.docstring.add_tag(YARD::Tags::Tag.new(:return,\n        \"a new instance of #{namespace.name}\", namespace.name.to_s))\n    end\n  elsif mscope == :class && obj.docstring.blank? && %w(inherited included\n      extended method_added method_removed method_undefined).include?(meth)\n    obj.docstring.add_tag(YARD::Tags::Tag.new(:private, nil))\n  elsif meth.to_s =~ /\\?$/\n    if obj.tag(:return) && (obj.tag(:return).types || []).empty?\n      obj.tag(:return).types = ['Boolean']\n    elsif obj.tag(:return).nil?\n      unless obj.tags(:overload).any? {|overload| overload.tag(:return) }\n        obj.docstring.add_tag(YARD::Tags::Tag.new(:return, \"\", \"Boolean\"))\n      end\n    end\n  end\n\n  if obj.has_tag?(:option)\n    # create the options parameter if its missing\n    obj.tags(:option).each do |option|\n      expected_param = option.name\n      unless obj.tags(:param).find {|x| x.name == expected_param }\n        new_tag = YARD::Tags::Tag.new(:param, \"a customizable set of options\", \"Hash\", expected_param)\n        obj.docstring.add_tag(new_tag)\n      end\n    end\n  end\n\n  if info = obj.attr_info\n    if meth.to_s =~ /=$/ # writer\n      info[:write] = obj if info[:read]\n    else\n      info[:read] = obj if info[:write]\n    end\n  end\n\n  parse_block(:owner => obj) # mainly for yield/exceptions\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmethod_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMethodHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::MixinHandler#process","YARD::Handlers::Ruby::Legacy::MixinHandler#process_mixin"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles the 'include' statement to mixin a module in the instance scope",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/mixin_handler.rb"}],
            "name":                         "MixinHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::MixinHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler%23process_mixin"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmixin_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/mixin_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::MixinHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::MixinHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  errors = []\n  statement.tokens[1..-1].to_s.split(/\\s*,\\s*/).reverse.each do |mixin|\n    mixin = mixin.strip\n    begin\n      process_mixin(mixin)\n    rescue YARD::Parser::UndocumentableError => err\n      errors << err.message\n    end\n  end\n\n  if errors.size > 0\n    msg = errors.size == 1 ? \": #{errors[0]}\" : \"s: #{errors.join(\", \")}\"\n    raise YARD::Parser::UndocumentableError, \"mixin#{msg} for class #{namespace.path}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmixin_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/handlers/ruby/legacy/mixin_handler.rb"}],
            "name":                         "process_mixin",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::MixinHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"mixin"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::MixinHandler#process_mixin",
            "scope":                        "instance",
            "signature":                    "def process_mixin(mixin)",
            "source":                       "def process_mixin(mixin)\n  unless mixmatch = mixin[/\\A(#{NAMESPACEMATCH})/, 1]\n    raise YARD::Parser::UndocumentableError\n  end\n\n  obj = Proxy.new(namespace, mixmatch)\n\n  case obj\n  when Proxy\n    obj.type = :module\n  when ConstantObject # If a constant is included, use its value as the real object\n    obj = Proxy.new(namespace, obj.value)\n  end\n\n  namespace.mixins(scope).unshift(obj) unless namespace.mixins(scope).include?(obj)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmixin_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AMixinHandler%23process_mixin"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles module_function calls to turn methods into public class methods.\nAlso creates a private instance copy of the method.",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/module_function_handler.rb"}],
            "name":                         "ModuleFunctionHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleFunctionHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmodule_function_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleFunctionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/module_function_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  if statement.tokens.size == 1\n    self.scope = :module\n  else\n    tokval_list(statement.tokens[2..-1], :attr).each do |name|\n      instance_method = MethodObject.new(namespace, name)\n      class_method = MethodObject.new(namespace, name, :module)\n      instance_method.copy_to(class_method)\n      class_method.visibility = :public\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmodule_function_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleFunctionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::ModuleHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles the declaration of a module",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/module_handler.rb"}],
            "name":                         "ModuleHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::ModuleHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmodule_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/module_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::ModuleHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::ModuleHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  modname = statement.tokens.to_s[/^module\\s+(#{NAMESPACEMATCH})/, 1]\n  mod = register ModuleObject.new(namespace, modname)\n  parse_block(:namespace => mod)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fmodule_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AModuleHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::PrivateConstantHandler#process","YARD::Handlers::Ruby::Legacy::PrivateConstantHandler#privatize_constant"],
            "current_file_has_comments":    true,
            "docstring":                    "Sets visibility of a constant (class, module, const)",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/private_constant_handler.rb"}],
            "name":                         "PrivateConstantHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::PrivateConstantHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler%23privatize_constant"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/handlers/ruby/legacy/private_constant_handler.rb"}],
            "name":                         "privatize_constant",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::PrivateConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Handlers::Ruby::Legacy::PrivateConstantHandler#privatize_constant",
            "scope":                        "instance",
            "signature":                    "def privatize_constant(name)",
            "source":                       "def privatize_constant(name)\n  const = Proxy.new(namespace, name)\n  ensure_loaded!(const)\n  const.visibility = :private\nrescue NamespaceMissingError\n  raise UndocumentableError, \"private visibility set on unrecognized constant: #{name}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler%23privatize_constant"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/private_constant_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::PrivateConstantHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::PrivateConstantHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  tokval_list(statement.tokens[2..-1], :attr, TkCONSTANT).each do |name|\n    privatize_constant name\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3APrivateConstantHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::VisibilityHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'private', 'protected', and 'public' calls.",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/visibility_handler.rb"}],
            "name":                         "VisibilityHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::VisibilityHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AVisibilityHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fvisibility_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AVisibilityHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/legacy/visibility_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::VisibilityHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::VisibilityHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  vis = statement.tokens.first.text\n  if statement.tokens.size == 1\n    self.visibility = vis\n  else\n    tokval_list(statement.tokens[2..-1], :attr).each do |name|\n      MethodObject.new(namespace, name, scope) {|o| o.visibility = vis }\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fvisibility_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AVisibilityHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::Legacy::YieldHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'yield' calls",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/legacy/yield_handler.rb"}],
            "name":                         "YieldHandler",
            "namespace":                    "YARD::Handlers::Ruby::Legacy",
            "path":                         "YARD::Handlers::Ruby::Legacy::YieldHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Legacy::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AYieldHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fyield_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AYieldHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/legacy/yield_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::Legacy::YieldHandler",
            "path":                         "YARD::Handlers::Ruby::Legacy::YieldHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return unless owner.is_a?(MethodObject) # Only methods yield\n  return if owner.has_tag? :yield         # Don't override yield tags\n  return if owner.has_tag? :yieldparam    # Same thing.\n\n  yieldtag = YARD::Tags::Tag.new(:yield, \"\", [])\n  tokval_list(statement.tokens[2..-1], Token).each do |item|\n    item = item.inspect unless item.is_a?(String)\n    if item == \"self\"\n      yieldtag.types << '_self'\n      owner.docstring.add_tag YARD::Tags::Tag.new(:yieldparam,\n        \"the object that the method was called on\", owner.namespace.path, '_self')\n    elsif item == \"super\"\n      yieldtag.types << '_super'\n      owner.docstring.add_tag YARD::Tags::Tag.new(:yieldparam,\n        \"the result of the method from the superclass\", nil, '_super')\n    else\n      yieldtag.types << item\n    end\n  end\n\n  owner.docstring.add_tag(yieldtag) unless yieldtag.types.empty?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Flegacy%2Fyield_handler.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ALegacy%3A%3AYieldHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::MethodCallWrapper#matches?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "MethodCallWrapper",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::MethodCallWrapper",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::HandlesExtension",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodCallWrapper%23matches%3F"],
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodCallWrapper",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "matches?",
            "namespace":                    "YARD::Handlers::Ruby::MethodCallWrapper",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Handlers::Ruby::MethodCallWrapper#matches?",
            "scope":                        "instance",
            "signature":                    "def matches?(node)",
            "source":                       "def matches?(node)\n  case node.type\n  when :var_ref\n    if !node.parent || node.parent.type == :list\n      return true if node[0].type == :ident && (name.nil? || node[0][0] == name)\n    end\n  when :fcall, :command, :vcall\n    return true if name.nil? || node[0][0] == name\n  when :call, :command_call\n    return true if name.nil? || node[2][0] == name\n  end\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodCallWrapper%23matches%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::MethodConditionHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles a conditional inside a method",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/method_condition_handler.rb"}],
            "name":                         "MethodConditionHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::MethodConditionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodConditionHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_condition_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodConditionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/method_condition_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::MethodConditionHandler",
            "path":                         "YARD::Handlers::Ruby::MethodConditionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  parse_block(statement.then_block, :owner => owner)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_condition_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodConditionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::MethodHandler#process","YARD::Handlers::Ruby::MethodHandler#format_args","YARD::Handlers::Ruby::MethodHandler#method_signature"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles a method definition",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/method_handler.rb"}],
            "name":                         "MethodHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::MethodHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23format_args","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23method_signature"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/handlers/ruby/method_handler.rb"}],
            "name":                         "format_args",
            "namespace":                    "YARD::Handlers::Ruby::MethodHandler",
            "path":                         "YARD::Handlers::Ruby::MethodHandler#format_args",
            "scope":                        "instance",
            "signature":                    "def format_args",
            "source":                       "def format_args\n  args = statement.parameters\n  params = []\n  params += args.required_params.map {|a| [a.source, nil] } if args.required_params\n  params += args.optional_params.map {|a| [a[0].source, a[1].source] } if args.optional_params\n  params << [\"*\" + args.splat_param.source, nil] if args.splat_param\n  params += args.required_end_params.map {|a| [a.source, nil] } if args.required_end_params\n  params << [\"&\" + args.block_param.source, nil] if args.block_param\n  params\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23format_args"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":83,"file_path":"lib/yard/handlers/ruby/method_handler.rb"}],
            "name":                         "method_signature",
            "namespace":                    "YARD::Handlers::Ruby::MethodHandler",
            "path":                         "YARD::Handlers::Ruby::MethodHandler#method_signature",
            "scope":                        "instance",
            "signature":                    "def method_signature",
            "source":                       "def method_signature\n  method_name = statement.method_name(true)\n  if statement.parameters.any? {|e| e }\n    \"def #{method_name}(#{statement.parameters.source})\"\n  else\n    \"def #{method_name}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":83,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23method_signature"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/method_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::MethodHandler",
            "path":                         "YARD::Handlers::Ruby::MethodHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  meth = statement.method_name(true).to_s\n  args = format_args\n  blk = statement.block\n  nobj = namespace\n  mscope = scope\n  if statement.type == :defs\n    if statement[0][0].type == :ident\n      raise YARD::Parser::UndocumentableError, 'method defined on object instance'\n    end\n    nobj = P(namespace, statement[0].source) if statement[0][0].type == :const\n    mscope = :class\n  end\n\n  nobj = P(namespace, nobj.value) while nobj.type == :constant\n  obj = register MethodObject.new(nobj, meth, mscope) do |o|\n    o.signature = method_signature\n    o.explicit = true\n    o.parameters = args\n  end\n\n  # delete any aliases referencing old method\n  nobj.aliases.each do |aobj, name|\n    next unless name == obj.name\n    nobj.aliases.delete(aobj)\n  end if nobj.is_a?(NamespaceObject)\n\n  if mscope == :instance && meth == \"initialize\"\n    unless obj.has_tag?(:return)\n      obj.docstring.add_tag(YARD::Tags::Tag.new(:return,\n        \"a new instance of #{namespace.name}\", namespace.name.to_s))\n    end\n  elsif mscope == :class && obj.docstring.blank? && %w(inherited included\n      extended method_added method_removed method_undefined).include?(meth)\n    obj.docstring.add_tag(YARD::Tags::Tag.new(:private, nil))\n  elsif meth.to_s =~ /\\?$/\n    if obj.tag(:return) && (obj.tag(:return).types || []).empty?\n      obj.tag(:return).types = ['Boolean']\n    elsif obj.tag(:return).nil?\n      unless obj.tags(:overload).any? {|overload| overload.tag(:return) }\n        obj.docstring.add_tag(YARD::Tags::Tag.new(:return, \"\", \"Boolean\"))\n      end\n    end\n  end\n\n  if obj.has_tag?(:option)\n    # create the options parameter if its missing\n    obj.tags(:option).each do |option|\n      expected_param = option.name\n      unless obj.tags(:param).find {|x| x.name == expected_param }\n        new_tag = YARD::Tags::Tag.new(:param, \"a customizable set of options\", \"Hash\", expected_param)\n        obj.docstring.add_tag(new_tag)\n      end\n    end\n  end\n\n  if info = obj.attr_info\n    if meth.to_s =~ /=$/ # writer\n      info[:write] = obj if info[:read]\n    else\n      info[:read] = obj if info[:write]\n    end\n  end\n\n  parse_block(blk, :owner => obj) # mainly for yield/exceptions\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmethod_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMethodHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::MixinHandler#process","YARD::Handlers::Ruby::MixinHandler#process_mixin"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles the 'include' statement to mixin a module in the instance scope",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/mixin_handler.rb"}],
            "name":                         "MixinHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::MixinHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler%23process_mixin"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmixin_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/mixin_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::MixinHandler",
            "path":                         "YARD::Handlers::Ruby::MixinHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  errors = []\n  statement.parameters(false).reverse.each do |mixin|\n    begin\n      process_mixin(mixin)\n    rescue YARD::Parser::UndocumentableError => err\n      errors << err.message\n    end\n  end\n  if errors.size > 0\n    msg = errors.size == 1 ? \": #{errors[0]}\" : \"s: #{errors.join(\", \")}\"\n    raise YARD::Parser::UndocumentableError, \"mixin#{msg} for class #{namespace.path}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmixin_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler%23process"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/handlers/ruby/mixin_handler.rb"}],
            "name":                         "process_mixin",
            "namespace":                    "YARD::Handlers::Ruby::MixinHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"mixin"}],
            "path":                         "YARD::Handlers::Ruby::MixinHandler#process_mixin",
            "scope":                        "instance",
            "signature":                    "def process_mixin(mixin)",
            "source":                       "def process_mixin(mixin)\n  raise YARD::Parser::UndocumentableError unless mixin.ref?\n  raise YARD::Parser::UndocumentableError if mixin.first.type == :ident\n\n  case obj = Proxy.new(namespace, mixin.source)\n  when Proxy\n    obj.type = :module\n  when ConstantObject # If a constant is included, use its value as the real object\n    obj = Proxy.new(namespace, obj.value)\n  end\n\n  namespace.mixins(scope).unshift(obj) unless namespace.mixins(scope).include?(obj)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmixin_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AMixinHandler%23process_mixin"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ModuleFunctionHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles module_function calls to turn methods into public class methods.\nAlso creates a private instance copy of the method.",
            "files":                        [{"file_line":3,"file_path":"lib/yard/handlers/ruby/module_function_handler.rb"}],
            "name":                         "ModuleFunctionHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ModuleFunctionHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleFunctionHandler%23process"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmodule_function_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleFunctionHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":7,"file_path":"lib/yard/handlers/ruby/module_function_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ModuleFunctionHandler",
            "path":                         "YARD::Handlers::Ruby::ModuleFunctionHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return if (ident = statement.jump(:ident)) == statement\n  case statement.type\n  when :var_ref, :vcall\n    self.scope = :module\n  when :fcall, :command\n    statement[1].traverse do |node|\n      case node.type\n      when :symbol; name = node.first.source\n      when :string_content; name = node.source\n      else next\n      end\n      instance_method = MethodObject.new(namespace, name)\n      class_method = MethodObject.new(namespace, name, :module)\n      instance_method.copy_to(class_method)\n      class_method.visibility = :public\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmodule_function_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleFunctionHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::ModuleHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles the declaration of a module",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/module_handler.rb"}],
            "name":                         "ModuleHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::ModuleHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmodule_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/module_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::ModuleHandler",
            "path":                         "YARD::Handlers::Ruby::ModuleHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  modname = statement[0].source\n  mod = register ModuleObject.new(namespace, modname)\n  parse_block(statement[1], :namespace => mod)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fmodule_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AModuleHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::PrivateConstantHandler#process","YARD::Handlers::Ruby::PrivateConstantHandler#privatize_constant"],
            "current_file_has_comments":    true,
            "docstring":                    "Sets visibility of a constant (class, module, const)",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/private_constant_handler.rb"}],
            "name":                         "PrivateConstantHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::PrivateConstantHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler%23process","YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler%23privatize_constant"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/handlers/ruby/private_constant_handler.rb"}],
            "name":                         "privatize_constant",
            "namespace":                    "YARD::Handlers::Ruby::PrivateConstantHandler",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Handlers::Ruby::PrivateConstantHandler#privatize_constant",
            "scope":                        "instance",
            "signature":                    "def privatize_constant(node)",
            "source":                       "def privatize_constant(node)\n  if node.literal? || (node.type == :var_ref && node[0].type == :const)\n    node = node.jump(:tstring_content, :const)\n    const = Proxy.new(namespace, node[0])\n    ensure_loaded!(const)\n    const.visibility = :private\n  else\n    raise UndocumentableError, \"invalid argument to private_constant: #{node.source}\"\n  end\nrescue NamespaceMissingError\n  raise UndocumentableError, \"private visibility set on unrecognized constant: #{node[0]}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler%23privatize_constant"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/private_constant_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::PrivateConstantHandler",
            "path":                         "YARD::Handlers::Ruby::PrivateConstantHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  errors = []\n  statement.parameters.each do |param|\n    next unless AstNode === param\n    begin\n      privatize_constant(param)\n    rescue UndocumentableError => err\n      errors << err.message\n    end\n  end\n  if errors.size > 0\n    msg = errors.size == 1 ? \": #{errors[0]}\" : \"s: #{errors.join(\", \")}\"\n    raise UndocumentableError, \"private constant#{msg} for #{namespace.path}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fprivate_constant_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3APrivateConstantHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::StructHandlerMethods#member_tag_for_member","YARD::Handlers::Ruby::StructHandlerMethods#members_from_tags","YARD::Handlers::Ruby::StructHandlerMethods#create_member_method?","YARD::Handlers::Ruby::StructHandlerMethods#return_type_from_tag","YARD::Handlers::Ruby::StructHandlerMethods#add_reader_tags","YARD::Handlers::Ruby::StructHandlerMethods#add_writer_tags","YARD::Handlers::Ruby::StructHandlerMethods#create_class","YARD::Handlers::Ruby::StructHandlerMethods#create_writer","YARD::Handlers::Ruby::StructHandlerMethods#create_reader","YARD::Handlers::Ruby::StructHandlerMethods#create_attributes"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods to parse @attr_* tags on a class.",
            "files":                        [{"file_line":6,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "instance_mixins":              ["YARD::CodeObjects"],
            "name":                         "StructHandlerMethods",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23member_tag_for_member","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23members_from_tags","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_member_method%3F","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23return_type_from_tag","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23add_reader_tags","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23add_writer_tags","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_class","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_writer","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_reader","YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_attributes"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the auto-generated docstring for the getter method of a struct's\nmember. This is used so the generated documentation will look just like that\nof an attribute defined using attr_accessor.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "add_reader_tags",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"new_method"},{"parm_type":null,"parm_name":"member"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#add_reader_tags",
            "scope":                        "instance",
            "signature":                    "def add_reader_tags(klass, new_method, member)",
            "source":                       "def add_reader_tags(klass, new_method, member)\n  member_tag = member_tag_for_member(klass, member, :read)\n  return_type = return_type_from_tag(member_tag)\n  getter_doc_text = member_tag ? member_tag.text : \"Returns the value of attribute #{member}\"\n  new_method.docstring.replace(getter_doc_text)\n  new_method.docstring.add_tag YARD::Tags::Tag.new(:return, \"the current value of #{member}\", return_type)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23add_reader_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the auto-generated docstring for the setter method of a struct's\nmember. This is used so the generated documentation will look just like that\nof an attribute defined using attr_accessor.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "add_writer_tags",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"new_method"},{"parm_type":null,"parm_name":"member"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#add_writer_tags",
            "scope":                        "instance",
            "signature":                    "def add_writer_tags(klass, new_method, member)",
            "source":                       "def add_writer_tags(klass, new_method, member)\n  member_tag = member_tag_for_member(klass, member, :write)\n  return_type = return_type_from_tag(member_tag)\n  setter_doc_text = member_tag ? member_tag.text : \"Sets the attribute #{member}\"\n  new_method.docstring.replace(setter_doc_text)\n  new_method.docstring.add_tag YARD::Tags::Tag.new(:param, \"the value to set the attribute #{member} to.\", return_type, \"value\")\n  new_method.docstring.add_tag YARD::Tags::Tag.new(:return, \"the newly set value\", return_type)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23add_writer_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the given member methods and attaches them to the given ClassObject.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":133,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "create_attributes",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"members"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#create_attributes",
            "scope":                        "instance",
            "signature":                    "def create_attributes(klass, members)",
            "source":                       "def create_attributes(klass, members)\n  # For each parameter, add reader and writers\n  members.each do |member|\n    klass.attributes[:instance][member] = SymbolHash[:read => nil, :write => nil]\n    create_writer klass, member if create_member_method?(klass, member, :write)\n    create_reader klass, member if create_member_method?(klass, member, :read)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":133,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_attributes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates and registers a class object with the given name and superclass name.\nReturns it for further use.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":91,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "create_class",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"classname"},{"parm_type":null,"parm_name":"superclass"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#create_class",
            "scope":                        "instance",
            "signature":                    "def create_class(classname, superclass)",
            "source":                       "def create_class(classname, superclass)\n  register ClassObject.new(namespace, classname) do |o|\n    o.superclass = superclass if superclass\n    o.superclass.type = :class if o.superclass.is_a?(Proxy)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":91,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_class"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Determines whether to create an attribute method based on the class's\ntags.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "create_member_method?",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"member"},{"parm_type":":read","parm_name":"type"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#create_member_method?",
            "scope":                        "instance",
            "signature":                    "def create_member_method?(klass, member, type = :read)",
            "source":                       "def create_member_method?(klass, member, type = :read)\n  return true if (klass.tags(:attr) + klass.tags(:attr_reader) + klass.tags(:attr_writer)).empty?\n  return true if member_tag_for_member(klass, member, type)\n  return !member_tag_for_member(klass, member, :write) if type == :read\n  return !member_tag_for_member(klass, member, :read)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_member_method%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the getter (reader) method and attaches it to the class as an attribute.\nAlso sets up the docstring to prettify the documentation output.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "create_reader",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"member"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#create_reader",
            "scope":                        "instance",
            "signature":                    "def create_reader(klass, member)",
            "source":                       "def create_reader(klass, member)\n  new_meth = register MethodObject.new(klass, member, :instance) do |o|\n    o.signature ||= \"def #{member}\"\n    o.source ||= \"#{o.signature}\\n  @#{member}\\nend\"\n  end\n  add_reader_tags(klass, new_meth, member)\n  klass.attributes[:instance][member][:read] = new_meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_reader"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the setter (writer) method and attaches it to the class as an attribute.\nAlso sets up the docstring to prettify the documentation output.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":103,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "create_writer",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"member"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#create_writer",
            "scope":                        "instance",
            "signature":                    "def create_writer(klass, member)",
            "source":                       "def create_writer(klass, member)\n  # We want to convert these members into attributes just like\n  # as if they were declared using attr_accessor.\n  new_meth = register MethodObject.new(klass, \"#{member}=\", :instance) do |o|\n    o.parameters = [['value', nil]]\n    o.signature ||= \"def #{member}=(value)\"\n    o.source ||= \"#{o.signature}\\n  @#{member} = value\\nend\"\n  end\n  add_writer_tags(klass, new_meth, member)\n  klass.attributes[:instance][member][:write] = new_meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":103,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23create_writer"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracts the user's defined @member tag for a given class and its member. Returns\nnil if the user did not define a @member tag for this struct entry.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "member_tag_for_member",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"},{"parm_type":null,"parm_name":"member"},{"parm_type":":read","parm_name":"type"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#member_tag_for_member",
            "scope":                        "instance",
            "signature":                    "def member_tag_for_member(klass, member, type = :read)",
            "source":                       "def member_tag_for_member(klass, member, type = :read)\n  specific_tag = type == :read ? :attr_reader : :attr_writer\n  (klass.tags(specific_tag) + klass.tags(:attr)).find {|tag| tag.name == member}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23member_tag_for_member"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Retrieves all members defined in @attr* tags",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "members_from_tags",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#members_from_tags",
            "scope":                        "instance",
            "signature":                    "def members_from_tags(klass)",
            "source":                       "def members_from_tags(klass)\n  tags = klass.tags(:attr) + klass.tags(:attr_reader) + klass.tags(:attr_writer)\n  tags.map {|t| t.name }.uniq\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23members_from_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets the return type for the member in a nicely formatted string. Used\nto be injected into auto-generated docstrings.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/handlers/ruby/struct_handler_methods.rb"}],
            "name":                         "return_type_from_tag",
            "namespace":                    "YARD::Handlers::Ruby::StructHandlerMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"member_tag"}],
            "path":                         "YARD::Handlers::Ruby::StructHandlerMethods#return_type_from_tag",
            "scope":                        "instance",
            "signature":                    "def return_type_from_tag(member_tag)",
            "source":                       "def return_type_from_tag(member_tag)\n  (member_tag && member_tag.types) ? member_tag.types : \"Object\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fstruct_handler_methods.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AStructHandlerMethods%23return_type_from_tag"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::TestNodeWrapper#matches?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "TestNodeWrapper",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::TestNodeWrapper",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::HandlesExtension",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3ATestNodeWrapper%23matches%3F"],
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ATestNodeWrapper",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3AHandlesExtension"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/handlers/ruby/base.rb"}],
            "name":                         "matches?",
            "namespace":                    "YARD::Handlers::Ruby::TestNodeWrapper",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Handlers::Ruby::TestNodeWrapper#matches?",
            "scope":                        "instance",
            "signature":                    "def matches?(node) !node.send(name).is_a?(FalseClass) end",
            "source":                       "def matches?(node) !node.send(name).is_a?(FalseClass) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3ATestNodeWrapper%23matches%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::VisibilityHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'private', 'protected', and 'public' calls.",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/visibility_handler.rb"}],
            "name":                         "VisibilityHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::VisibilityHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AVisibilityHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fvisibility_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AVisibilityHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":8,"file_path":"lib/yard/handlers/ruby/visibility_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::VisibilityHandler",
            "path":                         "YARD::Handlers::Ruby::VisibilityHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return if (ident = statement.jump(:ident)) == statement\n  case statement.type\n  when :var_ref, :vcall\n    self.visibility = ident.first\n  when :fcall, :command\n    statement[1].traverse do |node|\n      case node.type\n      when :symbol; source = node.first.source\n      when :string_content; source = node.source\n      else next\n      end\n      MethodObject.new(namespace, source, scope) {|o| o.visibility = ident.first }\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fvisibility_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AVisibilityHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Handlers::Ruby::YieldHandler#process"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles 'yield' calls",
            "files":                        [{"file_line":2,"file_path":"lib/yard/handlers/ruby/yield_handler.rb"}],
            "name":                         "YieldHandler",
            "namespace":                    "YARD::Handlers::Ruby",
            "path":                         "YARD::Handlers::Ruby::YieldHandler",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Handlers::Ruby::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AHandlers%3A%3ARuby%3A%3AYieldHandler%23process"],
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fyield_handler.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AYieldHandler",
            "y_ld:superclass":              "YARD%3A%3AHandlers%3A%3ARuby%3A%3ABase"
        },
        {
            "docstring":                    "Main processing callback",
            "files":                        [{"file_line":5,"file_path":"lib/yard/handlers/ruby/yield_handler.rb"}],
            "name":                         "process",
            "namespace":                    "YARD::Handlers::Ruby::YieldHandler",
            "path":                         "YARD::Handlers::Ruby::YieldHandler#process",
            "scope":                        "instance",
            "signature":                    "def process",
            "source":                       "process do\n  return unless owner.is_a?(MethodObject) # Only methods yield\n  return if owner.has_tag? :yield         # Don't override yield tags\n  return if owner.has_tag? :yieldparam    # Same thing.\n\n  yieldtag = YARD::Tags::Tag.new(:yield, \"\", [])\n\n  if statement.type == :yield\n    statement.jump(:list).children.each do |item|\n      if item == s(:var_ref, s(:kw, \"self\"))\n        yieldtag.types << '_self'\n        owner.docstring.add_tag YARD::Tags::Tag.new(:yieldparam,\n          \"the object that the method was called on\", owner.namespace.path, '_self')\n      elsif item == s(:zsuper)\n        yieldtag.types << '_super'\n        owner.docstring.add_tag YARD::Tags::Tag.new(:yieldparam,\n          \"the result of the method from the superclass\", nil, '_super')\n      else\n        yieldtag.types << item.source\n      end\n    end\n  end\n\n  owner.docstring.add_tag(yieldtag) unless yieldtag.types.empty?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fhandlers%2Fruby%2Fyield_handler.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AHandlers%3A%3ARuby%3A%3AYieldHandler%23process"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::I18n::Text","YARD::I18n::Message","YARD::I18n::Messages","YARD::I18n::PotGenerator"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for internationalization (i18n)",
            "dynamic":                      true,
            "files":                        [{"file_line":135,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/i18n/text.rb"},{"file_line":4,"file_path":"lib/yard/i18n/message.rb"},{"file_line":2,"file_path":"lib/yard/i18n/messages.rb"},{"file_line":4,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "I18n",
            "namespace":                    "YARD",
            "path":                         "YARD::I18n",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AI18n%3A%3AText","YARD%3A%3AI18n%3A%3AMessage","YARD%3A%3AI18n%3A%3AMessages","YARD%3A%3AI18n%3A%3APotGenerator"],
            "y_ld:files":                   [{"file_line":135,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fi18n%2Ftext.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AI18n"
        },
        {
            "attributes":                   {"class":{},"instance":{"comments":{"write":null,"read":"YARD::I18n::Message#comments"},"id":{"write":null,"read":"YARD::I18n::Message#id"},"locations":{"write":null,"read":"YARD::I18n::Message#locations"}}},
            "children":                     ["YARD::I18n::Message#id","YARD::I18n::Message#locations","YARD::I18n::Message#comments","YARD::I18n::Message#initialize","YARD::I18n::Message#add_location","YARD::I18n::Message#add_comment","YARD::I18n::Message#=="],
            "current_file_has_comments":    true,
            "docstring":                    "+Message+ is a translation target message. It has message ID as\n{#id} and some properties {#locations} and {#comments}.",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "Message",
            "namespace":                    "YARD::I18n",
            "path":                         "YARD::I18n::Message",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AI18n%3A%3AMessage%23id","YARD%3A%3AI18n%3A%3AMessage%23locations","YARD%3A%3AI18n%3A%3AMessage%23comments","YARD%3A%3AI18n%3A%3AMessage%23initialize","YARD%3A%3AI18n%3A%3AMessage%23add_location","YARD%3A%3AI18n%3A%3AMessage%23add_comment","YARD%3A%3AI18n%3A%3AMessage%23%3D%3D"],
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::I18n::Message",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::I18n::Message#==",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  other.is_a?(self.class) and\n    @id == other.id and\n    @locations == other.locations and\n    @comments == other.comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a comment for the message.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "add_comment",
            "namespace":                    "YARD::I18n::Message",
            "parameters":                   [{"parm_type":null,"parm_name":"comment"}],
            "path":                         "YARD::I18n::Message#add_comment",
            "scope":                        "instance",
            "signature":                    "def add_comment(comment)",
            "source":                       "def add_comment(comment)\n  @comments << comment unless comment.nil?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23add_comment"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds location information for the message.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "add_location",
            "namespace":                    "YARD::I18n::Message",
            "parameters":                   [{"parm_type":null,"parm_name":"path"},{"parm_type":null,"parm_name":"line"}],
            "path":                         "YARD::I18n::Message#add_location",
            "scope":                        "instance",
            "signature":                    "def add_location(path, line)",
            "source":                       "def add_location(path, line)\n  @locations << [path, line]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23add_location"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::I18n::Message",
            "path":                         "YARD::I18n::Message#comments",
            "scope":                        "instance",
            "signature":                    "def comments",
            "source":                       "def comments\n  @comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23comments"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "id",
            "namespace":                    "YARD::I18n::Message",
            "path":                         "YARD::I18n::Message#id",
            "scope":                        "instance",
            "signature":                    "def id",
            "source":                       "def id\n  @id\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23id"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a trasnlate target message for message ID +id+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::I18n::Message",
            "parameters":                   [{"parm_type":null,"parm_name":"id"}],
            "path":                         "YARD::I18n::Message#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(id)",
            "source":                       "def initialize(id)\n  @id = id\n  @locations = Set.new\n  @comments = Set.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "path and line number where the message is appered.",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/i18n/message.rb"}],
            "name":                         "locations",
            "namespace":                    "YARD::I18n::Message",
            "path":                         "YARD::I18n::Message#locations",
            "scope":                        "instance",
            "signature":                    "def locations",
            "source":                       "def locations\n  @locations\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fi18n%2Fmessage.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessage%23locations"
        },
        {
            "attributes":                   {"class":{},"instance":{"messages":{"write":null,"read":"YARD::I18n::Messages#messages"}}},
            "children":                     ["YARD::I18n::Messages#initialize","YARD::I18n::Messages#each","YARD::I18n::Messages#[]","YARD::I18n::Messages#register","YARD::I18n::Messages#==","YARD::I18n::Messages#messages"],
            "current_file_has_comments":    true,
            "docstring":                    "Acts as a container for {Message} objects.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/i18n/messages.rb"}],
            "instance_mixins":              ["Enumerable"],
            "name":                         "Messages",
            "namespace":                    "YARD::I18n",
            "path":                         "YARD::I18n::Messages",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AI18n%3A%3AMessages%23initialize","YARD%3A%3AI18n%3A%3AMessages%23each","YARD%3A%3AI18n%3A%3AMessages%23%5B%5D","YARD%3A%3AI18n%3A%3AMessages%23register","YARD%3A%3AI18n%3A%3AMessages%23%3D%3D","YARD%3A%3AI18n%3A%3AMessages%23messages"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Checks if this messages list is equal to another messages list.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::I18n::Messages",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::I18n::Messages#==",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  other.is_a?(self.class) and\n    @messages == other.messages\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "[]",
            "namespace":                    "YARD::I18n::Messages",
            "parameters":                   [{"parm_type":null,"parm_name":"id"}],
            "path":                         "YARD::I18n::Messages#[]",
            "scope":                        "instance",
            "signature":                    "def [](id)",
            "source":                       "def [](id)\n  @messages[id]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23%5B%5D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Enumerates each {Message} in the container.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "each",
            "namespace":                    "YARD::I18n::Messages",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::I18n::Messages#each",
            "scope":                        "instance",
            "signature":                    "def each(&block)",
            "source":                       "def each(&block)\n  @messages.each_value(&block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23each"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new container.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::I18n::Messages",
            "path":                         "YARD::I18n::Messages#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  @messages = {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "messages",
            "namespace":                    "YARD::I18n::Messages",
            "path":                         "YARD::I18n::Messages#messages",
            "scope":                        "instance",
            "signature":                    "def messages",
            "source":                       "def messages\n  @messages\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23messages"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a {Message}, the mssage ID of which is +id+. If\ncorresponding +Message+ is already registered, the previously\nregistered object is returned.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/i18n/messages.rb"}],
            "name":                         "register",
            "namespace":                    "YARD::I18n::Messages",
            "parameters":                   [{"parm_type":null,"parm_name":"id"}],
            "path":                         "YARD::I18n::Messages#register",
            "scope":                        "instance",
            "signature":                    "def register(id)",
            "source":                       "def register(id)\n  @messages[id] ||= Message.new(id)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fi18n%2Fmessages.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AMessages%23register"
        },
        {
            "attributes":                   {"class":{},"instance":{"messages":{"write":null,"read":"YARD::I18n::PotGenerator#messages"}}},
            "children":                     ["YARD::I18n::PotGenerator#messages","YARD::I18n::PotGenerator#initialize","YARD::I18n::PotGenerator#parse_objects","YARD::I18n::PotGenerator#parse_files","YARD::I18n::PotGenerator#generate","YARD::I18n::PotGenerator#header","YARD::I18n::PotGenerator#generate_message","YARD::I18n::PotGenerator#escape_message_id","YARD::I18n::PotGenerator#register_message","YARD::I18n::PotGenerator#extract_documents","YARD::I18n::PotGenerator#extract_tag_documents","YARD::I18n::PotGenerator#extract_tag_name","YARD::I18n::PotGenerator#extract_tag_text","YARD::I18n::PotGenerator#extract_paragraphs"],
            "current_file_has_comments":    true,
            "docstring":                    "The +PotGenerator+ generates POT format string from\n{CodeObjects::Base} and {CodeObjects::ExtraFileObject}.\n\n== POT and PO\n\nPOT is an acronym for \"Portable Object Template\". POT is a\ntemplate file to create PO file. The extension for POT is\n\".pot\". PO file is an acronym for \"Portable Object\". PO file has\nmany parts of message ID (msgid) that is translation target\nmessage and message string (msgstr) that is translated message\nof message ID. If you want to tranlsate \"Hello\" in English into\n\"Bonjour\" in French, \"Hello\" is the msgid ID and \"Bonjour\" is\nmsgstr. The extension for PO is \".po\".\n\n== How to extract msgids\n\nThe +PotGenerator+ has two parse methods:\n\n* {#parse_objects} for {CodeObjects::Base}\n* {#parse_files} for {CodeObjects::ExtraFileObject}\n\n{#parse_objects} extracts msgids from docstring and tags of\n{CodeObjects::Base} objects. The docstring of\n{CodeObjects::Base} object is parsed and a paragraph is\nextracted as a msgid. Tag name and tag text are extracted as\nmsgids from a tag.\n\n{#parse_files} extracts msgids from\n{CodeObjects::ExtraFileObject} objects. The file content of\n{CodeObjects::ExtraFileObject} object is parsed and a paragraph\nis extracted as a msgid.\n\n== Usage\n\nTo create a .pot file by +PotGenerator+, instantiate a\n+PotGenerator+ with a relative working directory path from a\ndirectory path that has created .pot file, parse\n{CodeObjects::Base} objects and {CodeObjects::ExtraFileObject}\nobjects, generate a POT and write the generated POT to a .pot\nfile. The relative working directory path is \"..\" when the\nworking directory path is \".\"  and the POT is wrote into\n\"po/yard.pot\".",
            "dynamic":                      true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "PotGenerator",
            "namespace":                    "YARD::I18n",
            "path":                         "YARD::I18n::PotGenerator",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AI18n%3A%3APotGenerator%23messages","YARD%3A%3AI18n%3A%3APotGenerator%23initialize","YARD%3A%3AI18n%3A%3APotGenerator%23parse_objects","YARD%3A%3AI18n%3A%3APotGenerator%23parse_files","YARD%3A%3AI18n%3A%3APotGenerator%23generate","YARD%3A%3AI18n%3A%3APotGenerator%23header","YARD%3A%3AI18n%3A%3APotGenerator%23generate_message","YARD%3A%3AI18n%3A%3APotGenerator%23escape_message_id","YARD%3A%3AI18n%3A%3APotGenerator%23register_message","YARD%3A%3AI18n%3A%3APotGenerator%23extract_documents","YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_documents","YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_name","YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_text","YARD%3A%3AI18n%3A%3APotGenerator%23extract_paragraphs"],
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":176,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "escape_message_id",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"message_id"}],
            "path":                         "YARD::I18n::PotGenerator#escape_message_id",
            "scope":                        "instance",
            "signature":                    "def escape_message_id(message_id)",
            "source":                       "def escape_message_id(message_id)\n  message_id.gsub(/(\\\\|\")/) do\n    special_character = $1\n    \"\\\\#{special_character}\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":176,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23escape_message_id"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":187,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "extract_documents",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::I18n::PotGenerator#extract_documents",
            "scope":                        "instance",
            "signature":                    "def extract_documents(object)",
            "source":                       "def extract_documents(object)\n  return if @extracted_objects.has_key?(object)\n\n  @extracted_objects[object] = true\n  case object\n  when CodeObjects::NamespaceObject\n    object.children.each do |child|\n      extract_documents(child)\n    end\n  end\n\n  if object.group\n    message = register_message(object.group)\n    object.files.each do |path, line|\n      message.add_location(path, line)\n    end\n    message.add_comment(object.path) unless object.path.empty?\n  end\n\n  docstring = object.docstring\n  unless docstring.empty?\n    text = Text.new(StringIO.new(docstring))\n    text.extract_messages do |type, *args|\n      case type\n      when :paragraph\n        paragraph, line_no = *args\n        message = register_message(paragraph.rstrip)\n        object.files.each do |path, line|\n          message.add_location(path, (docstring.line || line) + line_no)\n        end\n        message.add_comment(object.path) unless object.path.empty?\n      else\n        raise \"should not reach here: unexpected type: #{type}\"\n      end\n    end\n  end\n  docstring.tags.each do |tag|\n    extract_tag_documents(tag)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":187,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23extract_documents"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":259,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "extract_paragraphs",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"file"}],
            "path":                         "YARD::I18n::PotGenerator#extract_paragraphs",
            "scope":                        "instance",
            "signature":                    "def extract_paragraphs(file)",
            "source":                       "def extract_paragraphs(file)\n  File.open(file.filename) do |input|\n    text = Text.new(input, :have_header => true)\n    text.extract_messages do |type, *args|\n      case type\n      when :attribute\n        name, value, line_no = *args\n        message = register_message(value)\n        message.add_location(file.filename, line_no)\n        message.add_comment(name)\n      when :paragraph\n        paragraph, line_no = *args\n        message = register_message(paragraph.rstrip)\n        message.add_location(file.filename, line_no)\n      else\n        raise \"should not reach here: unexpected type: #{type}\"\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":259,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23extract_paragraphs"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":228,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "extract_tag_documents",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"}],
            "path":                         "YARD::I18n::PotGenerator#extract_tag_documents",
            "scope":                        "instance",
            "signature":                    "def extract_tag_documents(tag)",
            "source":                       "def extract_tag_documents(tag)\n  extract_tag_name(tag)\n  extract_tag_text(tag)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":228,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_documents"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":233,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "extract_tag_name",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"}],
            "path":                         "YARD::I18n::PotGenerator#extract_tag_name",
            "scope":                        "instance",
            "signature":                    "def extract_tag_name(tag)",
            "source":                       "def extract_tag_name(tag)\n  return if tag.name.nil?\n  return if tag.name.is_a?(String) and tag.name.empty?\n  key = \"tag|#{tag.tag_name}|#{tag.name}\"\n  message = register_message(key)\n  tag.object.files.each do |path, line|\n    message.add_location(path, line)\n  end\n  tag_label = \"@#{tag.tag_name}\"\n  tag_label << \" [#{tag.types.join(', ')}]\" if tag.types\n  message.add_comment(tag_label)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":233,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":246,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "extract_tag_text",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"}],
            "path":                         "YARD::I18n::PotGenerator#extract_tag_text",
            "scope":                        "instance",
            "signature":                    "def extract_tag_text(tag)",
            "source":                       "def extract_tag_text(tag)\n  return if tag.text.nil?\n  return if tag.text.empty?\n  message = register_message(tag.text)\n  tag.object.files.each do |path, line|\n    message.add_location(path, line)\n  end\n  tag_label = \"@#{tag.tag_name}\"\n  tag_label << \" [#{tag.types.join(', ')}]\" if tag.types\n  tag_label << \" #{tag.name}\" if tag.name\n  message.add_comment(tag_label)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":246,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23extract_tag_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Generates POT from +@messages+.\n\nOne PO file entry is generated from a +Message+ in\n+@messages+.\n\nLocations of the +Message+ are used to generate the reference\nline that is started with \"#: \". +relative_base_path+ passed\nwhen the generater is created is prepended to each path in location.\n\nComments of the +Message+ are used to generate the\ntranslater-comment line that is started with \"# \".",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":121,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "generate",
            "namespace":                    "YARD::I18n::PotGenerator",
            "path":                         "YARD::I18n::PotGenerator#generate",
            "scope":                        "instance",
            "signature":                    "def generate",
            "source":                       "def generate\n  pot = header\n  sorted_messages = @messages.sort_by do |message|\n    sorted_locations = message.locations.sort_by do |location|\n      location\n    end\n    sorted_locations.first || []\n  end\n  sorted_messages.each do |message|\n    generate_message(pot, message)\n  end\n  pot\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":121,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23generate"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":161,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "generate_message",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"pot"},{"parm_type":null,"parm_name":"message"}],
            "path":                         "YARD::I18n::PotGenerator#generate_message",
            "scope":                        "instance",
            "signature":                    "def generate_message(pot, message)",
            "source":                       "def generate_message(pot, message)\n  message.comments.sort.each do |comment|\n    pot << \"# #{comment}\\n\" unless comment.empty?\n  end\n  message.locations.sort.each do |path, line|\n    pot << \"#: #{@relative_base_path}/#{path}:#{line}\\n\"\n  end\n  escaped_message_id = escape_message_id(message.id)\n  escaped_message_id = escaped_message_id.gsub(/\\n/, \"\\\\\\\\n\\\"\\n\\\"\")\n  pot << \"msgid \\\"#{escaped_message_id}\\\"\\n\"\n  pot << \"msgstr \\\"\\\"\\n\"\n  pot << \"\\n\"\n  pot\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":161,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23generate_message"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":136,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "header",
            "namespace":                    "YARD::I18n::PotGenerator",
            "path":                         "YARD::I18n::PotGenerator#header",
            "scope":                        "instance",
            "signature":                    "def header",
            "source":                       "def header\n  \"# SOME DESCRIPTIVE TITLE.\\n# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER\\n# This file is distributed under the same license as the PACKAGE package.\\n# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\\n#\\n#, fuzzy\\nmsgid \\\"\\\"\\nmsgstr \\\"\\\"\\n\\\"Project-Id-Version: PACKAGE VERSION\\\\n\\\"\\n\\\"Report-Msgid-Bugs-To: \\\\n\\\"\\n\\\"POT-Creation-Date: 2011-11-20 22:17+0900\\\\n\\\"\\n\\\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\\\n\\\"\\n\\\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\\\n\\\"\\n\\\"Language-Team: LANGUAGE <LL@li.org>\\\\n\\\"\\n\\\"Language: \\\\n\\\"\\n\\\"MIME-Version: 1.0\\\\n\\\"\\n\\\"Content-Type: text/plain; charset=UTF-8\\\\n\\\"\\n\\\"Content-Transfer-Encoding: 8bit\\\\n\\\"\\n\\n\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":136,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23header"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a POT generator that uses +relative_base_path+ to\ngenerate locations for a msgid. +relative_base_path+ is\nprepended to all locations.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"relative_base_path"}],
            "path":                         "YARD::I18n::PotGenerator#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(relative_base_path)",
            "source":                       "def initialize(relative_base_path)\n  @relative_base_path = relative_base_path\n  @extracted_objects = {}\n  @messages = Messages.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracted messages.",
            "dynamic":                      true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "messages",
            "namespace":                    "YARD::I18n::PotGenerator",
            "path":                         "YARD::I18n::PotGenerator#messages",
            "scope":                        "instance",
            "signature":                    "def messages",
            "source":                       "def messages\n  @messages\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23messages"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses {CodeObjects::ExtraFileObject} objects and stores\nextracted msgids into {#messages}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":102,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "parse_files",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"files"}],
            "path":                         "YARD::I18n::PotGenerator#parse_files",
            "scope":                        "instance",
            "signature":                    "def parse_files(files)",
            "source":                       "def parse_files(files)\n  files.each do |file|\n    extract_paragraphs(file)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":102,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23parse_files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses {CodeObjects::Base} objects and stores extracted msgids\ninto {#messages}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "parse_objects",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"objects"}],
            "path":                         "YARD::I18n::PotGenerator#parse_objects",
            "scope":                        "instance",
            "signature":                    "def parse_objects(objects)",
            "source":                       "def parse_objects(objects)\n  objects.each do |object|\n    extract_documents(object)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23parse_objects"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":183,"file_path":"lib/yard/i18n/pot_generator.rb"}],
            "name":                         "register_message",
            "namespace":                    "YARD::I18n::PotGenerator",
            "parameters":                   [{"parm_type":null,"parm_name":"id"}],
            "path":                         "YARD::I18n::PotGenerator#register_message",
            "scope":                        "instance",
            "signature":                    "def register_message(id)",
            "source":                       "def register_message(id)\n  @messages.register(id)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":183,"file_path":"lib%2Fyard%2Fi18n%2Fpot_generator.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3APotGenerator%23register_message"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::I18n::Text#initialize","YARD::I18n::Text#extract_messages"],
            "current_file_has_comments":    true,
            "docstring":                    "Provides some convenient features for translating a text.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/i18n/text.rb"}],
            "name":                         "Text",
            "namespace":                    "YARD::I18n",
            "path":                         "YARD::I18n::Text",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AI18n%3A%3AText%23initialize","YARD%3A%3AI18n%3A%3AText%23extract_messages"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fi18n%2Ftext.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AText",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracts translation target messages from +@input+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/i18n/text.rb"}],
            "name":                         "extract_messages",
            "namespace":                    "YARD::I18n::Text",
            "path":                         "YARD::I18n::Text#extract_messages",
            "scope":                        "instance",
            "signature":                    "def extract_messages",
            "source":                       "def extract_messages\n  paragraph = \"\"\n  paragraph_start_line = 0\n  line_no = 0\n  in_header = @options[:have_header]\n\n  @input.each_line do |line|\n    line_no += 1\n    if in_header\n      case line\n      when /^#!\\S+\\s*$/\n        in_header = false unless line_no == 1\n      when /^\\s*#\\s*@(\\S+)\\s*(.+?)\\s*$/\n        name, value = $1, $2\n        yield(:attribute, name, value, line_no)\n      else\n        in_header = false\n        next if line.chomp.empty?\n      end\n      next if in_header\n    end\n\n    case line\n    when /^\\s*$/\n      next if paragraph.empty?\n      yield(:paragraph, paragraph.rstrip, paragraph_start_line)\n      paragraph = \"\"\n    else\n      paragraph_start_line = line_no if paragraph.empty?\n      paragraph << line\n    end\n  end\n  unless paragraph.empty?\n    yield(:paragraph, paragraph.rstrip, paragraph_start_line)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fi18n%2Ftext.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AText%23extract_messages"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a text object that has translation related features for\nthe input text.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/i18n/text.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::I18n::Text",
            "parameters":                   [{"parm_type":null,"parm_name":"input"},{"parm_type":"{}","parm_name":"options"}],
            "path":                         "YARD::I18n::Text#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(input, options={})",
            "source":                       "def initialize(input, options={})\n  @input = input\n  @options = options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fi18n%2Ftext.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AI18n%3A%3AText%23initialize"
        },
        {
            "attributes":                   {"class":{},"instance":{"show_backtraces":{"write":"YARD::Logger#show_backtraces=","read":"YARD::Logger#show_backtraces"}}},
            "children":                     ["YARD::Logger#show_backtraces=","YARD::Logger#show_backtraces","YARD::Logger.instance","YARD::Logger#initialize","YARD::Logger#debug","YARD::Logger#backtrace","YARD::Logger#warn_no_continuations","YARD::Logger#enter_level","YARD::Logger#format_log"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles console logging for info, warnings and errors.\nUses the stdlib Logger class in Ruby for all the backend logic.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/logging.rb"}],
            "name":                         "Logger",
            "namespace":                    "YARD",
            "path":                         "YARD::Logger",
            "source_type":                  "ruby",
            "superclass":                   "Logger",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ALogger%23show_backtraces%3D","YARD%3A%3ALogger%23show_backtraces","YARD%3A%3ALogger.instance","YARD%3A%3ALogger%23initialize","YARD%3A%3ALogger%23debug","YARD%3A%3ALogger%23backtrace","YARD%3A%3ALogger%23warn_no_continuations","YARD%3A%3ALogger%23enter_level","YARD%3A%3ALogger%23format_log"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ALogger",
            "y_ld:superclass":              "Logger"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prints the backtrace +exc+ to the logger as error data.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/logging.rb"}],
            "name":                         "backtrace",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":null,"parm_name":"exc"}],
            "path":                         "YARD::Logger#backtrace",
            "scope":                        "instance",
            "signature":                    "def backtrace(exc)",
            "source":                       "def backtrace(exc)\n  return unless show_backtraces\n  error \"#{exc.class.class_name}: #{exc.message}\"\n  error \"Stack trace:\" +\n    exc.backtrace[0..5].map {|x| \"\\n\\t#{x}\" }.join + \"\\n\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23backtrace"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Changes the debug level to DEBUG if $DEBUG is set\nand writes a debugging message.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/logging.rb"}],
            "name":                         "debug",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Logger#debug",
            "scope":                        "instance",
            "signature":                    "def debug(*args)",
            "source":                       "def debug(*args)\n  self.level = DEBUG if $DEBUG\n  super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23debug"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the logger level for the duration of the block",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/logging.rb"}],
            "name":                         "enter_level",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":"level","parm_name":"new_level"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Logger#enter_level",
            "scope":                        "instance",
            "signature":                    "def enter_level(new_level = level, &block)",
            "source":                       "def enter_level(new_level = level, &block)\n  old_level, self.level = level, new_level\n  yield\n  self.level = old_level\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23enter_level"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Log format (from Logger implementation). Used by Logger internally",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/logging.rb"}],
            "name":                         "format_log",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":null,"parm_name":"sev"},{"parm_type":null,"parm_name":"time"},{"parm_type":null,"parm_name":"prog"},{"parm_type":null,"parm_name":"msg"}],
            "path":                         "YARD::Logger#format_log",
            "scope":                        "instance",
            "signature":                    "def format_log(sev, time, prog, msg)",
            "source":                       "def format_log(sev, time, prog, msg)\n  \"[#{sev.downcase}]: #{msg}\\n\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23format_log"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new logger",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/logging.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Logger#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(*args)",
            "source":                       "def initialize(*args)\n  super\n  self.show_backtraces = true\n  self.level = WARN\n  self.formatter = method(:format_log)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/logging.rb"}],
            "name":                         "show_backtraces",
            "namespace":                    "YARD::Logger",
            "path":                         "YARD::Logger#show_backtraces",
            "scope":                        "instance",
            "signature":                    "def show_backtraces; @show_backtraces || level == DEBUG end",
            "source":                       "def show_backtraces; @show_backtraces || level == DEBUG end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23show_backtraces"
        },
        {
            "docstring":                    "Sets the attribute show_backtraces",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/logging.rb"}],
            "name":                         "show_backtraces=",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Logger#show_backtraces=",
            "scope":                        "instance",
            "signature":                    "def show_backtraces=(value)",
            "source":                       "def show_backtraces=(value)\n  @show_backtraces = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23show_backtraces%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Warns that the Ruby environment does not support continuations. Applies\nto JRuby, Rubinius and MacRuby. This warning will only display once\nper Ruby process.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/logging.rb"}],
            "name":                         "warn_no_continuations",
            "namespace":                    "YARD::Logger",
            "path":                         "YARD::Logger#warn_no_continuations",
            "scope":                        "instance",
            "signature":                    "def warn_no_continuations",
            "source":                       "def warn_no_continuations\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger%23warn_no_continuations"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The logger instance",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/logging.rb"}],
            "name":                         "instance",
            "namespace":                    "YARD::Logger",
            "parameters":                   [{"parm_type":"STDERR","parm_name":"pipe"}],
            "path":                         "YARD::Logger.instance",
            "scope":                        "class",
            "signature":                    "def self.instance(pipe = STDERR)",
            "source":                       "def self.instance(pipe = STDERR)\n  @logger ||= new(pipe)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Flogging.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ALogger.instance"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Options.default_attr","YARD::Options#[]","YARD::Options#[]=","YARD::Options#update","YARD::Options#merge","YARD::Options#to_hash","YARD::Options#each","YARD::Options#inspect","YARD::Options#==","YARD::Options#method_missing","YARD::Options#reset_defaults","YARD::Options#delete","YARD::Options#tap"],
            "current_file_has_comments":    true,
            "docstring":                    "Generalized options class for passing around large amounts of options between objects.\n\nThe options class exists for better visibility and documentability of options being\npassed through to other objects. Because YARD has parser and template architectures\nthat are heavily reliant on options, it is necessary to make these option keys easily\nvisible and understood by developers. Since the options class is more than just a\nbasic Hash, the subclass can provide aliasing and convenience methods to simplify\noption property access, and, if needed, support backward-compatibility for deprecated\nkey names.\n\n== Hash and OpenStruct-like Access\n\nAlthough the options class allows for Hash-like access (<tt>opts[:key]</tt>), the recommended\nmechanism for accessing an option key will be via standard method calls on attributes\n\nThe options class can also act as an open ended key value storage structure (like a\nHash or OpenStruct), and allows for setting and getting of unregistered option keys.\nThis methodology is not recommended, however, and is only supported for backward\ncompatibility inside YARD. Whenever possible, developers should define all keys used\nby an options class.\n\n== Declaring Default Values\n\nNote that the options class can contain default value definitions for certain options,\nbut to initialize these defaults, {#reset_defaults} must be called manually after\ninitialization; the options object is always created empty until defaults are applied.",
            "dynamic":                      true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/options.rb"}],
            "name":                         "Options",
            "namespace":                    "YARD",
            "path":                         "YARD::Options",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AOptions.default_attr","YARD%3A%3AOptions%23%5B%5D","YARD%3A%3AOptions%23%5B%5D%3D","YARD%3A%3AOptions%23update","YARD%3A%3AOptions%23merge","YARD%3A%3AOptions%23to_hash","YARD%3A%3AOptions%23each","YARD%3A%3AOptions%23inspect","YARD%3A%3AOptions%23%3D%3D","YARD%3A%3AOptions%23method_missing","YARD%3A%3AOptions%23reset_defaults","YARD%3A%3AOptions%23delete","YARD%3A%3AOptions%23tap"],
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AOptions",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":156,"file_path":"lib/yard/options.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Options#==",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  case other\n  when Options; to_hash == other.to_hash\n  when Hash; to_hash == other\n  else false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":156,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Delegates calls with Hash syntax to actual method with key name",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/options.rb"}],
            "name":                         "[]",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "YARD::Options#[]",
            "scope":                        "instance",
            "signature":                    "def [](key) send(key) end",
            "source":                       "def [](key) send(key) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23%5B%5D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Delegates setter calls with Hash syntax to the attribute setter with the key name",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":99,"file_path":"lib/yard/options.rb"}],
            "name":                         "[]=",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"key"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Options#[]=",
            "scope":                        "instance",
            "signature":                    "def []=(key, value) send(\"#{key}=\", value) end",
            "source":                       "def []=(key, value) send(\"#{key}=\", value) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":99,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23%5B%5D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes an option value for +key+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":204,"file_path":"lib/yard/options.rb"}],
            "name":                         "delete",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "YARD::Options#delete",
            "scope":                        "instance",
            "signature":                    "def delete(key)",
            "source":                       "def delete(key)\n  val = self[key]\n  if instance_variable_defined?(\"@#{key}\")\n    remove_instance_variable(\"@#{key}\")\n  end\n  val\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":204,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23delete"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Yields over every option key and value",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":142,"file_path":"lib/yard/options.rb"}],
            "name":                         "each",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Options#each",
            "scope":                        "instance",
            "signature":                    "def each(&block)",
            "source":                       "def each(&block)\n  instance_variables.each do |ivar|\n    name = ivar.to_s.sub(/^@/, '')\n    yield(name.to_sym, send(name))\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":142,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23each"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Inspects the object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":150,"file_path":"lib/yard/options.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::Options",
            "path":                         "YARD::Options#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  \"<#{self.class}: #{to_hash.inspect}>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":150,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23inspect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new options object and sets options hash or object value\nonto that object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/options.rb"}],
            "name":                         "merge",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::Options#merge",
            "scope":                        "instance",
            "signature":                    "def merge(opts)",
            "source":                       "def merge(opts)\n  dup.update(opts)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23merge"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Handles setting and accessing of unregistered keys similar\nto an OpenStruct object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":169,"file_path":"lib/yard/options.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Options#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(meth, *args, &block)",
            "source":                       "def method_missing(meth, *args, &block)\n  if meth.to_s =~ /^(.+)=$/\n    log.debug \"Attempting to set unregistered key #{$1} on #{self.class}\"\n    instance_variable_set(\"@#{$1}\", args.first)\n  elsif args.size == 0\n    log.debug \"Attempting to access unregistered key #{meth} on #{self.class}\"\n    instance_variable_get(\"@#{meth}\")\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":169,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23method_missing"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Resets all values to their defaults.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":187,"file_path":"lib/yard/options.rb"}],
            "name":                         "reset_defaults",
            "namespace":                    "YARD::Options",
            "path":                         "YARD::Options#reset_defaults",
            "scope":                        "instance",
            "signature":                    "def reset_defaults",
            "source":                       "def reset_defaults\n  names_set = {}\n  self.class.ancestors.each do |klass| # look at all ancestors\n    defaults = klass.instance_variable_get(\"@defaults\")\n    return unless defaults\n    defaults.each do |key, value|\n      next if names_set[key]\n      names_set[key] = true\n      self[key] = Proc === value ? value.call : value\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":187,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23reset_defaults"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":213,"file_path":"lib/yard/options.rb"}],
            "name":                         "tap",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Options#tap",
            "scope":                        "instance",
            "signature":                    "def tap(&block) yield(self); self end",
            "source":                       "def tap(&block) yield(self); self end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":213,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23tap"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/options.rb"}],
            "name":                         "to_hash",
            "namespace":                    "YARD::Options",
            "path":                         "YARD::Options#to_hash",
            "scope":                        "instance",
            "signature":                    "def to_hash",
            "source":                       "def to_hash\n  opts = {}\n  instance_variables.each do |ivar|\n    name = ivar.to_s.sub(/^@/, '')\n    opts[name.to_sym] = send(name)\n  end\n  opts\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23to_hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Updates values from an options hash or options object on this object.\nAll keys passed should be key names defined by attributes on the class.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":108,"file_path":"lib/yard/options.rb"}],
            "name":                         "update",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"opts"}],
            "path":                         "YARD::Options#update",
            "scope":                        "instance",
            "signature":                    "def update(opts)",
            "source":                       "def update(opts)\n  opts = opts.to_hash if Options === opts\n  opts.each do |key, value|\n    self[key] = value\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":108,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions%23update"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Defines an attribute named +key+ and sets a default value for it",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":79,"file_path":"lib/yard/options.rb"}],
            "name":                         "default_attr",
            "namespace":                    "YARD::Options",
            "parameters":                   [{"parm_type":null,"parm_name":"key"},{"parm_type":null,"parm_name":"default"}],
            "path":                         "YARD::Options.default_attr",
            "scope":                        "class",
            "signature":                    "def self.default_attr(key, default)",
            "source":                       "def self.default_attr(key, default)\n  (@defaults ||= {})[key] = default\n  attr_accessor(key)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":79,"file_path":"lib%2Fyard%2Foptions.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AOptions.default_attr"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::C","YARD::Parser::Ruby","YARD::Parser::Base","YARD::Parser::UndocumentableError","YARD::Parser::ParserSyntaxError","YARD::Parser::OrderedParser","YARD::Parser::SourceParser"],
            "current_file_has_comments":    true,
            "docstring":                    "The parser namespace holds all parsing engines used by YARD.\nCurrently only Ruby and C (Ruby) parsers are implemented.",
            "dynamic":                      true,
            "files":                        [{"file_line":144,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/parser/base.rb"},{"file_line":2,"file_path":"lib/yard/parser/c/c_parser.rb"},{"file_line":2,"file_path":"lib/yard/parser/c/statement.rb"},{"file_line":2,"file_path":"lib/yard/parser/ruby/ast_node.rb"},{"file_line":5,"file_path":"lib/yard/parser/source_parser.rb"},{"file_line":4,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":2,"file_path":"lib/yard/parser/c/comment_parser.rb"},{"file_line":2,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "Parser",
            "namespace":                    "YARD",
            "path":                         "YARD::Parser",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC","YARD%3A%3AParser%3A%3ARuby","YARD%3A%3AParser%3A%3ABase","YARD%3A%3AParser%3A%3AUndocumentableError","YARD%3A%3AParser%3A%3AParserSyntaxError","YARD%3A%3AParser%3A%3AOrderedParser","YARD%3A%3AParser%3A%3ASourceParser"],
            "y_ld:files":                   [{"file_line":144,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AParser"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Base.parse","YARD::Parser::Base#initialize","YARD::Parser::Base#parse","YARD::Parser::Base#tokenize","YARD::Parser::Base#enumerator"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents the abstract base parser class that parses source code in\na specific way. A parser should implement {#parse}, {#tokenize} and\n{#enumerator}.\n\n== Registering a Custom Parser\nTo register a parser, see {SourceParser.register_parser_type}",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "Base",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::Base",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ABase.parse","YARD%3A%3AParser%3A%3ABase%23initialize","YARD%3A%3AParser%3A%3ABase%23parse","YARD%3A%3AParser%3A%3ABase%23tokenize","YARD%3A%3AParser%3A%3ABase%23enumerator"],
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This method should be implemented to return a list of semantic tokens\nrepresenting the source code to be post-processed. Otherwise the method\nshould return nil.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "enumerator",
            "namespace":                    "YARD::Parser::Base",
            "path":                         "YARD::Parser::Base#enumerator",
            "scope":                        "instance",
            "signature":                    "def enumerator",
            "source":                       "def enumerator\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase%23enumerator"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This default constructor does nothing. The subclass is responsible for\nstoring the source contents and filename if they are required.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Parser::Base#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, filename)",
            "source":                       "def initialize(source, filename)\n  raise NotImplementedError, \"invalid parser implementation\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This method should be implemented to parse the source and return itself.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::Base",
            "path":                         "YARD::Parser::Base#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  raise NotImplementedError, \"#{self.class} must implement #parse\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase%23parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "This method should be implemented to tokenize given source",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::Base",
            "path":                         "YARD::Parser::Base#tokenize",
            "scope":                        "instance",
            "signature":                    "def tokenize",
            "source":                       "def tokenize\n  raise NotImplementedError, \"#{self.class} does not support tokenization\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase%23tokenize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Convenience method to create a new parser and {#parse}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/parser/base.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":"nil","parm_name":"filename"}],
            "path":                         "YARD::Parser::Base.parse",
            "scope":                        "class",
            "signature":                    "def self.parse(source, filename = nil)",
            "source":                       "def self.parse(source, filename = nil)\n  new(source, filename).parse\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fparser%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ABase.parse"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::C::CParser","YARD::Parser::C::Statement","YARD::Parser::C::BodyStatement","YARD::Parser::C::ToplevelStatement","YARD::Parser::C::Comment","YARD::Parser::C::CommentParser"],
            "current_file_has_comments":    true,
            "docstring":                    "CRuby Parsing components",
            "dynamic":                      true,
            "files":                        [{"file_line":145,"file_path":"lib/yard/autoload.rb"},{"file_line":3,"file_path":"lib/yard/parser/c/c_parser.rb"},{"file_line":3,"file_path":"lib/yard/parser/c/statement.rb"},{"file_line":3,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "C",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::C",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3ACParser","YARD%3A%3AParser%3A%3AC%3A%3AStatement","YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement","YARD%3A%3AParser%3A%3AC%3A%3AComment","YARD%3A%3AParser%3A%3AC%3A%3ACommentParser"],
            "y_ld:files":                   [{"file_line":145,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC"
        },
        {
            "attributes":                   {"class":{},"instance":{"comments":{"write":"YARD::Parser::C::BodyStatement#comments=","read":"YARD::Parser::C::BodyStatement#comments"}}},
            "children":                     ["YARD::Parser::C::BodyStatement#comments=","YARD::Parser::C::BodyStatement#comments"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "BodyStatement",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::BodyStatement",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::C::Statement",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement%23comments%3D","YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement%23comments"],
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3AC%3A%3AStatement"
        },
        {
            "docstring":                    "Returns the value of attribute comments",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::C::BodyStatement",
            "path":                         "YARD::Parser::C::BodyStatement#comments",
            "scope":                        "instance",
            "signature":                    "def comments",
            "source":                       "def comments\n  @comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement%23comments"
        },
        {
            "docstring":                    "Sets the attribute comments",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments=",
            "namespace":                    "YARD::Parser::C::BodyStatement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::BodyStatement#comments=",
            "scope":                        "instance",
            "signature":                    "def comments=(value)",
            "source":                       "def comments=(value)\n  @comments = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ABodyStatement%23comments%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::C::CParser#initialize","YARD::Parser::C::CParser#parse","YARD::Parser::C::CParser#enumerator","YARD::Parser::C::CParser#tokenize","YARD::Parser::C::CParser#parse_toplevel","YARD::Parser::C::CParser#consume_quote","YARD::Parser::C::CParser#consume_directive","YARD::Parser::C::CParser#consume_toplevel_statement","YARD::Parser::C::CParser#consume_body_statements","YARD::Parser::C::CParser#strip_non_statement_data","YARD::Parser::C::CParser#consume_whitespace","YARD::Parser::C::CParser#consume_comment","YARD::Parser::C::CParser#consume_until","YARD::Parser::C::CParser#attach_comment","YARD::Parser::C::CParser#advance","YARD::Parser::C::CParser#back","YARD::Parser::C::CParser#advance_loop","YARD::Parser::C::CParser#nextline","YARD::Parser::C::CParser#char","YARD::Parser::C::CParser#prevchar","YARD::Parser::C::CParser#nextchar"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "CParser",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::CParser",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3ACParser%23initialize","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23parse","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23enumerator","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23tokenize","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23parse_toplevel","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_quote","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_directive","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_toplevel_statement","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_body_statements","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23strip_non_statement_data","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_whitespace","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_comment","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_until","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23attach_comment","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23advance","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23back","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23advance_loop","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23nextline","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23char","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23prevchar","YARD%3A%3AParser%3A%3AC%3A%3ACParser%23nextchar"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":207,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "advance",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"1","parm_name":"num"}],
            "path":                         "YARD::Parser::C::CParser#advance",
            "scope":                        "instance",
            "signature":                    "def advance(num = 1) @index += num end",
            "source":                       "def advance(num = 1) @index += num end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":207,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23advance"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":210,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "advance_loop",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Parser::C::CParser#advance_loop",
            "scope":                        "instance",
            "signature":                    "def advance_loop(&block)",
            "source":                       "def advance_loop(&block)\n  while @index <= @content.size; yield end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":210,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23advance_loop"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":189,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "attach_comment",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":null,"parm_name":"statement"}],
            "path":                         "YARD::Parser::C::CParser#attach_comment",
            "scope":                        "instance",
            "signature":                    "def attach_comment(statement)",
            "source":                       "def attach_comment(statement)\n  if Comment === statement\n    if @last_statement && @last_statement.line == statement.line\n      @last_statement.comments = statement\n      statement.statement = @last_statement\n    end\n    @last_comment = statement\n    @last_statement = nil\n  else\n    if @last_comment\n      statement.comments = @last_comment\n      @last_comment.statement = statement\n    end\n    @last_statement = statement\n    @last_comment = nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":189,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23attach_comment"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":208,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "back",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"1","parm_name":"num"}],
            "path":                         "YARD::Parser::C::CParser#back",
            "scope":                        "instance",
            "signature":                    "def back(num = 1) @index -= num end",
            "source":                       "def back(num = 1) @index -= num end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":208,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23back"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":219,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "char",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"1","parm_name":"num"}],
            "path":                         "YARD::Parser::C::CParser#char",
            "scope":                        "instance",
            "signature":                    "def char(num = 1) @content[@index, num] end",
            "source":                       "def char(num = 1) @content[@index, num] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":219,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23char"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_body_statements",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#consume_body_statements",
            "scope":                        "instance",
            "signature":                    "def consume_body_statements",
            "source":                       "def consume_body_statements\n  stmts = []\n  brace_level = 1\n  while true\n    strip_non_statement_data\n    start, line = @index, @line\n    consume_until(/[{};]/)\n    brace_level += 1 if prevchar == '{'\n    brace_level -= 1 if prevchar == '}'\n\n    break if prevchar.empty? || (brace_level <= 0 && prevchar == '}')\n    end_chr = @index\n    end_chr -= 1 if prevchar == '}'\n    src = @content[start...@index]\n    if src && src !~ /\\A\\s*\\Z|\\A\\}\\Z/\n      stmt = BodyStatement.new(src, @file, line)\n      attach_comment(stmt)\n      stmts << stmt\n    end\n  end\n  stmts\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_body_statements"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":129,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_comment",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"true","parm_name":"add_comment"}],
            "path":                         "YARD::Parser::C::CParser#consume_comment",
            "scope":                        "instance",
            "signature":                    "def consume_comment(add_comment = true)",
            "source":                       "def consume_comment(add_comment = true)\n  return(advance) unless nextchar == '*' || nextchar == '/'\n  line = @line\n  type = nextchar == '*' ? :multi : :line\n  advance(2)\n  comment = \"\"\n  advance_loop do\n    comment << char\n    if type == :multi\n      nextline if char == \"\\n\"\n      if char(2) == '*/'\n        if add_comment\n          comment << '/'\n          stmt = Comment.new(comment, @file, line)\n          stmt.type = type\n          attach_comment(stmt)\n          @statements << stmt\n        end\n        return advance(2)\n      end\n    elsif char == \"\\n\"\n      if add_comment\n        stmt = Comment.new(comment[0...-1], @file, line)\n        stmt.type = type\n        attach_comment(stmt)\n        @statements << stmt\n      end\n      return\n    end\n    advance\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":129,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_comment"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_directive",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#consume_directive",
            "scope":                        "instance",
            "signature":                    "def consume_directive",
            "source":                       "def consume_directive\n  return unless @newline\n  @last_comment = nil\n  @last_statement = nil\n  advance_loop do\n    if char == '\\\\' && nextchar =~ /[\\r\\n]/\n      advance_loop { advance; break(nextline) if char == \"\\n\" }\n    elsif char == \"\\n\"\n      return\n    end\n    advance\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_directive"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_quote",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"'\"'","parm_name":"type"}],
            "path":                         "YARD::Parser::C::CParser#consume_quote",
            "scope":                        "instance",
            "signature":                    "def consume_quote(type = '\"')",
            "source":                       "def consume_quote(type = '\"')\n  advance\n  advance_loop do\n    case char\n    when \"\\n\"; advance; nextline\n    when '\\\\'; advance(2)\n    when type; advance; return\n    else advance\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_quote"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_toplevel_statement",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#consume_toplevel_statement",
            "scope":                        "instance",
            "signature":                    "def consume_toplevel_statement",
            "source":                       "def consume_toplevel_statement\n  @newline = false\n  start = @index\n  line = @line\n  decl = consume_until(/[{;]/)\n  return nil if decl =~ /\\A\\s*\\Z/\n  statement = ToplevelStatement.new(nil, @file, line)\n  @statements << statement\n  attach_comment(statement)\n  stmts = nil\n  if prevchar == '{'\n    stmts = consume_body_statements\n    consume_until(';') if decl =~ /\\A(typedef|enum|class|struct|union)\\b/\n  end\n  statement.source = @content[start..@index]\n  statement.block = stmts\n  statement.declaration = decl\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_toplevel_statement"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_until",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":null,"parm_name":"end_char"},{"parm_type":"0","parm_name":"bracket_level"},{"parm_type":"0","parm_name":"brace_level"},{"parm_type":"true","parm_name":"add_comment"}],
            "path":                         "YARD::Parser::C::CParser#consume_until",
            "scope":                        "instance",
            "signature":                    "def consume_until(end_char, bracket_level = 0, brace_level = 0, add_comment = true)",
            "source":                       "def consume_until(end_char, bracket_level = 0, brace_level = 0, add_comment = true)\n  end_char = /#{end_char}/ if end_char.is_a?(String)\n  start = @index\n  advance_loop do\n    chr = char\n    case chr\n    when /\\s/; consume_whitespace\n    when /['\"]/; consume_quote(char)\n    when '#'; consume_directive\n    when '/'; consume_comment(add_comment)\n    when '{'; advance; brace_level += 1\n    when '}'; advance; brace_level -= 1\n    when '('; advance; bracket_level += 1\n    when ')'; advance; bracket_level -= 1\n    else advance\n    end\n    @newline = false if chr !~ /\\s/\n\n    if chr =~ end_char && (chr == '{' || chr == '(')\n      break\n    elsif chr =~ end_char && bracket_level <= 0 && brace_level <= 0\n      break\n    end\n  end\n  return @content[start...@index]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_until"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":125,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "consume_whitespace",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#consume_whitespace",
            "scope":                        "instance",
            "signature":                    "def consume_whitespace",
            "source":                       "def consume_whitespace\n  advance_loop { nextline if char == \"\\n\"; break if char =~ /\\S/; advance }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":125,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23consume_whitespace"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "enumerator",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#enumerator",
            "scope":                        "instance",
            "signature":                    "def enumerator",
            "source":                       "def enumerator\n  @statements\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23enumerator"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":"'(stdin)'","parm_name":"file"}],
            "path":                         "YARD::Parser::C::CParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, file = '(stdin)')",
            "source":                       "def initialize(source, file = '(stdin)')\n  @file = file\n  @namespaces = {}\n  @content = source\n  @index = 0\n  @line = 1\n  @state = nil\n  @newline = true\n  @statements = []\n  @last_comment = nil\n  @last_statement = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":221,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "nextchar",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"1","parm_name":"num"}],
            "path":                         "YARD::Parser::C::CParser#nextchar",
            "scope":                        "instance",
            "signature":                    "def nextchar(num = 1) @content[@index + 1, num] end",
            "source":                       "def nextchar(num = 1) @content[@index + 1, num] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":221,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23nextchar"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":214,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "nextline",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#nextline",
            "scope":                        "instance",
            "signature":                    "def nextline",
            "source":                       "def nextline\n  @line += 1\n  @newline = true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":214,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23nextline"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  parse_toplevel\n  enumerator\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "parse_toplevel",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#parse_toplevel",
            "scope":                        "instance",
            "signature":                    "def parse_toplevel",
            "source":                       "def parse_toplevel\n  advance_loop do\n    case char\n    when /['\"]/; consume_quote(char)\n    when '#'; consume_directive\n    when '/'; consume_comment\n    when /\\s/; consume_whitespace\n    else consume_toplevel_statement\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23parse_toplevel"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":220,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "prevchar",
            "namespace":                    "YARD::Parser::C::CParser",
            "parameters":                   [{"parm_type":"1","parm_name":"num"}],
            "path":                         "YARD::Parser::C::CParser#prevchar",
            "scope":                        "instance",
            "signature":                    "def prevchar(num = 1) @content[@index - 1, num] end",
            "source":                       "def prevchar(num = 1) @content[@index - 1, num] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":220,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23prevchar"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":113,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "strip_non_statement_data",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#strip_non_statement_data",
            "scope":                        "instance",
            "signature":                    "def strip_non_statement_data",
            "source":                       "def strip_non_statement_data\n  start = @index\n  begin\n    start = @index\n    case char\n    when /\\s/; consume_whitespace\n    when '#';  consume_directive\n    when '/';  consume_comment\n    end\n  end until start == @index\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":113,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23strip_non_statement_data"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/parser/c/c_parser.rb"}],
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::C::CParser",
            "path":                         "YARD::Parser::C::CParser#tokenize",
            "scope":                        "instance",
            "signature":                    "def tokenize",
            "source":                       "def tokenize\n  raise NotImplementedError, \"no tokenization support for C/C++ files\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fc_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACParser%23tokenize"
        },
        {
            "attributes":                   {"class":{},"instance":{"type":{"write":"YARD::Parser::C::Comment#type=","read":"YARD::Parser::C::Comment#type"},"overrides":{"write":"YARD::Parser::C::Comment#overrides=","read":"YARD::Parser::C::Comment#overrides"},"statement":{"write":"YARD::Parser::C::Comment#statement=","read":"YARD::Parser::C::Comment#statement"}}},
            "children":                     ["YARD::Parser::C::Comment#type=","YARD::Parser::C::Comment#type","YARD::Parser::C::Comment#overrides=","YARD::Parser::C::Comment#overrides","YARD::Parser::C::Comment#statement=","YARD::Parser::C::Comment#statement","YARD::Parser::C::Comment#initialize","YARD::Parser::C::Comment#comments"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/c/statement.rb"}],
            "instance_mixins":              ["YARD::Parser::C::CommentParser"],
            "name":                         "Comment",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::Comment",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::C::Statement",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3AComment%23type%3D","YARD%3A%3AParser%3A%3AC%3A%3AComment%23type","YARD%3A%3AParser%3A%3AC%3A%3AComment%23overrides%3D","YARD%3A%3AParser%3A%3AC%3A%3AComment%23overrides","YARD%3A%3AParser%3A%3AC%3A%3AComment%23statement%3D","YARD%3A%3AParser%3A%3AC%3A%3AComment%23statement","YARD%3A%3AParser%3A%3AC%3A%3AComment%23initialize","YARD%3A%3AParser%3A%3AC%3A%3AComment%23comments"],
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3AC%3A%3AStatement"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::C::Comment",
            "path":                         "YARD::Parser::C::Comment#comments",
            "scope":                        "instance",
            "signature":                    "def comments; self end",
            "source":                       "def comments; self end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::C::Comment",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":"nil","parm_name":"file"},{"parm_type":"nil","parm_name":"line"}],
            "path":                         "YARD::Parser::C::Comment#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, file = nil, line = nil)",
            "source":                       "def initialize(source, file = nil, line = nil)\n  super(parse_comments(source), file, line)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute overrides",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "overrides",
            "namespace":                    "YARD::Parser::C::Comment",
            "path":                         "YARD::Parser::C::Comment#overrides",
            "scope":                        "instance",
            "signature":                    "def overrides",
            "source":                       "def overrides\n  @overrides\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23overrides"
        },
        {
            "docstring":                    "Sets the attribute overrides",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "overrides=",
            "namespace":                    "YARD::Parser::C::Comment",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Comment#overrides=",
            "scope":                        "instance",
            "signature":                    "def overrides=(value)",
            "source":                       "def overrides=(value)\n  @overrides = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23overrides%3D"
        },
        {
            "docstring":                    "Returns the value of attribute statement",
            "dynamic":                      true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "statement",
            "namespace":                    "YARD::Parser::C::Comment",
            "path":                         "YARD::Parser::C::Comment#statement",
            "scope":                        "instance",
            "signature":                    "def statement",
            "source":                       "def statement\n  @statement\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23statement"
        },
        {
            "docstring":                    "Sets the attribute statement",
            "dynamic":                      true,
            "files":                        [{"file_line":53,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "statement=",
            "namespace":                    "YARD::Parser::C::Comment",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Comment#statement=",
            "scope":                        "instance",
            "signature":                    "def statement=(value)",
            "source":                       "def statement=(value)\n  @statement = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":53,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23statement%3D"
        },
        {
            "docstring":                    "Returns the value of attribute type",
            "dynamic":                      true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::Parser::C::Comment",
            "path":                         "YARD::Parser::C::Comment#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  @type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23type"
        },
        {
            "docstring":                    "Sets the attribute type",
            "dynamic":                      true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "type=",
            "namespace":                    "YARD::Parser::C::Comment",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Comment#type=",
            "scope":                        "instance",
            "signature":                    "def type=(value)",
            "source":                       "def type=(value)\n  @type = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AComment%23type%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::C::CommentParser#parse_comments","YARD::Parser::C::CommentParser#parse_overrides","YARD::Parser::C::CommentParser#parse_callseq","YARD::Parser::C::CommentParser#parse_types","YARD::Parser::C::CommentParser#remove_private_comments"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "CommentParser",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::CommentParser",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_comments","YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_overrides","YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_callseq","YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_types","YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23remove_private_comments"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "parse_callseq",
            "namespace":                    "YARD::Parser::C::CommentParser",
            "parameters":                   [{"parm_type":null,"parm_name":"comments"}],
            "path":                         "YARD::Parser::C::CommentParser#parse_callseq",
            "scope":                        "instance",
            "signature":                    "def parse_callseq(comments)",
            "source":                       "def parse_callseq(comments)\n  return comments unless comments[0] =~ /\\Acall-seq:\\s*(\\S.+)?/\n  if $1\n    comments[0] = \" #{$1}\"\n  else\n    comments.shift\n  end\n  overloads = []\n  seen_data = false\n  while comments.first =~ /^\\s+(\\S.+)/ || comments.first =~ /^\\s*$/\n    line = comments.shift.strip\n    break if line.empty? && seen_data\n    next if line.empty?\n    seen_data = true\n    line.sub!(/^\\w+[\\.#]/, '')\n    signature, types = *line.split(/ [-=]> /)\n    types = parse_types(types)\n    if signature.sub!(/\\[?\\s*(\\{(?:\\s*\\|(.+?)\\|)?.*\\})\\s*\\]?\\s*$/, '') && $1\n      blk, blkparams = $1, $2\n    else\n      blk, blkparams = nil, nil\n    end\n    case signature\n    when /^(\\w+)\\s*=\\s+(\\w+)/\n      signature = \"#{$1}=(#{$2})\"\n    when /^\\w+\\s+\\S/\n      signature = signature.split(/\\s+/)\n      signature = \"#{signature[1]}#{signature[2] ? '(' + signature[2..-1].join(' ') + ')' : ''}\"\n    when /^\\w+\\[(.+?)\\]\\s*(=)?/\n      signature = \"[]#{$2}(#{$1})\"\n    when /^\\w+\\s+(#{CodeObjects::METHODMATCH})\\s+(\\w+)/\n      signature = \"#{$1}(#{$2})\"\n    end\n    break unless signature =~ /^#{CodeObjects::METHODNAMEMATCH}/\n    signature = signature.rstrip\n    overloads << \"@overload #{signature}\"\n    overloads << \"  @yield [#{blkparams}]\" if blk\n    overloads << \"  @return [#{types.join(', ')}]\" unless types.empty?\n  end\n\n  comments + [\"\"] + overloads\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_callseq"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "parse_comments",
            "namespace":                    "YARD::Parser::C::CommentParser",
            "parameters":                   [{"parm_type":null,"parm_name":"comments"}],
            "path":                         "YARD::Parser::C::CommentParser#parse_comments",
            "scope":                        "instance",
            "signature":                    "def parse_comments(comments)",
            "source":                       "def parse_comments(comments)\n  @overrides = []\n  spaces = nil\n  comments = remove_private_comments(comments)\n  comments = comments.split(/\\r?\\n/).map do |line|\n    line.gsub!(%r{^\\s*/?\\*/?}, '')\n    line.gsub!(%r{\\*/\\s*$}, '')\n    if line =~ /^\\s*$/\n      next if spaces.nil?\n      next \"\"\n    end\n    spaces = (line[/^(\\s+)/, 1] || \"\").size if spaces.nil?\n    line.gsub(/^\\s{0,#{spaces}}/, '').rstrip\n  end.compact\n\n  comments = parse_overrides(comments)\n  comments = parse_callseq(comments)\n  comments.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "parse_overrides",
            "namespace":                    "YARD::Parser::C::CommentParser",
            "parameters":                   [{"parm_type":null,"parm_name":"comments"}],
            "path":                         "YARD::Parser::C::CommentParser#parse_overrides",
            "scope":                        "instance",
            "signature":                    "def parse_overrides(comments)",
            "source":                       "def parse_overrides(comments)\n  comments.map do |line|\n    type, name = *line.scan(/^\\s*Document-(class|module|method|const):\\s*(\\S.*)\\s*$/).first\n    if type\n      @overrides << [type.to_sym, name]\n      nil\n    else\n      line\n    end\n  end.compact\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_overrides"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":84,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "parse_types",
            "namespace":                    "YARD::Parser::C::CommentParser",
            "parameters":                   [{"parm_type":null,"parm_name":"types"}],
            "path":                         "YARD::Parser::C::CommentParser#parse_types",
            "scope":                        "instance",
            "signature":                    "def parse_types(types)",
            "source":                       "def parse_types(types)\n  if types =~ /true or false/\n    [\"Boolean\"]\n  else\n    (types||\"\").split(/,| or /).map do |t|\n      case t.strip.gsub(/^an?_/, '')\n      when \"class\"; \"Class\"\n      when \"obj\", \"object\", \"anObject\"; \"Object\"\n      when \"arr\", \"array\", \"anArray\", /^\\[/; \"Array\"\n      when /^char\\s*\\*/, \"char\", \"str\", \"string\", \"new_str\"; \"String\"\n      when \"enum\", \"anEnumerator\"; \"Enumerator\"\n      when \"exc\", \"exception\"; \"Exception\"\n      when \"proc\", \"proc_obj\", \"prc\"; \"Proc\"\n      when \"binding\"; \"Binding\"\n      when \"hsh\", \"hash\", \"aHash\"; \"Hash\"\n      when \"ios\", \"io\"; \"IO\"\n      when \"file\"; \"File\"\n      when \"float\"; \"Float\"\n      when \"time\", \"new_time\"; \"Time\"\n      when \"dir\", \"aDir\"; \"Dir\"\n      when \"regexp\", \"new_regexp\"; \"Regexp\"\n      when \"matchdata\"; \"MatchData\"\n      when \"encoding\"; \"Encoding\"\n      when \"fixnum\", \"fix\"; \"Fixnum\"\n      when /^(?:un)?signed$/, /^(?:(?:un)?signed\\s*)?(?:short|int|long|long\\s+long)$/, \"integer\", \"Integer\"; \"Integer\"\n      when \"num\", \"numeric\", \"Numeric\", \"number\"; \"Numeric\"\n      when \"aBignum\"; \"Bignum\"\n      when \"nil\"; \"nil\"\n      when \"true\"; \"true\"\n      when \"false\"; \"false\"\n      when \"bool\", \"boolean\", \"Boolean\"; \"Boolean\"\n      when \"self\"; \"self\"\n      when /^[-+]?\\d/; t\n      when /[A-Z][_a-z0-9]+/; t\n      end\n    end.compact\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":84,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23parse_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":123,"file_path":"lib/yard/parser/c/comment_parser.rb"}],
            "name":                         "remove_private_comments",
            "namespace":                    "YARD::Parser::C::CommentParser",
            "parameters":                   [{"parm_type":null,"parm_name":"comment"}],
            "path":                         "YARD::Parser::C::CommentParser#remove_private_comments",
            "scope":                        "instance",
            "signature":                    "def remove_private_comments(comment)",
            "source":                       "def remove_private_comments(comment)\n   comment = comment.gsub(/\\/?\\*--\\n(.*?)\\/?\\*\\+\\+/m, '')\n   comment = comment.sub(/\\/?\\*--\\n.*/m, '')\n   comment\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":123,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fcomment_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3ACommentParser%23remove_private_comments"
        },
        {
            "attributes":                   {"class":{},"instance":{"file":{"write":"YARD::Parser::C::Statement#file=","read":"YARD::Parser::C::Statement#file"},"group":{"write":"YARD::Parser::C::Statement#group=","read":"YARD::Parser::C::Statement#group"},"comments_hash_flag":{"write":"YARD::Parser::C::Statement#comments_hash_flag=","read":"YARD::Parser::C::Statement#comments_hash_flag"},"source":{"write":"YARD::Parser::C::Statement#source=","read":"YARD::Parser::C::Statement#source"},"line":{"write":"YARD::Parser::C::Statement#line=","read":"YARD::Parser::C::Statement#line"}}},
            "children":                     ["YARD::Parser::C::Statement#source=","YARD::Parser::C::Statement#source","YARD::Parser::C::Statement#line=","YARD::Parser::C::Statement#line","YARD::Parser::C::Statement#file=","YARD::Parser::C::Statement#file","YARD::Parser::C::Statement#group=","YARD::Parser::C::Statement#group","YARD::Parser::C::Statement#comments_hash_flag=","YARD::Parser::C::Statement#comments_hash_flag","YARD::Parser::C::Statement#initialize","YARD::Parser::C::Statement#line_range","YARD::Parser::C::Statement#comments_range","YARD::Parser::C::Statement#first_line","YARD::Parser::C::Statement#show"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "Statement",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::Statement",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3AStatement%23source%3D","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23source","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line%3D","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23file%3D","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23file","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23group%3D","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23group","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_hash_flag%3D","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_hash_flag","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23initialize","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line_range","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_range","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23first_line","YARD%3A%3AParser%3A%3AC%3A%3AStatement%23show"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "Returns the value of attribute comments_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments_hash_flag",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#comments_hash_flag",
            "scope":                        "instance",
            "signature":                    "def comments_hash_flag",
            "source":                       "def comments_hash_flag\n  @comments_hash_flag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_hash_flag"
        },
        {
            "docstring":                    "Sets the attribute comments_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments_hash_flag=",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Statement#comments_hash_flag=",
            "scope":                        "instance",
            "signature":                    "def comments_hash_flag=(value)",
            "source":                       "def comments_hash_flag=(value)\n  @comments_hash_flag = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_hash_flag%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments_range",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#comments_range",
            "scope":                        "instance",
            "signature":                    "def comments_range",
            "source":                       "def comments_range\n  comments.line_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23comments_range"
        },
        {
            "docstring":                    "Returns the value of attribute file",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23file"
        },
        {
            "docstring":                    "Sets the attribute file",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "file=",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Statement#file=",
            "scope":                        "instance",
            "signature":                    "def file=(value)",
            "source":                       "def file=(value)\n  @file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23file%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "first_line",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#first_line",
            "scope":                        "instance",
            "signature":                    "def first_line",
            "source":                       "def first_line\n  source.split(/\\n/).first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23first_line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "group",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#group",
            "scope":                        "instance",
            "signature":                    "def group",
            "source":                       "def group\n  @group\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23group"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "group=",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Statement#group=",
            "scope":                        "instance",
            "signature":                    "def group=(value)",
            "source":                       "def group=(value)\n  @group = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23group%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":"nil","parm_name":"file"},{"parm_type":"nil","parm_name":"line"}],
            "path":                         "YARD::Parser::C::Statement#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, file = nil, line = nil)",
            "source":                       "def initialize(source, file = nil, line = nil)\n  @source = source\n  @file = file\n  @line = line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "line",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#line",
            "scope":                        "instance",
            "signature":                    "def line",
            "source":                       "def line\n  @line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line"
        },
        {
            "docstring":                    "Sets the attribute line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "line=",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Statement#line=",
            "scope":                        "instance",
            "signature":                    "def line=(value)",
            "source":                       "def line=(value)\n  @line = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "line_range",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#line_range",
            "scope":                        "instance",
            "signature":                    "def line_range",
            "source":                       "def line_range\n  line...(line + source.count(\"\\n\"))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23line_range"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "show",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#show",
            "scope":                        "instance",
            "signature":                    "def show",
            "source":                       "def show\n  \"\\t#{line}: #{first_line}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23show"
        },
        {
            "docstring":                    "Returns the value of attribute source",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "source",
            "namespace":                    "YARD::Parser::C::Statement",
            "path":                         "YARD::Parser::C::Statement#source",
            "scope":                        "instance",
            "signature":                    "def source",
            "source":                       "def source\n  @source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23source"
        },
        {
            "docstring":                    "Sets the attribute source",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "source=",
            "namespace":                    "YARD::Parser::C::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::Statement#source=",
            "scope":                        "instance",
            "signature":                    "def source=(value)",
            "source":                       "def source=(value)\n  @source = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AStatement%23source%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{"comments":{"write":"YARD::Parser::C::ToplevelStatement#comments=","read":"YARD::Parser::C::ToplevelStatement#comments"},"declaration":{"write":"YARD::Parser::C::ToplevelStatement#declaration=","read":"YARD::Parser::C::ToplevelStatement#declaration"},"block":{"write":"YARD::Parser::C::ToplevelStatement#block=","read":"YARD::Parser::C::ToplevelStatement#block"}}},
            "children":                     ["YARD::Parser::C::ToplevelStatement#block=","YARD::Parser::C::ToplevelStatement#block","YARD::Parser::C::ToplevelStatement#declaration=","YARD::Parser::C::ToplevelStatement#declaration","YARD::Parser::C::ToplevelStatement#comments=","YARD::Parser::C::ToplevelStatement#comments"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "ToplevelStatement",
            "namespace":                    "YARD::Parser::C",
            "path":                         "YARD::Parser::C::ToplevelStatement",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::C::Statement",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23block%3D","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23block","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23declaration%3D","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23declaration","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23comments%3D","YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23comments"],
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3AC%3A%3AStatement"
        },
        {
            "docstring":                    "Returns the value of attribute block",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "block",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "path":                         "YARD::Parser::C::ToplevelStatement#block",
            "scope":                        "instance",
            "signature":                    "def block",
            "source":                       "def block\n  @block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23block"
        },
        {
            "docstring":                    "Sets the attribute block",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "block=",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::ToplevelStatement#block=",
            "scope":                        "instance",
            "signature":                    "def block=(value)",
            "source":                       "def block=(value)\n  @block = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23block%3D"
        },
        {
            "docstring":                    "Returns the value of attribute comments",
            "dynamic":                      true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "path":                         "YARD::Parser::C::ToplevelStatement#comments",
            "scope":                        "instance",
            "signature":                    "def comments",
            "source":                       "def comments\n  @comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23comments"
        },
        {
            "docstring":                    "Sets the attribute comments",
            "dynamic":                      true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "comments=",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::ToplevelStatement#comments=",
            "scope":                        "instance",
            "signature":                    "def comments=(value)",
            "source":                       "def comments=(value)\n  @comments = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23comments%3D"
        },
        {
            "docstring":                    "Returns the value of attribute declaration",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "declaration",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "path":                         "YARD::Parser::C::ToplevelStatement#declaration",
            "scope":                        "instance",
            "signature":                    "def declaration",
            "source":                       "def declaration\n  @declaration\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23declaration"
        },
        {
            "docstring":                    "Sets the attribute declaration",
            "dynamic":                      true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/parser/c/statement.rb"}],
            "name":                         "declaration=",
            "namespace":                    "YARD::Parser::C::ToplevelStatement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::C::ToplevelStatement#declaration=",
            "scope":                        "instance",
            "signature":                    "def declaration=(value)",
            "source":                       "def declaration=(value)\n  @declaration = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Fparser%2Fc%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AC%3A%3AToplevelStatement%23declaration%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{"files":{"write":"YARD::Parser::OrderedParser#files=","read":"YARD::Parser::OrderedParser#files"}}},
            "children":                     ["YARD::Parser::OrderedParser#files=","YARD::Parser::OrderedParser#files","YARD::Parser::OrderedParser#initialize","YARD::Parser::OrderedParser#parse"],
            "current_file_has_comments":    true,
            "docstring":                    "Responsible for parsing a list of files in order. The\n{#parse} method of this class can be called from the\n{SourceParser#globals} globals state list to re-enter\nparsing for the remainder of files in the list recursively.",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "OrderedParser",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::OrderedParser",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3AOrderedParser%23files%3D","YARD%3A%3AParser%3A%3AOrderedParser%23files","YARD%3A%3AParser%3A%3AOrderedParser%23initialize","YARD%3A%3AParser%3A%3AOrderedParser%23parse"],
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AOrderedParser",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "files",
            "namespace":                    "YARD::Parser::OrderedParser",
            "path":                         "YARD::Parser::OrderedParser#files",
            "scope":                        "instance",
            "signature":                    "def files",
            "source":                       "def files\n  @files\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AOrderedParser%23files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "files=",
            "namespace":                    "YARD::Parser::OrderedParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::OrderedParser#files=",
            "scope":                        "instance",
            "signature":                    "def files=(value)",
            "source":                       "def files=(value)\n  @files = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AOrderedParser%23files%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new OrderedParser with the global state and a list\nof files to parse.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::OrderedParser",
            "parameters":                   [{"parm_type":null,"parm_name":"global_state"},{"parm_type":null,"parm_name":"files"}],
            "path":                         "YARD::Parser::OrderedParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(global_state, files)",
            "source":                       "def initialize(global_state, files)\n  @global_state = global_state\n  @files = files.dup\n  @global_state.ordered_parser = self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AOrderedParser%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses the remainder of the {#files} list.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::OrderedParser",
            "path":                         "YARD::Parser::OrderedParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  while file = files.shift\n    log.debug(\"Processing #{file}...\")\n    SourceParser.new(SourceParser.parser_type, @global_state).parse(file)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AOrderedParser%23parse"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Raised when the parser sees a Ruby syntax error",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "ParserSyntaxError",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::ParserSyntaxError",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::UndocumentableError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AParserSyntaxError",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3AUndocumentableError"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy","YARD::Parser::Ruby#s","YARD::Parser::Ruby::AstNode","YARD::Parser::Ruby::ReferenceNode","YARD::Parser::Ruby::LiteralNode","YARD::Parser::Ruby::KeywordNode","YARD::Parser::Ruby::ParameterNode","YARD::Parser::Ruby::MethodCallNode","YARD::Parser::Ruby::MethodDefinitionNode","YARD::Parser::Ruby::ConditionalNode","YARD::Parser::Ruby::ClassNode","YARD::Parser::Ruby::ModuleNode","YARD::Parser::Ruby::LoopNode","YARD::Parser::Ruby::CommentNode","YARD::Parser::Ruby::RubyParser","YARD::Parser::Ruby::RipperParser"],
            "current_file_has_comments":    true,
            "docstring":                    "Ruby parsing components.",
            "dynamic":                      true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/autoload.rb"},{"file_line":3,"file_path":"lib/yard/parser/ruby/ast_node.rb"},{"file_line":5,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":3,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "groups":                       ["Managing node state"],
            "name":                         "Ruby",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::Ruby",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy","YARD%3A%3AParser%3A%3ARuby%23s","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode","YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode","YARD%3A%3AParser%3A%3ARuby%3A%3ALiteralNode","YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode","YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode","YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode","YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode","YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode","YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode","YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser"],
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Builds and s-expression by creating {AstNode} objects with\nthe type provided by the first argument.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "s",
            "namespace":                    "YARD::Parser::Ruby",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby#s",
            "scope":                        "instance",
            "signature":                    "def s(*args)",
            "source":                       "def s(*args)\n  type = Symbol === args.first ? args.shift : :list\n  opts = Hash === args.last ? args.pop : {}\n  AstNode.node_class_for(type).new(type, args, opts)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%23s"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::AstNode#comments_range":"docstring_range","YARD::Parser::Ruby::AstNode#comments_hash_flag":"docstring_hash_flag","YARD::Parser::Ruby::AstNode#comments":"docstring"},
            "attributes":                   {"class":{},"instance":{"docstring_range":{"write":"YARD::Parser::Ruby::AstNode#docstring_range=","read":"YARD::Parser::Ruby::AstNode#docstring_range"},"type":{"write":"YARD::Parser::Ruby::AstNode#type=","read":"YARD::Parser::Ruby::AstNode#type"},"source_range":{"write":"YARD::Parser::Ruby::AstNode#source_range=","read":"YARD::Parser::Ruby::AstNode#source_range"},"docstring":{"write":"YARD::Parser::Ruby::AstNode#docstring=","read":"YARD::Parser::Ruby::AstNode#docstring"},"group":{"write":"YARD::Parser::Ruby::AstNode#group=","read":"YARD::Parser::Ruby::AstNode#group"},"file":{"write":"YARD::Parser::Ruby::AstNode#file=","read":"YARD::Parser::Ruby::AstNode#file"},"line_range":{"write":"YARD::Parser::Ruby::AstNode#line_range=","read":"YARD::Parser::Ruby::AstNode#line_range"},"source":{"write":"YARD::Parser::Ruby::AstNode#source=","read":"YARD::Parser::Ruby::AstNode#source"},"full_source":{"write":"YARD::Parser::Ruby::AstNode#full_source=","read":"YARD::Parser::Ruby::AstNode#full_source"},"docstring_hash_flag":{"write":"YARD::Parser::Ruby::AstNode#docstring_hash_flag=","read":"YARD::Parser::Ruby::AstNode#docstring_hash_flag"},"parent":{"write":"YARD::Parser::Ruby::AstNode#parent=","read":"YARD::Parser::Ruby::AstNode#parent"}}},
            "children":                     ["YARD::Parser::Ruby::AstNode#docstring_hash_flag=","YARD::Parser::Ruby::AstNode#docstring_hash_flag","YARD::Parser::Ruby::AstNode#docstring=","YARD::Parser::Ruby::AstNode#docstring","YARD::Parser::Ruby::AstNode#docstring_range=","YARD::Parser::Ruby::AstNode#docstring_range","YARD::Parser::Ruby::AstNode#source=","YARD::Parser::Ruby::AstNode#source","YARD::Parser::Ruby::AstNode#group=","YARD::Parser::Ruby::AstNode#group","YARD::Parser::Ruby::AstNode#source_range=","YARD::Parser::Ruby::AstNode#line_range=","YARD::Parser::Ruby::AstNode#file=","YARD::Parser::Ruby::AstNode#full_source=","YARD::Parser::Ruby::AstNode#comments","YARD::Parser::Ruby::AstNode#comments_range","YARD::Parser::Ruby::AstNode#comments_hash_flag","YARD::Parser::Ruby::AstNode#to_s","YARD::Parser::Ruby::AstNode#type=","YARD::Parser::Ruby::AstNode#type","YARD::Parser::Ruby::AstNode#parent=","YARD::Parser::Ruby::AstNode#parent","YARD::Parser::Ruby::AstNode#source_range","YARD::Parser::Ruby::AstNode#line_range","YARD::Parser::Ruby::AstNode#file","YARD::Parser::Ruby::AstNode#full_source","YARD::Parser::Ruby::AstNode::KEYWORDS","YARD::Parser::Ruby::AstNode.node_class_for","YARD::Parser::Ruby::AstNode#initialize","YARD::Parser::Ruby::AstNode#==","YARD::Parser::Ruby::AstNode#jump","YARD::Parser::Ruby::AstNode#children","YARD::Parser::Ruby::AstNode#traverse","YARD::Parser::Ruby::AstNode#token?","YARD::Parser::Ruby::AstNode#ref?","YARD::Parser::Ruby::AstNode#literal?","YARD::Parser::Ruby::AstNode#kw?","YARD::Parser::Ruby::AstNode#call?","YARD::Parser::Ruby::AstNode#def?","YARD::Parser::Ruby::AstNode#condition?","YARD::Parser::Ruby::AstNode#loop?","YARD::Parser::Ruby::AstNode#block?","YARD::Parser::Ruby::AstNode#has_line?","YARD::Parser::Ruby::AstNode#line","YARD::Parser::Ruby::AstNode#first_line","YARD::Parser::Ruby::AstNode#show","YARD::Parser::Ruby::AstNode#pretty_print","YARD::Parser::Ruby::AstNode#inspect","YARD::Parser::Ruby::AstNode#unfreeze","YARD::Parser::Ruby::AstNode#reset_line_info"],
            "current_file_has_comments":    true,
            "docstring":                    "An AST node is characterized by a type and a list of children. It\nis most easily represented by the s-expression {#s} such as:\n  # AST for \"if true; 5 end\":\n  s(s(:if, s(:var_ref, s(:kw, \"true\")), s(s(:int, \"5\")), nil))\n\nThe node type is not considered part of the list, only its children.\nSo +ast[0]+ does not refer to the type, but rather the first child\n(or object). Items that are not +AstNode+ objects can be part of the\nlist, like Strings or Symbols representing names. To return only\nthe AstNode children of the node, use {#children}.",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "groups":                       ["Creating an AstNode","Traversing a Node","Node Meta Types","Getting Line Information","Printing a Node","Managing node state"],
            "name":                         "AstNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::AstNode",
            "source_type":                  "ruby",
            "superclass":                   "Array",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_hash_flag%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_hash_flag","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_range%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_range","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23group%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23group","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source_range%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line_range%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23file%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23full_source%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments_range","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments_hash_flag","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23to_s","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23type%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23type","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23parent%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23parent","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source_range","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line_range","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23file","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23full_source","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%3A%3AKEYWORDS","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode.node_class_for","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23%3D%3D","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23jump","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23children","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23traverse","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23token%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23ref%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23literal%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23kw%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23call%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23def%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23condition%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23loop%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23block%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23has_line%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23first_line","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23show","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23pretty_print","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23inspect","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23unfreeze","YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23reset_line_info"],
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode",
            "y_ld:superclass":              "Array"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Creating an AstNode",
            "name":                         "==",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"ast"}],
            "path":                         "YARD::Parser::Ruby::AstNode#==",
            "scope":                        "instance",
            "signature":                    "def ==(ast)",
            "source":                       "def ==(ast)\n  super && type == ast.type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":258,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "block?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#block?",
            "scope":                        "instance",
            "signature":                    "def block?",
            "source":                       "def block?\n  respond_to?(:block) || condition?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":258,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23block%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":238,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "call?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#call?",
            "scope":                        "instance",
            "signature":                    "def call?",
            "source":                       "def call?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":238,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23call%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":197,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Traversing a Node",
            "name":                         "children",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#children",
            "scope":                        "instance",
            "signature":                    "def children",
            "source":                       "def children\n  @children ||= select {|e| AstNode === e }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":197,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23children"
        },
        {
            "docstring":                    "Returns the value of attribute docstring",
            "dynamic":                      true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#comments",
            "scope":                        "instance",
            "signature":                    "def docstring",
            "source":                       "def docstring\n  @docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments"
        },
        {
            "docstring":                    "Returns the value of attribute docstring_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "comments_hash_flag",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#comments_hash_flag",
            "scope":                        "instance",
            "signature":                    "def docstring_hash_flag",
            "source":                       "def docstring_hash_flag\n  @docstring_hash_flag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments_hash_flag"
        },
        {
            "docstring":                    "Returns the value of attribute docstring_range",
            "dynamic":                      true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "comments_range",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#comments_range",
            "scope":                        "instance",
            "signature":                    "def docstring_range",
            "source":                       "def docstring_range\n  @docstring_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23comments_range"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":248,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "condition?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#condition?",
            "scope":                        "instance",
            "signature":                    "def condition?",
            "source":                       "def condition?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":248,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23condition%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":243,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "def?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#def?",
            "scope":                        "instance",
            "signature":                    "def def?",
            "source":                       "def def?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":243,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23def%3F"
        },
        {
            "docstring":                    "Returns the value of attribute docstring",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#docstring",
            "scope":                        "instance",
            "signature":                    "def docstring",
            "source":                       "def docstring\n  @docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring"
        },
        {
            "docstring":                    "Sets the attribute docstring",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#docstring=",
            "scope":                        "instance",
            "signature":                    "def docstring=(value)",
            "source":                       "def docstring=(value)\n  @docstring = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring%3D"
        },
        {
            "docstring":                    "Returns the value of attribute docstring_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring_hash_flag",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#docstring_hash_flag",
            "scope":                        "instance",
            "signature":                    "def docstring_hash_flag",
            "source":                       "def docstring_hash_flag\n  @docstring_hash_flag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_hash_flag"
        },
        {
            "docstring":                    "Sets the attribute docstring_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring_hash_flag=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#docstring_hash_flag=",
            "scope":                        "instance",
            "signature":                    "def docstring_hash_flag=(value)",
            "source":                       "def docstring_hash_flag=(value)\n  @docstring_hash_flag = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_hash_flag%3D"
        },
        {
            "docstring":                    "Returns the value of attribute docstring_range",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring_range",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#docstring_range",
            "scope":                        "instance",
            "signature":                    "def docstring_range",
            "source":                       "def docstring_range\n  @docstring_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_range"
        },
        {
            "docstring":                    "Sets the attribute docstring_range",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "docstring_range=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#docstring_range=",
            "scope":                        "instance",
            "signature":                    "def docstring_range=(value)",
            "source":                       "def docstring_range=(value)\n  @docstring_range = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23docstring_range%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":75,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  return parent.file if parent\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":75,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23file"
        },
        {
            "docstring":                    "Sets the attribute file",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "file=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#file=",
            "scope":                        "instance",
            "signature":                    "def file=(value)",
            "source":                       "def file=(value)\n  @file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":275,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Getting Line Information",
            "name":                         "first_line",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#first_line",
            "scope":                        "instance",
            "signature":                    "def first_line",
            "source":                       "def first_line\n  full_source.split(/\\r?\\n/)[line - 1].strip\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":275,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23first_line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "full_source",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#full_source",
            "scope":                        "instance",
            "signature":                    "def full_source",
            "source":                       "def full_source\n  return parent.full_source if parent\n  return @full_source if @full_source\n  return IO.read(@file) if file && File.exist?(file)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23full_source"
        },
        {
            "docstring":                    "Sets the attribute full_source",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "full_source=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#full_source=",
            "scope":                        "instance",
            "signature":                    "def full_source=(value)",
            "source":                       "def full_source=(value)\n  @full_source = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23full_source%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "group",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#group",
            "scope":                        "instance",
            "signature":                    "def group",
            "source":                       "def group\n  @group\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23group"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "group=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#group=",
            "scope":                        "instance",
            "signature":                    "def group=(value)",
            "source":                       "def group=(value)\n  @group = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23group%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":265,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Getting Line Information",
            "name":                         "has_line?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#has_line?",
            "scope":                        "instance",
            "signature":                    "def has_line?",
            "source":                       "def has_line?\n  @line_range ? true : false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":265,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23has_line%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new AST node",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Creating an AstNode",
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":null,"parm_name":"arr"},{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Parser::Ruby::AstNode#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(type, arr, opts = {})",
            "source":                       "def initialize(type, arr, opts = {})\n  super(arr)\n  self.type = type\n  self.line_range = opts[:line]\n  self.source_range = opts[:char]\n  @fallback_line = opts[:listline]\n  @fallback_source = opts[:listchar]\n  @token = true if opts[:token]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":322,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Printing a Node",
            "name":                         "inspect",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  typeinfo = type && type != :list ? ':' + type.to_s + ', ' : ''\n  's(' + typeinfo + map(&:inspect).join(\", \") + ')'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":322,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23inspect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches through the node and all descendants and returns the\nfirst node with a type matching any of +node_types+, otherwise\nreturns the original node (self).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":191,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Traversing a Node",
            "name":                         "jump",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"*node_types"}],
            "path":                         "YARD::Parser::Ruby::AstNode#jump",
            "scope":                        "instance",
            "signature":                    "def jump(*node_types)",
            "source":                       "def jump(*node_types)\n  traverse {|child| return(child) if node_types.include?(child.type) }\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":191,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23jump"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":233,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "kw?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#kw?",
            "scope":                        "instance",
            "signature":                    "def kw?",
            "source":                       "def kw?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":233,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23kw%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":270,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Getting Line Information",
            "name":                         "line",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#line",
            "scope":                        "instance",
            "signature":                    "def line",
            "source":                       "def line\n  line_range && line_range.first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":270,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "line_range",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#line_range",
            "scope":                        "instance",
            "signature":                    "def line_range",
            "source":                       "def line_range\n  reset_line_info unless @line_range\n  @line_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line_range"
        },
        {
            "docstring":                    "Sets the attribute line_range",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "line_range=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#line_range=",
            "scope":                        "instance",
            "signature":                    "def line_range=(value)",
            "source":                       "def line_range=(value)\n  @line_range = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23line_range%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":228,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "literal?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#literal?",
            "scope":                        "instance",
            "signature":                    "def literal?",
            "source":                       "def literal?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":228,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23literal%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":253,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "loop?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#loop?",
            "scope":                        "instance",
            "signature":                    "def loop?",
            "source":                       "def loop?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":253,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23loop%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "parent",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#parent",
            "scope":                        "instance",
            "signature":                    "def parent",
            "source":                       "def parent\n  @parent\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23parent"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "parent=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#parent=",
            "scope":                        "instance",
            "signature":                    "def parent=(value)",
            "source":                       "def parent=(value)\n  @parent = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23parent%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":287,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Printing a Node",
            "name":                         "pretty_print",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"q"}],
            "path":                         "YARD::Parser::Ruby::AstNode#pretty_print",
            "scope":                        "instance",
            "signature":                    "def pretty_print(q)",
            "source":                       "def pretty_print(q)\n  objs = self.dup + [:__last__]\n  objs.unshift(type) if type && type != :list\n\n  options = []\n  if @docstring\n    options << ['docstring', docstring]\n  end\n  if @source_range || @line_range\n    options << ['line', line_range]\n    options << ['source', source_range]\n  end\n  objs.pop if options.size == 0\n\n  q.group(3, 's(', ')') do\n    q.seplist(objs, nil, :each) do |v|\n      if v == :__last__\n        q.seplist(options, nil, :each) do |arr|\n          k, v2 = *arr\n          q.group(3) do\n            q.text k\n            q.group(3) do\n              q.text ': '\n              q.pp v2\n            end\n          end\n        end\n      else\n        q.pp v\n      end\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":287,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23pretty_print"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":223,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "ref?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#ref?",
            "scope":                        "instance",
            "signature":                    "def ref?",
            "source":                       "def ref?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":223,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23ref%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Resets line information",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":340,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "reset_line_info",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#reset_line_info",
            "scope":                        "instance",
            "signature":                    "def reset_line_info",
            "source":                       "def reset_line_info\n  if size == 0\n    self.line_range = @fallback_line\n    self.source_range = @fallback_source\n  elsif children.size > 0\n    f, l = children.first, children.last\n    self.line_range = Range.new(f.line_range.first, l.line_range.last)\n    self.source_range = Range.new(f.source_range.first, l.source_range.last)\n  elsif @fallback_line || @fallback_source\n    self.line_range = @fallback_line\n    self.source_range = @fallback_source\n  else\n    self.line_range = 0...0\n    self.source_range = 0...0\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":340,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23reset_line_info"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":282,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Printing a Node",
            "name":                         "show",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#show",
            "scope":                        "instance",
            "signature":                    "def show",
            "source":                       "def show\n  \"\\t#{line}: #{first_line}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":282,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23show"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/parser/ruby/ast_node.rb"},{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "source",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#source",
            "scope":                        "instance",
            "signature":                    "def source",
            "source":                       "def source\n  @source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"},{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source"
        },
        {
            "docstring":                    "Sets the attribute source",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "source=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#source=",
            "scope":                        "instance",
            "signature":                    "def source=(value)",
            "source":                       "def source=(value)\n  @source = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "source_range",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#source_range",
            "scope":                        "instance",
            "signature":                    "def source_range",
            "source":                       "def source_range\n  reset_line_info unless @source_range\n  @source_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source_range"
        },
        {
            "docstring":                    "Sets the attribute source_range",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "source_range=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#source_range=",
            "scope":                        "instance",
            "signature":                    "def source_range=(value)",
            "source":                       "def source_range=(value)\n  @source_range = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23source_range%3D"
        },
        {
            "docstring":                    "Returns the value of attribute source",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#to_s",
            "scope":                        "instance",
            "signature":                    "def source",
            "source":                       "def source\n  @source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23to_s"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":217,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Node Meta Types",
            "name":                         "token?",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#token?",
            "scope":                        "instance",
            "signature":                    "def token?",
            "source":                       "def token?\n  @token\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":217,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23token%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Traverses the object and yields each node (including descendants) in order.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":206,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Traversing a Node",
            "name":                         "traverse",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#traverse",
            "scope":                        "instance",
            "signature":                    "def traverse",
            "source":                       "def traverse\n  nodes = [self]\n  nodes.each.with_index do |node, index|\n    yield node\n    nodes.insert index+1, *node.children\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":206,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23traverse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  @type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "type=",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::AstNode#type=",
            "scope":                        "instance",
            "signature":                    "def type=(value)",
            "source":                       "def type=(value)\n  @type = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23type%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Resets node state in tree",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":330,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "unfreeze",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode#unfreeze",
            "scope":                        "instance",
            "signature":                    "def unfreeze",
            "source":                       "def unfreeze\n  @children = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":330,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%23unfreeze"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Finds the node subclass that should be instantiated for a specific\nnode type",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":110,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Creating an AstNode",
            "name":                         "node_class_for",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::Parser::Ruby::AstNode.node_class_for",
            "scope":                        "class",
            "signature":                    "def self.node_class_for(type)",
            "source":                       "def self.node_class_for(type)\n  case type\n  when :params\n    ParameterNode\n  when :call, :fcall, :vcall, :command, :command_call\n    MethodCallNode\n  when :if, :elsif, :if_mod, :unless, :unless_mod\n    ConditionalNode\n  when :for, :while, :while_mod, :until, :until_mod\n    LoopNode\n  when :def, :defs\n    MethodDefinitionNode\n  when :class, :sclass\n    ClassNode\n  when :module\n    ModuleNode\n  else\n    if type.to_s =~ /_ref\\Z/\n      ReferenceNode\n    elsif type.to_s =~ /_literal\\Z/\n      LiteralNode\n    elsif KEYWORDS.has_key?(type)\n      KeywordNode\n    else\n      AstNode\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":110,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode.node_class_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "List of all known keywords",
            "dynamic":                      true,
            "files":                        [{"file_line":95,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "name":                         "KEYWORDS",
            "namespace":                    "YARD::Parser::Ruby::AstNode",
            "path":                         "YARD::Parser::Ruby::AstNode::KEYWORDS",
            "signature":                    "KEYWORDS = { :class => true, :alias => true, :lambda => true, :do_block => true,",
            "source":                       "KEYWORDS = { :class => true, :alias => true, :lambda => true, :do_block => true,\n:def => true, :defs => true, :begin => true, :rescue => true, :rescue_mod => true,\n:if => true, :if_mod => true, :else => true, :elsif => true, :case => true,\n:when => true, :next => true, :break => true, :retry => true, :redo => true,\n:return => true, :throw => true, :catch => true, :until => true, :until_mod => true,\n:while => true, :while_mod => true, :yield => true, :yield0 => true, :zsuper => true,\n:unless => true, :unless_mod => true, :for => true, :super => true, :return0 => true }",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{ :class => true, :alias => true, :lambda => true, :do_block => true,\n:def => true, :defs => true, :begin => true, :rescue => true, :rescue_mod => true,\n:if => true, :if_mod => true, :else => true, :elsif => true, :case => true,\n:when => true, :next => true, :break => true, :retry => true, :redo => true,\n:return => true, :throw => true, :catch => true, :until => true, :until_mod => true,\n:while => true, :while_mod => true, :yield => true, :yield0 => true, :zsuper => true,\n:unless => true, :unless_mod => true, :for => true, :super => true, :return0 => true }",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":95,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode%3A%3AKEYWORDS"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::ClassNode#class_name","YARD::Parser::Ruby::ClassNode#superclass","YARD::Parser::Ruby::ClassNode#block"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":461,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "ClassNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::ClassNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::KeywordNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23class_name","YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23superclass","YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23block"],
            "y_ld:files":                   [{"file_line":461,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":464,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::ClassNode",
            "path":                         "YARD::Parser::Ruby::ClassNode#block",
            "scope":                        "instance",
            "signature":                    "def block; last end",
            "source":                       "def block; last end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":464,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":462,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "class_name",
            "namespace":                    "YARD::Parser::Ruby::ClassNode",
            "path":                         "YARD::Parser::Ruby::ClassNode#class_name",
            "scope":                        "instance",
            "signature":                    "def class_name; first end",
            "source":                       "def class_name; first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":462,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23class_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":463,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "superclass",
            "namespace":                    "YARD::Parser::Ruby::ClassNode",
            "path":                         "YARD::Parser::Ruby::ClassNode#superclass",
            "scope":                        "instance",
            "signature":                    "def superclass; type == :sclass ? nil : self[1] end",
            "source":                       "def superclass; type == :sclass ? nil : self[1] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":463,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AClassNode%23superclass"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::CommentNode#comments":"docstring"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::CommentNode#docstring","YARD::Parser::Ruby::CommentNode#docstring=","YARD::Parser::Ruby::CommentNode#comments","YARD::Parser::Ruby::CommentNode#source","YARD::Parser::Ruby::CommentNode#first_line"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a lone comment block in source",
            "dynamic":                      true,
            "files":                        [{"file_line":479,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "CommentNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::CommentNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23docstring","YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23docstring%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23comments","YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23source","YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23first_line"],
            "y_ld:files":                   [{"file_line":479,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":482,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "comments",
            "namespace":                    "YARD::Parser::Ruby::CommentNode",
            "path":                         "YARD::Parser::Ruby::CommentNode#comments",
            "scope":                        "instance",
            "signature":                    "def docstring; first end",
            "source":                       "def docstring; first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":482,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":480,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "docstring",
            "namespace":                    "YARD::Parser::Ruby::CommentNode",
            "path":                         "YARD::Parser::Ruby::CommentNode#docstring",
            "scope":                        "instance",
            "signature":                    "def docstring; first end",
            "source":                       "def docstring; first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":480,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23docstring"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":481,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "docstring=",
            "namespace":                    "YARD::Parser::Ruby::CommentNode",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::CommentNode#docstring=",
            "scope":                        "instance",
            "signature":                    "def docstring=(value) end",
            "source":                       "def docstring=(value) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":481,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23docstring%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":485,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "first_line",
            "namespace":                    "YARD::Parser::Ruby::CommentNode",
            "path":                         "YARD::Parser::Ruby::CommentNode#first_line",
            "scope":                        "instance",
            "signature":                    "def first_line; \"\" end",
            "source":                       "def first_line; \"\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":485,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23first_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":484,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "source",
            "namespace":                    "YARD::Parser::Ruby::CommentNode",
            "path":                         "YARD::Parser::Ruby::CommentNode#source",
            "scope":                        "instance",
            "signature":                    "def source; \"\" end",
            "source":                       "def source; \"\" end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":484,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ACommentNode%23source"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::ConditionalNode#condition?","YARD::Parser::Ruby::ConditionalNode#condition","YARD::Parser::Ruby::ConditionalNode#then_block","YARD::Parser::Ruby::ConditionalNode#else_block","YARD::Parser::Ruby::ConditionalNode#cmod?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":445,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "ConditionalNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::ConditionalNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::KeywordNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23condition%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23condition","YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23then_block","YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23else_block","YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23cmod%3F"],
            "y_ld:files":                   [{"file_line":445,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":458,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "cmod?",
            "namespace":                    "YARD::Parser::Ruby::ConditionalNode",
            "path":                         "YARD::Parser::Ruby::ConditionalNode#cmod?",
            "scope":                        "instance",
            "signature":                    "def cmod?; type =~ /_mod$/ end",
            "source":                       "def cmod?; type =~ /_mod$/ end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":458,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23cmod%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":447,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "condition",
            "namespace":                    "YARD::Parser::Ruby::ConditionalNode",
            "path":                         "YARD::Parser::Ruby::ConditionalNode#condition",
            "scope":                        "instance",
            "signature":                    "def condition; first end",
            "source":                       "def condition; first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":447,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23condition"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":446,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "condition?",
            "namespace":                    "YARD::Parser::Ruby::ConditionalNode",
            "path":                         "YARD::Parser::Ruby::ConditionalNode#condition?",
            "scope":                        "instance",
            "signature":                    "def condition?; true end",
            "source":                       "def condition?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":446,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23condition%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":450,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "else_block",
            "namespace":                    "YARD::Parser::Ruby::ConditionalNode",
            "path":                         "YARD::Parser::Ruby::ConditionalNode#else_block",
            "scope":                        "instance",
            "signature":                    "def else_block",
            "source":                       "def else_block\n  if self[2] && !cmod?\n    self[2].type == :elsif ? self[2] : self[2][0]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":450,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23else_block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":448,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "then_block",
            "namespace":                    "YARD::Parser::Ruby::ConditionalNode",
            "path":                         "YARD::Parser::Ruby::ConditionalNode#then_block",
            "scope":                        "instance",
            "signature":                    "def then_block; self[1] end",
            "source":                       "def then_block; self[1] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":448,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AConditionalNode%23then_block"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::KeywordNode#kw?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":374,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "KeywordNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::KeywordNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode%23kw%3F"],
            "y_ld:files":                   [{"file_line":374,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":375,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "kw?",
            "namespace":                    "YARD::Parser::Ruby::KeywordNode",
            "path":                         "YARD::Parser::Ruby::KeywordNode#kw?",
            "scope":                        "instance",
            "signature":                    "def kw?; true end",
            "source":                       "def kw?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":375,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode%23kw%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken","YARD::Parser::Ruby::Legacy::RubyLex","YARD::Parser::Ruby::Legacy::Statement","YARD::Parser::Ruby::Legacy::TokenList","YARD::Parser::Ruby::Legacy::RubyParser","YARD::Parser::Ruby::Legacy::StatementList"],
            "current_file_has_comments":    true,
            "docstring":                    "Handles Ruby parsing in Ruby 1.8.",
            "dynamic":                      true,
            "files":                        [{"file_line":155,"file_path":"lib/yard/autoload.rb"},{"file_line":5,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"},{"file_line":2,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"},{"file_line":2,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"},{"file_line":4,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"},{"file_line":2,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "Legacy",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::Legacy",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList"],
            "y_ld:files":                   [{"file_line":155,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy"
        },
        {
            "attributes":                   {"class":{},"instance":{"skip_space":{"write":"YARD::Parser::Ruby::Legacy::RubyLex#skip_space=","read":"YARD::Parser::Ruby::Legacy::RubyLex#skip_space"},"read_auto_clean_up":{"write":"YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up=","read":"YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up"},"indent":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyLex#indent"},"lex_state":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyLex#lex_state"},"exception_on_syntax_error":{"write":"YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error=","read":"YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error"},"continue":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyLex#continue"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD::Parser::Ruby::Legacy::RubyLex#continue","YARD::Parser::Ruby::Legacy::RubyLex#lex_state","YARD::Parser::Ruby::Legacy::RubyLex.debug?","YARD::Parser::Ruby::Legacy::RubyLex#initialize","YARD::Parser::Ruby::Legacy::RubyLex#skip_space=","YARD::Parser::Ruby::Legacy::RubyLex#skip_space","YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up=","YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up","YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error=","YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error","YARD::Parser::Ruby::Legacy::RubyLex#indent","YARD::Parser::Ruby::Legacy::RubyLex#line_no","YARD::Parser::Ruby::Legacy::RubyLex#char_no","YARD::Parser::Ruby::Legacy::RubyLex#get_read","YARD::Parser::Ruby::Legacy::RubyLex#getc","YARD::Parser::Ruby::Legacy::RubyLex#getc_of_rests","YARD::Parser::Ruby::Legacy::RubyLex#gets","YARD::Parser::Ruby::Legacy::RubyLex#ungetc","YARD::Parser::Ruby::Legacy::RubyLex#peek_equal?","YARD::Parser::Ruby::Legacy::RubyLex#peek","YARD::Parser::Ruby::Legacy::RubyLex#lex","YARD::Parser::Ruby::Legacy::RubyLex#token","YARD::Parser::Ruby::Legacy::RubyLex::ENINDENT_CLAUSE","YARD::Parser::Ruby::Legacy::RubyLex::ACCEPTS_COLON","YARD::Parser::Ruby::Legacy::RubyLex::DEINDENT_CLAUSE","YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_LTYPE","YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_PAREN","YARD::Parser::Ruby::Legacy::RubyLex::Ltype2Token","YARD::Parser::Ruby::Legacy::RubyLex::DLtype2Token","YARD::Parser::Ruby::Legacy::RubyLex#lex_init","YARD::Parser::Ruby::Legacy::RubyLex#lex_int2","YARD::Parser::Ruby::Legacy::RubyLex#identify_gvar","YARD::Parser::Ruby::Legacy::RubyLex#identify_identifier","YARD::Parser::Ruby::Legacy::RubyLex#identify_here_document","YARD::Parser::Ruby::Legacy::RubyLex#identify_quotation","YARD::Parser::Ruby::Legacy::RubyLex#identify_number","YARD::Parser::Ruby::Legacy::RubyLex#identify_string","YARD::Parser::Ruby::Legacy::RubyLex#skip_inner_expression","YARD::Parser::Ruby::Legacy::RubyLex#identify_comment","YARD::Parser::Ruby::Legacy::RubyLex#read_escape"],
            "class_mixins":                 ["Exception2MessageMapper"],
            "current_file_has_comments":    true,
            "docstring":                    "Lexical analyzer for Ruby source",
            "dynamic":                      true,
            "files":                        [{"file_line":331,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "instance_mixins":              ["IRB","YARD::Parser::Ruby::Legacy::RubyToken"],
            "name":                         "RubyLex",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23continue","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_state","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex.debug%3F","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_space%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_space","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_auto_clean_up%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_auto_clean_up","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23exception_on_syntax_error%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23exception_on_syntax_error","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23indent","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23line_no","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23char_no","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23get_read","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23getc","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23getc_of_rests","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23gets","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23ungetc","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23peek_equal%3F","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23peek","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3AENINDENT_CLAUSE","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3AACCEPTS_COLON","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ADEINDENT_CLAUSE","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3APERCENT_LTYPE","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3APERCENT_PAREN","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ALtype2Token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ADLtype2Token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_init","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_int2","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_gvar","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_identifier","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_here_document","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_quotation","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_number","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_string","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_inner_expression","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_comment","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_escape"],
            "y_ld:files":                   [{"file_line":331,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":496,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "char_no",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#char_no",
            "scope":                        "instance",
            "signature":                    "def char_no",
            "source":                       "def char_no\n  @reader.column\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":496,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23char_no"
        },
        {
            "docstring":                    "Returns the value of attribute continue",
            "dynamic":                      true,
            "files":                        [{"file_line":456,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "continue",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#continue",
            "scope":                        "instance",
            "signature":                    "def continue",
            "source":                       "def continue\n  @continue\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":456,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23continue"
        },
        {
            "docstring":                    "Returns the value of attribute exception_on_syntax_error",
            "dynamic":                      true,
            "files":                        [{"file_line":487,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "exception_on_syntax_error",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error",
            "scope":                        "instance",
            "signature":                    "def exception_on_syntax_error",
            "source":                       "def exception_on_syntax_error\n  @exception_on_syntax_error\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":487,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23exception_on_syntax_error"
        },
        {
            "docstring":                    "Sets the attribute exception_on_syntax_error",
            "dynamic":                      true,
            "files":                        [{"file_line":487,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "exception_on_syntax_error=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#exception_on_syntax_error=",
            "scope":                        "instance",
            "signature":                    "def exception_on_syntax_error=(value)",
            "source":                       "def exception_on_syntax_error=(value)\n  @exception_on_syntax_error = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":487,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23exception_on_syntax_error%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":500,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "get_read",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#get_read",
            "scope":                        "instance",
            "signature":                    "def get_read",
            "source":                       "def get_read\n  @reader.get_read\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":500,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23get_read"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":504,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "getc",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#getc",
            "scope":                        "instance",
            "signature":                    "def getc",
            "source":                       "def getc\n  @reader.getc\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":504,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23getc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":508,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "getc_of_rests",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#getc_of_rests",
            "scope":                        "instance",
            "signature":                    "def getc_of_rests",
            "source":                       "def getc_of_rests\n  @reader.getc_already_read\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":508,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23getc_of_rests"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":512,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "gets",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#gets",
            "scope":                        "instance",
            "signature":                    "def gets",
            "source":                       "def gets\n  c = getc or return\n  l = \"\"\n  begin\n    l.concat c unless c == \"\\r\"\n    break if c == \"\\n\"\n  end while c = getc\n  l\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":512,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23gets"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1288,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_comment",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_comment",
            "scope":                        "instance",
            "signature":                    "def identify_comment",
            "source":                       "def identify_comment\n  @ltype = \"#\"\n  comment = \"#\"\n  while ch = getc\n    if ch == \"\\\\\"\n      ch = getc\n      if ch == \"\\n\"\n        ch = \" \"\n      else\n        comment << \"\\\\\"\n      end\n    else\n      if ch == \"\\n\"\n        @ltype = nil\n        ungetc\n        break\n      end\n    end\n    comment << ch\n  end\n  return Token(TkCOMMENT).set_text(comment)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1288,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_comment"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":976,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_gvar",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_gvar",
            "scope":                        "instance",
            "signature":                    "def identify_gvar",
            "source":                       "def identify_gvar\n  @lex_state = EXPR_END\n  str = \"$\"\n\n  tk = case ch = getc\n       when /[~_*$?!@\\/\\\\;,=:<>\".]/   #\"\n         str << ch\n         Token(TkGVAR, str)\n\n       when \"-\"\n         str << \"-\" << getc\n         Token(TkGVAR, str)\n\n       when \"&\", \"`\", \"'\", \"+\"\n         str << ch\n         Token(TkBACK_REF, str)\n\n       when /[1-9]/\n         str << ch\n         while (ch = getc) =~ /[0-9]/\n           str << ch\n         end\n         ungetc\n         Token(TkNTH_REF)\n       when /\\w/\n         ungetc\n         ungetc\n         return identify_identifier\n       else\n         ungetc\n         Token(\"$\")\n       end\n  tk.set_text(str)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":976,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_gvar"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1093,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_here_document",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_here_document",
            "scope":                        "instance",
            "signature":                    "def identify_here_document",
            "source":                       "def identify_here_document\n  ch = getc\n  if ch == \"-\"\n    ch = getc\n    indent = true\n  end\n  if /['\"`]/ =~ ch            # '\n    lt = ch\n    quoted = \"\"\n    while (c = getc) && c != lt\n      quoted.concat c\n    end\n  else\n    lt = '\"'\n    quoted = ch.dup\n    while (c = getc) && c =~ /\\w/\n      quoted.concat c\n    end\n    ungetc\n  end\n\n  ltback, @ltype = @ltype, lt\n  reserve = \"\"\n\n  while ch = getc\n    reserve << ch\n    if ch == \"\\\\\"    #\"\n      ch = getc\n      reserve << ch\n    elsif ch == \"\\n\"\n      break\n    end\n  end\n\n  str = \"\"\n  while (l = gets)\n    l.chomp!\n    l.strip! if indent\n    break if l == quoted\n    str << l.chomp << \"\\n\"\n  end\n\n  @reader.divert_read_from(reserve)\n\n  @ltype = ltback\n  @lex_state = EXPR_END\n  Token(Ltype2Token[lt], str).set_text(str.dump)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1093,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_here_document"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1011,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_identifier",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_identifier",
            "scope":                        "instance",
            "signature":                    "def identify_identifier",
            "source":                       "def identify_identifier\n  token = \"\"\n  token.concat getc if peek(0) =~ /[$@]/\n  token.concat getc if peek(0) == \"@\"\n\n  while (ch = getc) =~ /\\w|_/\n    print \":\", ch, \":\" if RubyLex.debug?\n    token.concat ch\n  end\n  ungetc\n\n  if ch == \"!\" or ch == \"?\"\n    token.concat getc\n  end\n  # fix token\n\n  # $stderr.puts \"identifier - #{token}, state = #@lex_state\"\n\n  case token\n  when /^\\$/\n    return Token(TkGVAR, token).set_text(token)\n  when /^\\@/\n    @lex_state = EXPR_END\n    return Token(TkIVAR, token).set_text(token)\n  end\n\n  if @lex_state != EXPR_DOT\n    print token, \"\\n\" if RubyLex.debug?\n\n    token_c, *trans = TkReading2Token[token]\n    if token_c\n      # reserved word?\n\n      if (@lex_state != EXPR_BEG &&\n          @lex_state != EXPR_FNAME &&\n          trans[1])\n        # modifiers\n        token_c = TkSymbol2Token[trans[1]]\n        @lex_state = trans[0]\n      else\n        if @lex_state != EXPR_FNAME\n          if ENINDENT_CLAUSE.include?(token)\n            @indent += 1\n\n            if ACCEPTS_COLON.include?(token)\n              @colonblock_seen = true\n            else\n              @colonblock_seen = false\n            end\n          elsif DEINDENT_CLAUSE.include?(token)\n            @indent -= 1\n            @colonblock_seen = false\n          end\n          @lex_state = trans[0]\n        else\n          @lex_state = EXPR_END\n        end\n      end\n      return Token(token_c, token).set_text(token)\n    end\n  end\n\n  if @lex_state == EXPR_FNAME\n    @lex_state = EXPR_END\n    if peek(0) == '='\n      token.concat getc\n    end\n  elsif @lex_state == EXPR_BEG || @lex_state == EXPR_DOT\n    @lex_state = EXPR_ARG\n  else\n    @lex_state = EXPR_END\n  end\n\n  if token[0, 1] =~ /[A-Z]/\n    return Token(TkCONSTANT, token).set_text(token)\n  elsif token[token.size - 1, 1] =~ /[!?]/\n    return Token(TkFID, token).set_text(token)\n  else\n    return Token(TkIDENTIFIER, token).set_text(token)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1011,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_identifier"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1161,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_number",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"start"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_number",
            "scope":                        "instance",
            "signature":                    "def identify_number(start)",
            "source":                       "def identify_number(start)\n  str = start.dup\n\n  if start == \"+\" or start == \"-\" or start == \"\"\n    start = getc\n    str << start\n  end\n\n  @lex_state = EXPR_END\n\n  if start == \"0\"\n    if peek(0) == \"x\"\n      ch = getc\n      str << ch\n      match = /[0-9a-f_]/\n    else\n      match = /[0-7_]/\n    end\n    while ch = getc\n      if ch !~ match\n        ungetc\n        break\n      else\n        str << ch\n      end\n    end\n    return Token(TkINTEGER).set_text(str)\n  end\n\n  type = TkINTEGER\n  allow_point = TRUE\n  allow_e = TRUE\n  while ch = getc\n    case ch\n    when /[0-9_]/\n      str << ch\n\n    when allow_point && \".\"\n      type = TkFLOAT\n      if peek(0) !~ /[0-9]/\n        ungetc\n        break\n      end\n      str << ch\n      allow_point = false\n\n    when allow_e && \"e\", allow_e && \"E\"\n      str << ch\n      type = TkFLOAT\n      if peek(0) =~ /[+-]/\n        str << getc\n      end\n      allow_e = false\n      allow_point = false\n    else\n      ungetc\n      break\n    end\n  end\n  Token(type).set_text(str)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1161,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_number"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1142,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_quotation",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"initial_char"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_quotation",
            "scope":                        "instance",
            "signature":                    "def identify_quotation(initial_char)",
            "source":                       "def identify_quotation(initial_char)\n  ch = getc\n  if lt = PERCENT_LTYPE[ch]\n    initial_char += ch\n    ch = getc\n  elsif ch =~ /\\W/\n    lt = \"\\\"\"\n  else\n    # RubyLex.fail SyntaxError, \"unknown type of %string ('#{ch}')\"\n  end\n  # if ch !~ /\\W/\n  #   ungetc\n  #   next\n  # end\n  # @ltype = lt\n  @quoted = ch unless @quoted = PERCENT_PAREN[ch]\n  identify_string(lt, @quoted, ch, initial_char) if lt\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1142,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_quotation"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1223,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "identify_string",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"ltype"},{"parm_type":"ltype","parm_name":"quoted"},{"parm_type":"nil","parm_name":"opener"},{"parm_type":"nil","parm_name":"initial_char"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#identify_string",
            "scope":                        "instance",
            "signature":                    "def identify_string(ltype, quoted = ltype, opener=nil, initial_char = nil)",
            "source":                       "def identify_string(ltype, quoted = ltype, opener=nil, initial_char = nil)\n  @ltype = ltype\n  @quoted = quoted\n  subtype = nil\n\n  str = \"\"\n  str << initial_char if initial_char\n  str << (opener||quoted)\n\n  nest = 0\n  begin\n    while ch = getc\n      str << ch\n      if @quoted == ch\n        if nest == 0\n          break\n        else\n          nest -= 1\n        end\n      elsif opener == ch\n        nest += 1\n      elsif @ltype != \"'\" && @ltype != \"]\" and ch == \"#\"\n        ch = getc\n        if ch == \"{\"\n          subtype = true\n          str << ch << skip_inner_expression\n        else\n          ungetc(ch)\n        end\n      elsif ch == '\\\\' #'\n        str << read_escape\n      end\n    end\n    if @ltype == \"/\"\n      if peek(0) =~ /i|o|n|e|s/\n        str << getc\n      end\n    end\n    if subtype\n      Token(DLtype2Token[ltype], str)\n    else\n      Token(Ltype2Token[ltype], str)\n    end.set_text(str)\n  ensure\n    @ltype = nil\n    @quoted = nil\n    @lex_state = EXPR_END\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1223,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23identify_string"
        },
        {
            "docstring":                    "Returns the value of attribute indent",
            "dynamic":                      true,
            "files":                        [{"file_line":489,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "indent",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#indent",
            "scope":                        "instance",
            "signature":                    "def indent",
            "source":                       "def indent\n  @indent\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":489,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23indent"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":463,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(content)",
            "source":                       "def initialize(content)\n  lex_init\n\n  @reader = BufferedReader.new(content)\n\n  @exp_line_no = @line_no = 1\n  @base_char_no = 0\n  @indent = 0\n\n  @ltype = nil\n  @quoted = nil\n  @lex_state = EXPR_BEG\n  @space_seen = false\n\n  @continue = false\n  @line = \"\"\n\n  @skip_space = false\n  @read_auto_clean_up = false\n  @exception_on_syntax_error = true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":463,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":535,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#lex",
            "scope":                        "instance",
            "signature":                    "def lex",
            "source":                       "def lex\n  catch(:eof) do\n    until (((tk = token).kind_of?(TkNL) || tk.kind_of?(TkEND_OF_SCRIPT)) &&\n       !@continue or\n       tk.nil?)\n    end\n    line = get_read\n\n    if line == \"\" and tk.kind_of?(TkEND_OF_SCRIPT) || tk.nil?\n      nil\n    else\n      line\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":535,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":612,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex_init",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#lex_init",
            "scope":                        "instance",
            "signature":                    "def lex_init()",
            "source":                       "def lex_init()\n  @OP = SLex.new\n  @OP.def_rules(\"\\0\", \"\\004\", \"\\032\") do |chars, io|\n    Token(TkEND_OF_SCRIPT).set_text(chars)\n  end\n\n  @OP.def_rules(\" \", \"\\t\", \"\\f\", \"\\r\", \"\\13\") do |chars, io|\n    @space_seen = TRUE\n    while (ch = getc) =~ /[ \\t\\f\\r\\13]/\n      chars << ch\n    end\n    ungetc\n    Token(TkSPACE).set_text(chars)\n  end\n\n  @OP.def_rule(\"#\") do\n    |op, io|\n    identify_comment\n  end\n\n  @OP.def_rule(\"=begin\", proc{@prev_char_no == 0 && peek(0) =~ /\\s/}) do\n    |op, io|\n    str = op\n    @ltype = \"=\"\n\n\n    begin\n      line = \"\"\n      begin\n        ch = getc\n        line << ch\n      end until ch == \"\\n\"\n      str << line\n    end until line =~ /^=end/\n\n    ungetc\n\n    @ltype = nil\n\n    if str =~ /\\A=begin\\s+rdoc/i\n      str.sub!(/\\A=begin.*\\n/, '')\n      str.sub!(/^=end.*/m, '')\n      Token(TkCOMMENT).set_text(str)\n    else\n      Token(TkCOMMENT).set_text(str)\n    end\n  end\n\n  @OP.def_rule(\"\\n\") do\n    print \"\\\\n\\n\" if RubyLex.debug?\n    @colonblock_seen = false\n    case @lex_state\n    when EXPR_BEG, EXPR_FNAME, EXPR_DOT\n      @continue = TRUE\n    else\n      @continue = FALSE\n      @lex_state = EXPR_BEG\n    end\n    Token(TkNL).set_text(\"\\n\")\n  end\n\n  @OP.def_rules(\"*\", \"**\",\n    \"!\", \"!=\", \"!~\",\n    \"=\", \"==\", \"===\",\n    \"=~\", \"<=>\",\n    \"<\", \"<=\",\n    \">\", \">=\", \">>\") do |op, io|\n    @lex_state = EXPR_BEG\n    Token(op).set_text(op)\n  end\n\n  @OP.def_rules(\"<<\") do |op, io|\n    tk = nil\n    if @lex_state != EXPR_END && @lex_state != EXPR_CLASS &&\n       (@lex_state != EXPR_ARG || @space_seen)\n      c = peek(0)\n      tk = identify_here_document if /[-\\w_\\\"\\'\\`]/ =~ c\n    end\n    if !tk\n      @lex_state = EXPR_BEG\n      tk = Token(op).set_text(op)\n    end\n    tk\n  end\n\n  @OP.def_rules(\"'\", '\"') do |op, io|\n    identify_string(op)\n  end\n\n  @OP.def_rules(\"`\") do |op, io|\n    if @lex_state == EXPR_FNAME\n      Token(op).set_text(op)\n    else\n      identify_string(op)\n    end\n  end\n\n  @OP.def_rules('?') do |op, io|\n    if @lex_state == EXPR_END\n      @lex_state = EXPR_BEG\n      Token(TkQUESTION).set_text(op)\n    else\n      ch = getc\n      if @lex_state == EXPR_ARG && ch !~ /\\s/\n        ungetc\n        @lex_state = EXPR_BEG\n        Token(TkQUESTION).set_text(op)\n      else\n        str = op\n        str << ch\n        if (ch == '\\\\') #'\n          str << read_escape\n        end\n        @lex_state = EXPR_END\n        Token(TkINTEGER).set_text(str)\n      end\n    end\n  end\n\n  @OP.def_rules(\"&\", \"&&\", \"|\", \"||\") do |op, io|\n    @lex_state = EXPR_BEG\n    Token(op).set_text(op)\n  end\n\n  @OP.def_rules(\"+=\", \"-=\", \"*=\", \"**=\",\n    \"&=\", \"|=\", \"^=\", \"<<=\", \">>=\", \"||=\", \"&&=\") do |op, io|\n    @lex_state = EXPR_BEG\n    op =~ /^(.*)=$/\n    Token(TkOPASGN, $1).set_text(op)\n  end\n\n  @OP.def_rule(\"+@\", proc{@lex_state == EXPR_FNAME}) do |op, io|\n    Token(TkUPLUS).set_text(op)\n  end\n\n  @OP.def_rule(\"-@\", proc{@lex_state == EXPR_FNAME}) do |op, io|\n    Token(TkUMINUS).set_text(op)\n  end\n\n  @OP.def_rules(\"+\", \"-\") do |op, io|\n    catch(:RET) do\n      if @lex_state == EXPR_ARG\n        if @space_seen and peek(0) =~ /[0-9]/\n          throw :RET, identify_number(op)\n        else\n          @lex_state = EXPR_BEG\n        end\n      elsif @lex_state != EXPR_END and peek(0) =~ /[0-9]/\n        throw :RET, identify_number(op)\n      else\n        @lex_state = EXPR_BEG\n      end\n      Token(op).set_text(op)\n    end\n  end\n\n  @OP.def_rule(\".\") do\n    @lex_state = EXPR_BEG\n    if peek(0) =~ /[0-9]/\n      ungetc\n      identify_number(\"\")\n    else\n      # for obj.if\n      @lex_state = EXPR_DOT\n      Token(TkDOT).set_text(\".\")\n    end\n  end\n\n  @OP.def_rules(\"..\", \"...\") do |op, io|\n    @lex_state = EXPR_BEG\n    Token(op).set_text(op)\n  end\n\n  lex_int2\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":612,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_init"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":788,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex_int2",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#lex_int2",
            "scope":                        "instance",
            "signature":                    "def lex_int2",
            "source":                       "def lex_int2\n  @OP.def_rules(\"]\", \"}\", \")\") do\n    |op, io|\n    @lex_state = EXPR_END\n    @indent -= 1\n    Token(op).set_text(op)\n  end\n\n  @OP.def_rule(\":\") do\n    if (@colonblock_seen && @lex_state != EXPR_BEG) || peek(0) =~ /\\s/\n      @lex_state = EXPR_BEG\n      tk = Token(TkCOLON)\n    else\n      @lex_state = EXPR_FNAME\n      tk = Token(TkSYMBEG)\n    end\n    tk.set_text(\":\")\n  end\n\n  @OP.def_rule(\"::\") do\n    # p @lex_state.id2name, @space_seen\n    if @lex_state == EXPR_BEG or @lex_state == EXPR_ARG && @space_seen\n      @lex_state = EXPR_BEG\n      tk = Token(TkCOLON3)\n    else\n      @lex_state = EXPR_DOT\n      tk = Token(TkCOLON2)\n    end\n    tk.set_text(\"::\")\n  end\n\n  @OP.def_rule(\"/\") do |op, io|\n    if @lex_state == EXPR_BEG || @lex_state == EXPR_MID\n      identify_string(op)\n    elsif peek(0) == '='\n      getc\n      @lex_state = EXPR_BEG\n      Token(TkOPASGN, :/).set_text(\"/=\") #\")\n    elsif @lex_state == EXPR_ARG and @space_seen and peek(0) !~ /\\s/\n      identify_string(op)\n    else\n      @lex_state = EXPR_BEG\n      Token(\"/\").set_text(op)\n    end\n  end\n\n  @OP.def_rules(\"^\") do\n    @lex_state = EXPR_BEG\n    Token(\"^\").set_text(\"^\")\n  end\n\n  # @OP.def_rules(\"^=\") do\n  #   @lex_state = EXPR_BEG\n  #   Token(TkOPASGN, :^)\n  # end\n\n  @OP.def_rules(\",\", \";\") do |op, io|\n    @colonblock_seen = false\n    @lex_state = EXPR_BEG\n    Token(op).set_text(op)\n  end\n\n  @OP.def_rule(\"~\") do\n    @lex_state = EXPR_BEG\n    Token(\"~\").set_text(\"~\")\n  end\n\n  @OP.def_rule(\"~@\", proc{@lex_state = EXPR_FNAME}) do\n    @lex_state = EXPR_BEG\n    Token(\"~\").set_text(\"~@\")\n  end\n\n  @OP.def_rule(\"(\") do\n    @indent += 1\n    # if @lex_state == EXPR_BEG || @lex_state == EXPR_MID\n    #  @lex_state = EXPR_BEG\n    #  tk = Token(TkfLPAREN)\n    # else\n      @lex_state = EXPR_BEG\n      tk = Token(TkLPAREN)\n    # end\n    tk.set_text(\"(\")\n  end\n\n  @OP.def_rule(\"[]\", proc{@lex_state == EXPR_FNAME}) do\n    Token(\"[]\").set_text(\"[]\")\n  end\n\n  @OP.def_rule(\"[]=\", proc{@lex_state == EXPR_FNAME}) do\n    Token(\"[]=\").set_text(\"[]=\")\n  end\n\n  @OP.def_rule(\"[\") do\n    @indent += 1\n    # if @lex_state == EXPR_FNAME\n    #   t = Token(TkfLBRACK)\n    # else\n    #   if @lex_state == EXPR_BEG || @lex_state == EXPR_MID\n    #     t = Token(TkLBRACK)\n    #   elsif @lex_state == EXPR_ARG && @space_seen\n    #   else\n    #     t = Token(TkfLBRACK)\n    #   end\n    # end\n    t = Token(TkLBRACK)\n    @lex_state = EXPR_BEG\n    t.set_text(\"[\")\n  end\n\n  @OP.def_rule(\"{\") do\n    @indent += 1\n    # if @lex_state != EXPR_END && @lex_state != EXPR_ARG\n    #   t = Token(TkLBRACE)\n    # else\n    #   t = Token(TkfLBRACE)\n    # end\n    t = Token(TkLBRACE)\n    @lex_state = EXPR_BEG\n    t.set_text(\"{\")\n  end\n\n  @OP.def_rule('\\\\') do   #'\n    if getc == \"\\n\"\n      @space_seen = true\n      @continue = true\n      Token(TkSPACE).set_text(\"\\\\\\n\")\n    else\n      ungetc\n      Token(\"\\\\\").set_text(\"\\\\\")  #\"\n    end\n  end\n\n  @OP.def_rule('%') do\n    |op, io|\n    if @lex_state == EXPR_BEG || @lex_state == EXPR_MID\n      identify_quotation('%')\n    elsif peek(0) == '='\n      getc\n      Token(TkOPASGN, \"%\").set_text(\"%=\")\n    elsif @lex_state == EXPR_ARG and @space_seen and peek(0) !~ /\\s/\n      identify_quotation('%')\n    else\n      @lex_state = EXPR_BEG\n      Token(\"%\").set_text(\"%\")\n    end\n  end\n\n  @OP.def_rule('$') do  #'\n    identify_gvar\n  end\n\n  @OP.def_rule('@') do\n    if peek(0) =~ /[@\\w_]/\n      ungetc\n      identify_identifier\n    else\n      Token(\"@\").set_text(\"@\")\n    end\n  end\n\n  # @OP.def_rule(\"def\", proc{|op, io| /\\s/ =~ io.peek(0)}) do\n  #   |op, io|\n  #   @indent += 1\n  #   @lex_state = EXPR_FNAME\n  # # @lex_state = EXPR_END\n  # # until @rests[0] == \"\\n\" or @rests[0] == \";\"\n  # #   rests.shift\n  # # end\n  # end\n\n  @OP.def_rule(\"__END__\", proc{@prev_char_no == 0 && peek(0) =~ /[\\r\\n]/}) do\n    throw :eof\n  end\n\n  @OP.def_rule(\"\") do |op, io|\n    printf \"MATCH: start %s: %s\\n\", op, io.inspect if RubyLex.debug?\n    if peek(0) =~ /[0-9]/\n      t = identify_number(\"\")\n    elsif peek(0) =~ /[\\w_]/\n      t = identify_identifier\n    end\n    printf \"MATCH: end %s: %s\\n\", op, io.inspect if RubyLex.debug?\n    t\n  end\n\n  p @OP if RubyLex.debug?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":788,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_int2"
        },
        {
            "docstring":                    "Returns the value of attribute lex_state",
            "dynamic":                      true,
            "files":                        [{"file_line":457,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex_state",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#lex_state",
            "scope":                        "instance",
            "signature":                    "def lex_state",
            "source":                       "def lex_state\n  @lex_state\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":457,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23lex_state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "io functions",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":492,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "line_no",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#line_no",
            "scope":                        "instance",
            "signature":                    "def line_no",
            "source":                       "def line_no\n  @reader.line_num\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":492,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23line_no"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":531,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "peek",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":"0","parm_name":"i"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#peek",
            "scope":                        "instance",
            "signature":                    "def peek(i = 0)",
            "source":                       "def peek(i = 0)\n  @reader.peek(i)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":531,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23peek"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":527,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "peek_equal?",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"str"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#peek_equal?",
            "scope":                        "instance",
            "signature":                    "def peek_equal?(str)",
            "source":                       "def peek_equal?(str)\n  @reader.peek_equal(str)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":527,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23peek_equal%3F"
        },
        {
            "docstring":                    "Returns the value of attribute read_auto_clean_up",
            "dynamic":                      true,
            "files":                        [{"file_line":486,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "read_auto_clean_up",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up",
            "scope":                        "instance",
            "signature":                    "def read_auto_clean_up",
            "source":                       "def read_auto_clean_up\n  @read_auto_clean_up\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":486,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_auto_clean_up"
        },
        {
            "docstring":                    "Sets the attribute read_auto_clean_up",
            "dynamic":                      true,
            "files":                        [{"file_line":486,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "read_auto_clean_up=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#read_auto_clean_up=",
            "scope":                        "instance",
            "signature":                    "def read_auto_clean_up=(value)",
            "source":                       "def read_auto_clean_up=(value)\n  @read_auto_clean_up = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":486,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_auto_clean_up%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1311,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "read_escape",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#read_escape",
            "scope":                        "instance",
            "signature":                    "def read_escape",
            "source":                       "def read_escape\n  res = \"\"\n  case ch = getc\n  when /[0-7]/\n    ungetc ch\n    3.times do\n    case ch = getc\n    when /[0-7]/\n    when nil\n      break\n    else\n      ungetc\n      break\n    end\n    res << ch\n  end\n\n  when \"x\"\n    res << ch\n    2.times do\n    case ch = getc\n    when /[0-9a-fA-F]/\n    when nil\n      break\n    else\n      ungetc\n      break\n    end\n      res << ch\n    end\n\n  when \"M\"\n    res << ch\n    if (ch = getc) != '-'\n      ungetc\n    else\n      res << ch\n      if (ch = getc) == \"\\\\\" #\"\n        res << ch\n        res << read_escape\n      else\n        res << ch\n      end\n    end\n\n  when \"C\", \"c\" #, \"^\"\n    res << ch\n    if ch == \"C\" and (ch = getc) != \"-\"\n      ungetc\n    else\n      res << ch\n      if (ch = getc) == \"\\\\\" #\"\n        res << ch\n        res << read_escape\n      else\n        res << ch\n      end\n    end\n  else\n    res << ch\n  end\n  res\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1311,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23read_escape"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":1273,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "skip_inner_expression",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#skip_inner_expression",
            "scope":                        "instance",
            "signature":                    "def skip_inner_expression",
            "source":                       "def skip_inner_expression\n  res = \"\"\n  nest = 0\n  while (ch = getc)\n    res << ch\n    if ch == '}'\n      break if nest.zero?\n      nest -= 1\n    elsif ch == '{'\n      nest += 1\n    end\n  end\n  res\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":1273,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_inner_expression"
        },
        {
            "docstring":                    "Returns the value of attribute skip_space",
            "dynamic":                      true,
            "files":                        [{"file_line":485,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "skip_space",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#skip_space",
            "scope":                        "instance",
            "signature":                    "def skip_space",
            "source":                       "def skip_space\n  @skip_space\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":485,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_space"
        },
        {
            "docstring":                    "Sets the attribute skip_space",
            "dynamic":                      true,
            "files":                        [{"file_line":485,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "skip_space=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#skip_space=",
            "scope":                        "instance",
            "signature":                    "def skip_space=(value)",
            "source":                       "def skip_space=(value)\n  @skip_space = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":485,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23skip_space%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":551,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#token",
            "scope":                        "instance",
            "signature":                    "def token",
            "source":                       "def token\n  set_token_position(line_no, char_no)\n  catch(:eof) do\n    begin\n      begin\n        tk = @OP.match(self)\n        @space_seen = tk.kind_of?(TkSPACE)\n      rescue SyntaxError\n        abort if @exception_on_syntax_error\n        tk = TkError.new(line_no, char_no)\n      end\n    end while @skip_space and tk.kind_of?(TkSPACE)\n    if @read_auto_clean_up\n      get_read\n    end\n    # throw :eof unless tk\n    p tk if $DEBUG\n    tk.lex_state = lex_state if tk\n    tk\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":551,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":523,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "ungetc",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "parameters":                   [{"parm_type":"nil","parm_name":"c"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex#ungetc",
            "scope":                        "instance",
            "signature":                    "def ungetc(c = nil)",
            "source":                       "def ungetc(c = nil)\n  @reader.ungetc(c)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":523,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%23ungetc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":459,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "debug?",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex.debug?",
            "scope":                        "class",
            "signature":                    "def RubyLex.debug?",
            "source":                       "def RubyLex.debug?\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":459,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex.debug%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":577,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "ACCEPTS_COLON",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::ACCEPTS_COLON",
            "signature":                    "ACCEPTS_COLON = [\"if\", \"for\", \"unless\", \"until\", \"while\"]",
            "source":                       "ACCEPTS_COLON = [\"if\", \"for\", \"unless\", \"until\", \"while\"]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\"if\", \"for\", \"unless\", \"until\", \"while\"]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":577,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3AACCEPTS_COLON"
        },
        {
            "attributes":                   {"class":{},"instance":{"line_num":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#line_num"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#line_num","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#initialize","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#column","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#getc","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#getc_already_read","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#ungetc","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#get_read","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#peek","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#peek_equal","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#divert_read_from"],
            "current_file_has_comments":    true,
            "docstring":                    "Read an input stream character by character. We allow for unlimited\nungetting of characters just read.\n\nWe simplify the implementation greatly by reading the entire input\ninto a buffer initially, and then simply traversing it using\npointers.\n\nWe also have to allow for the <i>here document diversion</i>. This\nlittle gem comes about when the lexer encounters a here\ndocument. At this point we effectively need to split the input\nstream into two parts: one to read the body of the here document,\nthe other to read the rest of the input line where the here\ndocument was initially encountered. For example, we might have\n\n  do_something(<<-A, <<-B)\n    stuff\n    for\n  A\n    stuff\n    for\n  B\n\nWhen the lexer encounters the <<A, it reads until the end of the\nline, and keeps it around for later. It then reads the body of the\nhere document.  Once complete, it needs to read the rest of the\noriginal line, but then skip the here document body.",
            "dynamic":                      true,
            "files":                        [{"file_line":360,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "BufferedReader",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23line_num","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23column","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23getc","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23getc_already_read","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23ungetc","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23get_read","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23peek","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23peek_equal","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23divert_read_from"],
            "y_ld:files":                   [{"file_line":360,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":383,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "column",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#column",
            "scope":                        "instance",
            "signature":                    "def column",
            "source":                       "def column\n  @offset - @last_newline\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":383,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23column"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":437,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "divert_read_from",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "parameters":                   [{"parm_type":null,"parm_name":"reserve"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#divert_read_from",
            "scope":                        "instance",
            "signature":                    "def divert_read_from(reserve)",
            "source":                       "def divert_read_from(reserve)\n  @content[@offset, 0] = reserve\n  @size      = @content.size\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":437,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23divert_read_from"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":418,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "get_read",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#get_read",
            "scope":                        "instance",
            "signature":                    "def get_read",
            "source":                       "def get_read\n  res = @content[@read_back_offset...@offset]\n  @read_back_offset = @offset\n  res\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":418,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23get_read"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":387,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "getc",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#getc",
            "scope":                        "instance",
            "signature":                    "def getc",
            "source":                       "def getc\n  return nil if @offset >= @size\n  ch = @content[@offset, 1]\n\n  @offset += 1\n  @hwm = @offset if @hwm < @offset\n\n  if @newline_pending\n    @line_num += 1\n    @last_newline = @offset - 1\n    @newline_pending = false\n  end\n\n  if ch == \"\\n\"\n    @newline_pending = true\n  end\n  ch\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":387,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23getc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":406,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "getc_already_read",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#getc_already_read",
            "scope":                        "instance",
            "signature":                    "def getc_already_read",
            "source":                       "def getc_already_read\n  getc\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":406,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23getc_already_read"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":364,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(content)",
            "source":                       "def initialize(content)\n  if /\\t/ =~ content\n    tab_width = 2\n    content = content.split(/\\n/).map do |line|\n      1 while line.gsub!(/\\t+/) { ' ' * (tab_width*$&.length - $`.length % tab_width)}  && $~ #`\n      line\n    end .join(\"\\n\")\n  end\n  @content   = content\n  @content << \"\\n\" unless @content[-1,1] == \"\\n\"\n  @size      = @content.size\n  @offset    = 0\n  @hwm       = 0\n  @line_num  = 1\n  @read_back_offset = 0\n  @last_newline = 0\n  @newline_pending = false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":364,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute line_num",
            "dynamic":                      true,
            "files":                        [{"file_line":362,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "line_num",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#line_num",
            "scope":                        "instance",
            "signature":                    "def line_num",
            "source":                       "def line_num\n  @line_num\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":362,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23line_num"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":424,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "peek",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "parameters":                   [{"parm_type":null,"parm_name":"at"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#peek",
            "scope":                        "instance",
            "signature":                    "def peek(at)",
            "source":                       "def peek(at)\n  pos = @offset + at\n  if pos >= @size\n    nil\n  else\n    @content[pos, 1]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":424,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23peek"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":433,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "peek_equal",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "parameters":                   [{"parm_type":null,"parm_name":"str"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#peek_equal",
            "scope":                        "instance",
            "signature":                    "def peek_equal(str)",
            "source":                       "def peek_equal(str)\n  @content[@offset, str.length] == str\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":433,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23peek_equal"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":410,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "ungetc",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader",
            "parameters":                   [{"parm_type":null,"parm_name":"ch"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader#ungetc",
            "scope":                        "instance",
            "signature":                    "def ungetc(ch)",
            "source":                       "def ungetc(ch)\n  raise \"unget past beginning of file\" if @offset <= 0\n  @offset -= 1\n  if @content[@offset] == ?\\n\n    @newline_pending = false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":410,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ABufferedReader%23ungetc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":578,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "DEINDENT_CLAUSE",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::DEINDENT_CLAUSE",
            "signature":                    "DEINDENT_CLAUSE = [\"end\" #, \"when\"",
            "source":                       "DEINDENT_CLAUSE = [\"end\" #, \"when\"\n]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\"end\" #, \"when\"\n]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":578,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ADEINDENT_CLAUSE"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":606,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "DLtype2Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::DLtype2Token",
            "signature":                    "DLtype2Token = {",
            "source":                       "DLtype2Token = {\n  \"\\\"\" => TkDSTRING,\n  \"\\`\" => TkDXSTRING,\n  \"/\" => TkDREGEXP,\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  \"\\\"\" => TkDSTRING,\n  \"\\`\" => TkDXSTRING,\n  \"/\" => TkDREGEXP,\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":606,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ADLtype2Token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":573,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "ENINDENT_CLAUSE",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::ENINDENT_CLAUSE",
            "signature":                    "ENINDENT_CLAUSE = [",
            "source":                       "ENINDENT_CLAUSE = [\n  \"case\", \"class\", \"def\", \"do\", \"for\", \"if\",\n  \"module\", \"unless\", \"until\", \"while\", \"begin\" #, \"when\"\n]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\n  \"case\", \"class\", \"def\", \"do\", \"for\", \"if\",\n  \"module\", \"unless\", \"until\", \"while\", \"begin\" #, \"when\"\n]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":573,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3AENINDENT_CLAUSE"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":597,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "Ltype2Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::Ltype2Token",
            "signature":                    "Ltype2Token = {",
            "source":                       "Ltype2Token = {\n  \"\\'\" => TkSTRING,\n  \"\\\"\" => TkSTRING,\n  \"\\`\" => TkXSTRING,\n  \"/\" => TkREGEXP,\n  \"]\" => TkDSTRING\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  \"\\'\" => TkSTRING,\n  \"\\\"\" => TkSTRING,\n  \"\\`\" => TkXSTRING,\n  \"/\" => TkREGEXP,\n  \"]\" => TkDSTRING\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":597,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3ALtype2Token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":581,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "PERCENT_LTYPE",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_LTYPE",
            "signature":                    "PERCENT_LTYPE = {",
            "source":                       "PERCENT_LTYPE = {\n  \"q\" => \"\\'\",\n  \"Q\" => \"\\\"\",\n  \"x\" => \"\\`\",\n  \"r\" => \"/\",\n  \"w\" => \"]\",\n  \"W\" => \"]\"\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  \"q\" => \"\\'\",\n  \"Q\" => \"\\\"\",\n  \"x\" => \"\\`\",\n  \"r\" => \"/\",\n  \"w\" => \"]\",\n  \"W\" => \"]\"\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":581,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3APERCENT_LTYPE"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":590,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "PERCENT_PAREN",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyLex",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_PAREN",
            "signature":                    "PERCENT_PAREN = {",
            "source":                       "PERCENT_PAREN = {\n  \"{\" => \"}\",\n  \"[\" => \"]\",\n  \"<\" => \">\",\n  \"(\" => \")\"\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  \"{\" => \"}\",\n  \"[\" => \"]\",\n  \"<\" => \">\",\n  \"(\" => \")\"\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":590,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyLex%3A%3APERCENT_PAREN"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyParser#initialize","YARD::Parser::Ruby::Legacy::RubyParser#parse","YARD::Parser::Ruby::Legacy::RubyParser#tokenize","YARD::Parser::Ruby::Legacy::RubyParser#enumerator","YARD::Parser::Ruby::Legacy::RubyParser#encoding_line","YARD::Parser::Ruby::Legacy::RubyParser#shebang_line"],
            "current_file_has_comments":    true,
            "docstring":                    "Legacy Ruby parser",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "RubyParser",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23parse","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23tokenize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23enumerator","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23encoding_line","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23shebang_line"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "encoding_line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#encoding_line",
            "scope":                        "instance",
            "signature":                    "def encoding_line; @parse.encoding_line end",
            "source":                       "def encoding_line; @parse.encoding_line end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23encoding_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "enumerator",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#enumerator",
            "scope":                        "instance",
            "signature":                    "def enumerator",
            "source":                       "def enumerator\n  @parse\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23enumerator"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, filename)",
            "source":                       "def initialize(source, filename)\n  @source = source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  @parse ||= StatementList.new(@source)\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "shebang_line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#shebang_line",
            "scope":                        "instance",
            "signature":                    "def shebang_line; @parse.shebang_line end",
            "source":                       "def shebang_line; @parse.shebang_line end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23shebang_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/parser/ruby/legacy/ruby_parser.rb"}],
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyParser",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyParser#tokenize",
            "scope":                        "instance",
            "signature":                    "def tokenize",
            "source":                       "def tokenize\n  @tokenize ||= TokenList.new(@source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_parser.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyParser%23tokenize"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::EXPR_BEG","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_MID","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_END","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_ARG","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_FNAME","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_DOT","YARD::Parser::Ruby::Legacy::RubyToken::EXPR_CLASS","YARD::Parser::Ruby::Legacy::RubyToken::Token","YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents","YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd","YARD::Parser::Ruby::Legacy::RubyToken::TkNode","YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace","YARD::Parser::Ruby::Legacy::RubyToken::TkId","YARD::Parser::Ruby::Legacy::RubyToken::TkKW","YARD::Parser::Ruby::Legacy::RubyToken::TkVal","YARD::Parser::Ruby::Legacy::RubyToken::TkOp","YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN","YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar","YARD::Parser::Ruby::Legacy::RubyToken::TkError","YARD::Parser::Ruby::Legacy::RubyToken#set_token_position","YARD::Parser::Ruby::Legacy::RubyToken#Token","YARD::Parser::Ruby::Legacy::RubyToken::TokenDefinitions","YARD::Parser::Ruby::Legacy::RubyToken::TkReading2Token","YARD::Parser::Ruby::Legacy::RubyToken::TkSymbol2Token","YARD::Parser::Ruby::Legacy::RubyToken.def_token","YARD::Parser::Ruby::Legacy::RubyToken::NEWLINE_TOKEN"],
            "current_file_has_comments":    true,
            "docstring":                    "Legacy lexical tokenizer module.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "RubyToken",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_BEG","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_MID","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_END","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_ARG","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_FNAME","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_DOT","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_CLASS","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkBlockContents","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkStatementEnd","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkNode","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkWhitespace","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkKW","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkVal","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOp","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkError","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%23set_token_position","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%23Token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATokenDefinitions","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkReading2Token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkSymbol2Token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken.def_token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ANEWLINE_TOKEN"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":126,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "parameters":                   [{"parm_type":null,"parm_name":"token"},{"parm_type":"nil","parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken#Token",
            "scope":                        "instance",
            "signature":                    "def Token(token, value = nil)",
            "source":                       "def Token(token, value = nil)\n  tk = nil\n  case token\n  when String, Symbol\n    source = token.kind_of?(String) ? TkReading2Token : TkSymbol2Token\n    if (tk = source[token]).nil?\n      IRB.fail TkReading2TokenNoKey, token\n    end\n    tk = Token(tk[0], value)\n  else\n    if token\n      tk = if (token.ancestors & [TkId, TkVal, TkOPASGN, TkUnknownChar]).empty?\n             token.new(@prev_line_no, @prev_char_no)\n           else\n             token.new(@prev_line_no, @prev_char_no, value)\n           end\n    end\n  end\n  tk\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":126,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%23Token"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "set_token_position",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "parameters":                   [{"parm_type":null,"parm_name":"line"},{"parm_type":null,"parm_name":"char"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken#set_token_position",
            "scope":                        "instance",
            "signature":                    "def set_token_position(line, char)",
            "source":                       "def set_token_position(line, char)\n  @prev_line_no = line\n  @prev_char_no = char\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%23set_token_position"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":289,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "def_token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "parameters":                   [{"parm_type":null,"parm_name":"token_n"},{"parm_type":"Token","parm_name":"super_token"},{"parm_type":"nil","parm_name":"reading"},{"parm_type":null,"parm_name":"*opts"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken.def_token",
            "scope":                        "class",
            "signature":                    "def RubyToken.def_token(token_n, super_token = Token, reading = nil, *opts)",
            "source":                       "def RubyToken.def_token(token_n, super_token = Token, reading = nil, *opts)\n  token_n = token_n.id2name unless token_n.kind_of?(String)\n  if RubyToken.const_defined?(token_n)\n    # IRB.fail AlreadyDefinedToken, token_n\n  end\n\n  token_c =  Class.new super_token\n  RubyToken.const_set token_n, token_c\n  # token_c.inspect\n\n  if reading\n    if TkReading2Token[reading]\n      IRB.fail TkReading2TokenDuplicateError, token_n, reading\n    end\n    if opts.empty?\n      TkReading2Token[reading] = [token_c]\n    else\n      TkReading2Token[reading] = [token_c].concat(opts)\n    end\n  end\n  TkSymbol2Token[token_n.intern] = token_c\n\n  if token_c <= TkOp\n    token_c.class_eval %{\n      def self.op_name; \"#{reading}\"; end\n    }\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":289,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken.def_token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_ARG",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_ARG",
            "signature":                    "EXPR_ARG   = :EXPR_ARG",
            "source":                       "EXPR_ARG   = :EXPR_ARG",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_ARG",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_ARG"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_BEG",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_BEG",
            "signature":                    "EXPR_BEG   = :EXPR_BEG",
            "source":                       "EXPR_BEG   = :EXPR_BEG",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_BEG",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_BEG"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_CLASS",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_CLASS",
            "signature":                    "EXPR_CLASS = :EXPR_CLASS",
            "source":                       "EXPR_CLASS = :EXPR_CLASS",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_CLASS",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_CLASS"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_DOT",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_DOT",
            "signature":                    "EXPR_DOT   = :EXPR_DOT",
            "source":                       "EXPR_DOT   = :EXPR_DOT",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_DOT",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_DOT"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_END",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_END",
            "signature":                    "EXPR_END   = :EXPR_END",
            "source":                       "EXPR_END   = :EXPR_END",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_END",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_END"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_FNAME",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_FNAME",
            "signature":                    "EXPR_FNAME = :EXPR_FNAME",
            "source":                       "EXPR_FNAME = :EXPR_FNAME",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_FNAME",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_FNAME"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "EXPR_MID",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::EXPR_MID",
            "signature":                    "EXPR_MID   = :EXPR_MID",
            "source":                       "EXPR_MID   = :EXPR_MID",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        ":EXPR_MID",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AEXPR_MID"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":322,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "NEWLINE_TOKEN",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::NEWLINE_TOKEN",
            "signature":                    "NEWLINE_TOKEN = TkNL.new(0,0)",
            "source":                       "NEWLINE_TOKEN = TkNL.new(0,0)",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "TkNL.new(0,0)",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":322,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ANEWLINE_TOKEN"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents#text"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a block",
            "dynamic":                      true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkBlockContents",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkBlockContents%23text"],
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkBlockContents",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "text",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents#text",
            "scope":                        "instance",
            "signature":                    "def text; '...' end",
            "source":                       "def text; '...' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkBlockContents%23text"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":116,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkError",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkError",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":116,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkError",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "attributes":                   {"class":{},"instance":{"name":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::TkId#name"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkId#initialize","YARD::Parser::Ruby::Legacy::RubyToken::TkId#name"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a Ruby identifier",
            "dynamic":                      true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkId",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkId",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId%23name"],
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkId",
            "parameters":                   [{"parm_type":null,"parm_name":"line_no"},{"parm_type":null,"parm_name":"char_no"},{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkId#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(line_no, char_no, name)",
            "source":                       "def initialize(line_no, char_no, name)\n  super(line_no, char_no)\n  @name = name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkId",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkId#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId%23name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Represents a Ruby keyword",
            "dynamic":                      true,
            "files":                        [{"file_line":82,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkKW",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkKW",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::TkId",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":82,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkKW",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkId"
        },
        {
            "attributes":                   {"class":{},"instance":{"node":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::TkNode#node"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkNode#node"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkNode",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkNode%23node"],
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "Returns the value of attribute node",
            "dynamic":                      true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "node",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkNode",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkNode#node",
            "scope":                        "instance",
            "signature":                    "def node",
            "source":                       "def node\n  @node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkNode%23node"
        },
        {
            "attributes":                   {"class":{},"instance":{"op":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN#op"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN#initialize","YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN#op"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":99,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkOPASGN",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::TkOp",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN%23op"],
            "y_ld:files":                   [{"file_line":99,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOp"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":100,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN",
            "parameters":                   [{"parm_type":null,"parm_name":"line_no"},{"parm_type":null,"parm_name":"char_no"},{"parm_type":null,"parm_name":"op"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(line_no, char_no, op)",
            "source":                       "def initialize(line_no, char_no, op)\n  super(line_no, char_no)\n  op = TkReading2Token[op] unless op.kind_of?(Symbol)\n  @op = op\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":100,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute op",
            "dynamic":                      true,
            "files":                        [{"file_line":105,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "op",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN#op",
            "scope":                        "instance",
            "signature":                    "def op",
            "source":                       "def op\n  @op\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":105,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOPASGN%23op"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkOp#name"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":93,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkOp",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkOp",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOp%23name"],
            "y_ld:files":                   [{"file_line":93,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOp",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":94,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkOp",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkOp#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  self.class.op_name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":94,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkOp%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "{ reading => token_class }\n{ reading => [token_class, *opt] }",
            "dynamic":                      true,
            "files":                        [{"file_line":285,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkReading2Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkReading2Token",
            "signature":                    "TkReading2Token = {}",
            "source":                       "TkReading2Token = {}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":285,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkReading2Token"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd#text"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents an end statement",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkStatementEnd",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkStatementEnd%23text"],
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkStatementEnd",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "text",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd#text",
            "scope":                        "instance",
            "signature":                    "def text; '' end",
            "source":                       "def text; '' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkStatementEnd%23text"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":286,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkSymbol2Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkSymbol2Token",
            "signature":                    "TkSymbol2Token = {}",
            "source":                       "TkSymbol2Token = {}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":286,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkSymbol2Token"
        },
        {
            "attributes":                   {"class":{},"instance":{"name":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar#name"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar#initialize","YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar#name"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":108,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkUnknownChar",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar%23name"],
            "y_ld:files":                   [{"file_line":108,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar",
            "parameters":                   [{"parm_type":null,"parm_name":"line_no"},{"parm_type":null,"parm_name":"char_no"},{"parm_type":null,"parm_name":"id"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(line_no, char_no, id)",
            "source":                       "def initialize(line_no, char_no, id)\n  super(line_no, char_no)\n  @name = char_no > 255 ? '?' : char_no.chr\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":113,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":113,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkUnknownChar%23name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::TkVal#initialize"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a Ruby value",
            "dynamic":                      true,
            "files":                        [{"file_line":86,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkVal",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkVal",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkVal%23initialize"],
            "y_ld:files":                   [{"file_line":86,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkVal",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":87,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::TkVal",
            "parameters":                   [{"parm_type":null,"parm_name":"line_no"},{"parm_type":null,"parm_name":"char_no"},{"parm_type":"nil","parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkVal#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(line_no, char_no, value = nil)",
            "source":                       "def initialize(line_no, char_no, value = nil)\n  super(line_no, char_no)\n  set_text(value)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":87,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkVal%23initialize"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Represents whitespace",
            "dynamic":                      true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TkWhitespace",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATkWhitespace",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken"
        },
        {
            "attributes":                   {"class":{},"instance":{"line_no":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::Token#line_no"},"text":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::Token#text"},"lex_state":{"write":"YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state=","read":"YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state"},"char_no":{"write":null,"read":"YARD::Parser::Ruby::Legacy::RubyToken::Token#char_no"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::RubyToken::Token#line_no","YARD::Parser::Ruby::Legacy::RubyToken::Token#char_no","YARD::Parser::Ruby::Legacy::RubyToken::Token#text","YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state=","YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state","YARD::Parser::Ruby::Legacy::RubyToken::Token::NO_TEXT","YARD::Parser::Ruby::Legacy::RubyToken::Token#initialize","YARD::Parser::Ruby::Legacy::RubyToken::Token#set_text"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a token in the Ruby lexer",
            "dynamic":                      true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "Token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23line_no","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23char_no","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23text","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23lex_state%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23lex_state","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%3A%3ANO_TEXT","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23set_text"],
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "char_no",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#char_no",
            "scope":                        "instance",
            "signature":                    "def char_no",
            "source":                       "def char_no\n  @char_no\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23char_no"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new Token object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "parameters":                   [{"parm_type":null,"parm_name":"line_no"},{"parm_type":null,"parm_name":"char_no"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(line_no, char_no)",
            "source":                       "def initialize(line_no, char_no)\n  @line_no = line_no\n  @char_no = char_no\n  @text    = NO_TEXT\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex_state",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state",
            "scope":                        "instance",
            "signature":                    "def lex_state",
            "source":                       "def lex_state\n  @lex_state\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23lex_state"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "lex_state=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#lex_state=",
            "scope":                        "instance",
            "signature":                    "def lex_state=(value)",
            "source":                       "def lex_state=(value)\n  @lex_state = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23lex_state%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "line_no",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#line_no",
            "scope":                        "instance",
            "signature":                    "def line_no",
            "source":                       "def line_no\n  @line_no\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23line_no"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Chainable way to sets the text attribute",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "set_text",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#set_text",
            "scope":                        "instance",
            "signature":                    "def set_text(text)",
            "source":                       "def set_text(text)\n  @text = text\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23set_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "text",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token#text",
            "scope":                        "instance",
            "signature":                    "def text",
            "source":                       "def text\n  @text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%23text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "NO_TEXT",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken::Token",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::Token::NO_TEXT",
            "signature":                    "NO_TEXT = \"??\".freeze",
            "source":                       "NO_TEXT = \"??\".freeze",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "\"??\".freeze",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   8,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3AToken%3A%3ANO_TEXT"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":148,"file_path":"lib/yard/parser/ruby/legacy/ruby_lex.rb"}],
            "name":                         "TokenDefinitions",
            "namespace":                    "YARD::Parser::Ruby::Legacy::RubyToken",
            "path":                         "YARD::Parser::Ruby::Legacy::RubyToken::TokenDefinitions",
            "signature":                    "TokenDefinitions = [",
            "source":                       "TokenDefinitions = [\n  [:TkCLASS,      TkKW,  \"class\",  EXPR_CLASS],\n  [:TkMODULE,     TkKW,  \"module\", EXPR_BEG],\n  [:TkDEF,        TkKW,  \"def\",    EXPR_FNAME],\n  [:TkUNDEF,      TkKW,  \"undef\",  EXPR_FNAME],\n  [:TkBEGIN,      TkKW,  \"begin\",  EXPR_BEG],\n  [:TkRESCUE,     TkKW,  \"rescue\", EXPR_MID],\n  [:TkENSURE,     TkKW,  \"ensure\", EXPR_BEG],\n  [:TkEND,        TkKW,  \"end\",    EXPR_END],\n  [:TkIF,         TkKW,  \"if\",     EXPR_BEG, :TkIF_MOD],\n  [:TkUNLESS,     TkKW,  \"unless\", EXPR_BEG, :TkUNLESS_MOD],\n  [:TkTHEN,       TkKW,  \"then\",   EXPR_BEG],\n  [:TkELSIF,      TkKW,  \"elsif\",  EXPR_BEG],\n  [:TkELSE,       TkKW,  \"else\",   EXPR_BEG],\n  [:TkCASE,       TkKW,  \"case\",   EXPR_BEG],\n  [:TkWHEN,       TkKW,  \"when\",   EXPR_BEG],\n  [:TkWHILE,      TkKW,  \"while\",  EXPR_BEG, :TkWHILE_MOD],\n  [:TkUNTIL,      TkKW,  \"until\",  EXPR_BEG, :TkUNTIL_MOD],\n  [:TkFOR,        TkKW,  \"for\",    EXPR_BEG],\n  [:TkBREAK,      TkKW,  \"break\",  EXPR_END],\n  [:TkNEXT,       TkKW,  \"next\",   EXPR_END],\n  [:TkREDO,       TkKW,  \"redo\",   EXPR_END],\n  [:TkRETRY,      TkKW,  \"retry\",  EXPR_END],\n  [:TkIN,         TkKW,  \"in\",     EXPR_BEG],\n  [:TkDO,         TkKW,  \"do\",     EXPR_BEG],\n  [:TkRETURN,     TkKW,  \"return\", EXPR_MID],\n  [:TkYIELD,      TkKW,  \"yield\",  EXPR_END],\n  [:TkSUPER,      TkKW,  \"super\",  EXPR_END],\n  [:TkSELF,       TkKW,  \"self\",   EXPR_END],\n  [:TkNIL,        TkKW,  \"nil\",    EXPR_END],\n  [:TkTRUE,       TkKW,  \"true\",   EXPR_END],\n  [:TkFALSE,      TkKW,  \"false\",  EXPR_END],\n  [:TkAND,        TkKW,  \"and\",    EXPR_BEG],\n  [:TkOR,         TkKW,  \"or\",     EXPR_BEG],\n  [:TkNOT,        TkKW,  \"not\",    EXPR_BEG],\n  [:TkIF_MOD,     TkKW],\n  [:TkUNLESS_MOD, TkKW],\n  [:TkWHILE_MOD,  TkKW],\n  [:TkUNTIL_MOD,  TkKW],\n  [:TkALIAS,      TkKW,  \"alias\",    EXPR_FNAME],\n  [:TkDEFINED,    TkKW,  \"defined?\", EXPR_END],\n  [:TklBEGIN,     TkKW,  \"BEGIN\",    EXPR_END],\n  [:TklEND,       TkKW,  \"END\",      EXPR_END],\n  [:Tk__LINE__,   TkKW,  \"__LINE__\", EXPR_END],\n  [:Tk__FILE__,   TkKW,  \"__FILE__\", EXPR_END],\n\n  [:TkIDENTIFIER, TkId],\n  [:TkFID,        TkId],\n  [:TkGVAR,       TkId],\n  [:TkIVAR,       TkId],\n  [:TkCONSTANT,   TkId],\n\n  [:TkINTEGER,    TkVal],\n  [:TkFLOAT,      TkVal],\n  [:TkSYMBOL,     TkVal],\n  [:TkSTRING,     TkVal],\n  [:TkXSTRING,    TkVal],\n  [:TkREGEXP,     TkVal],\n  [:TkCOMMENT,    TkVal],\n\n  [:TkDSTRING,    TkNode],\n  [:TkDXSTRING,   TkNode],\n  [:TkDREGEXP,    TkNode],\n  [:TkNTH_REF,    TkId],\n  [:TkBACK_REF,   TkId],\n\n  [:TkUPLUS,      TkOp,   \"+@\"],\n  [:TkUMINUS,     TkOp,   \"-@\"],\n  [:TkPOW,        TkOp,   \"**\"],\n  [:TkCMP,        TkOp,   \"<=>\"],\n  [:TkEQ,         TkOp,   \"==\"],\n  [:TkEQQ,        TkOp,   \"===\"],\n  [:TkNEQ,        TkOp,   \"!=\"],\n  [:TkGEQ,        TkOp,   \">=\"],\n  [:TkLEQ,        TkOp,   \"<=\"],\n  [:TkANDOP,      TkOp,   \"&&\"],\n  [:TkOROP,       TkOp,   \"||\"],\n  [:TkMATCH,      TkOp,   \"=~\"],\n  [:TkNMATCH,     TkOp,   \"!~\"],\n  [:TkDOT2,       TkOp,   \"..\"],\n  [:TkDOT3,       TkOp,   \"...\"],\n  [:TkAREF,       TkOp,   \"[]\"],\n  [:TkASET,       TkOp,   \"[]=\"],\n  [:TkLSHFT,      TkOp,   \"<<\"],\n  [:TkRSHFT,      TkOp,   \">>\"],\n  [:TkCOLON2,     TkOp],\n  [:TkCOLON3,     TkOp],\n  [:OPASGN,       TkOp],               # +=, -=  etc. #\n  [:TkASSOC,      TkOp,   \"=>\"],\n  [:TkQUESTION,   TkOp,   \"?\"],  #?\n  [:TkCOLON,      TkOp,   \":\"],        #:\n\n#        [:TkfLPAREN],         # func( #\n#        [:TkfLBRACK],         # func[ #\n#        [:TkfLBRACE],         # func{ #\n  [:TkSTAR],            # *arg\n  [:TkAMPER],           # &arg #\n#        [:TkSYMBOL,     TkId],          # :SYMBOL\n  [:TkSYMBEG,     TkId],\n  [:TkGT,         TkOp,   \">\"],\n  [:TkLT,         TkOp,   \"<\"],\n  [:TkPLUS,       TkOp,   \"+\"],\n  [:TkMINUS,      TkOp,   \"-\"],\n  [:TkMULT,       TkOp,   \"*\"],\n  [:TkDIV,        TkOp,   \"/\"],\n  [:TkMOD,        TkOp,   \"%\"],\n  [:TkBITOR,      TkOp,   \"|\"],\n  [:TkBITXOR,     TkOp,   \"^\"],\n  [:TkBITAND,     TkOp,   \"&\"],\n  [:TkBITNOT,     TkOp,   \"~\"],\n  [:TkNOTOP,      TkOp,   \"!\"],\n\n  [:TkBACKQUOTE,  TkOp,   \"`\"],\n\n  [:TkASSIGN,     Token,  \"=\"],\n  [:TkDOT,        Token,  \".\"],\n  [:TkLPAREN,     Token,  \"(\"],  #(exp)\n  [:TkLBRACK,     Token,  \"[\"],  #[arry]\n  [:TkLBRACE,     Token,  \"{\"],  #{hash}\n  [:TkRPAREN,     Token,  \")\"],\n  [:TkRBRACK,     Token,  \"]\"],\n  [:TkRBRACE,     Token,  \"}\"],\n  [:TkCOMMA,      Token,  \",\"],\n  [:TkSEMICOLON,  Token,  \";\"],\n\n#        [:TkRD_COMMENT,     TkVal],\n  [:TkSPACE,          TkWhitespace],\n  [:TkNL,             TkWhitespace],\n  [:TkEND_OF_SCRIPT,  TkWhitespace],\n\n  [:TkBACKSLASH,  TkUnknownChar,  \"\\\\\"],\n  [:TkAT,         TkUnknownChar,  \"@\"],\n  [:TkDOLLAR,     TkUnknownChar,  \"\\$\"], #\"\n]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\n  [:TkCLASS,      TkKW,  \"class\",  EXPR_CLASS],\n  [:TkMODULE,     TkKW,  \"module\", EXPR_BEG],\n  [:TkDEF,        TkKW,  \"def\",    EXPR_FNAME],\n  [:TkUNDEF,      TkKW,  \"undef\",  EXPR_FNAME],\n  [:TkBEGIN,      TkKW,  \"begin\",  EXPR_BEG],\n  [:TkRESCUE,     TkKW,  \"rescue\", EXPR_MID],\n  [:TkENSURE,     TkKW,  \"ensure\", EXPR_BEG],\n  [:TkEND,        TkKW,  \"end\",    EXPR_END],\n  [:TkIF,         TkKW,  \"if\",     EXPR_BEG, :TkIF_MOD],\n  [:TkUNLESS,     TkKW,  \"unless\", EXPR_BEG, :TkUNLESS_MOD],\n  [:TkTHEN,       TkKW,  \"then\",   EXPR_BEG],\n  [:TkELSIF,      TkKW,  \"elsif\",  EXPR_BEG],\n  [:TkELSE,       TkKW,  \"else\",   EXPR_BEG],\n  [:TkCASE,       TkKW,  \"case\",   EXPR_BEG],\n  [:TkWHEN,       TkKW,  \"when\",   EXPR_BEG],\n  [:TkWHILE,      TkKW,  \"while\",  EXPR_BEG, :TkWHILE_MOD],\n  [:TkUNTIL,      TkKW,  \"until\",  EXPR_BEG, :TkUNTIL_MOD],\n  [:TkFOR,        TkKW,  \"for\",    EXPR_BEG],\n  [:TkBREAK,      TkKW,  \"break\",  EXPR_END],\n  [:TkNEXT,       TkKW,  \"next\",   EXPR_END],\n  [:TkREDO,       TkKW,  \"redo\",   EXPR_END],\n  [:TkRETRY,      TkKW,  \"retry\",  EXPR_END],\n  [:TkIN,         TkKW,  \"in\",     EXPR_BEG],\n  [:TkDO,         TkKW,  \"do\",     EXPR_BEG],\n  [:TkRETURN,     TkKW,  \"return\", EXPR_MID],\n  [:TkYIELD,      TkKW,  \"yield\",  EXPR_END],\n  [:TkSUPER,      TkKW,  \"super\",  EXPR_END],\n  [:TkSELF,       TkKW,  \"self\",   EXPR_END],\n  [:TkNIL,        TkKW,  \"nil\",    EXPR_END],\n  [:TkTRUE,       TkKW,  \"true\",   EXPR_END],\n  [:TkFALSE,      TkKW,  \"false\",  EXPR_END],\n  [:TkAND,        TkKW,  \"and\",    EXPR_BEG],\n  [:TkOR,         TkKW,  \"or\",     EXPR_BEG],\n  [:TkNOT,        TkKW,  \"not\",    EXPR_BEG],\n  [:TkIF_MOD,     TkKW],\n  [:TkUNLESS_MOD, TkKW],\n  [:TkWHILE_MOD,  TkKW],\n  [:TkUNTIL_MOD,  TkKW],\n  [:TkALIAS,      TkKW,  \"alias\",    EXPR_FNAME],\n  [:TkDEFINED,    TkKW,  \"defined?\", EXPR_END],\n  [:TklBEGIN,     TkKW,  \"BEGIN\",    EXPR_END],\n  [:TklEND,       TkKW,  \"END\",      EXPR_END],\n  [:Tk__LINE__,   TkKW,  \"__LINE__\", EXPR_END],\n  [:Tk__FILE__,   TkKW,  \"__FILE__\", EXPR_END],\n\n  [:TkIDENTIFIER, TkId],\n  [:TkFID,        TkId],\n  [:TkGVAR,       TkId],\n  [:TkIVAR,       TkId],\n  [:TkCONSTANT,   TkId],\n\n  [:TkINTEGER,    TkVal],\n  [:TkFLOAT,      TkVal],\n  [:TkSYMBOL,     TkVal],\n  [:TkSTRING,     TkVal],\n  [:TkXSTRING,    TkVal],\n  [:TkREGEXP,     TkVal],\n  [:TkCOMMENT,    TkVal],\n\n  [:TkDSTRING,    TkNode],\n  [:TkDXSTRING,   TkNode],\n  [:TkDREGEXP,    TkNode],\n  [:TkNTH_REF,    TkId],\n  [:TkBACK_REF,   TkId],\n\n  [:TkUPLUS,      TkOp,   \"+@\"],\n  [:TkUMINUS,     TkOp,   \"-@\"],\n  [:TkPOW,        TkOp,   \"**\"],\n  [:TkCMP,        TkOp,   \"<=>\"],\n  [:TkEQ,         TkOp,   \"==\"],\n  [:TkEQQ,        TkOp,   \"===\"],\n  [:TkNEQ,        TkOp,   \"!=\"],\n  [:TkGEQ,        TkOp,   \">=\"],\n  [:TkLEQ,        TkOp,   \"<=\"],\n  [:TkANDOP,      TkOp,   \"&&\"],\n  [:TkOROP,       TkOp,   \"||\"],\n  [:TkMATCH,      TkOp,   \"=~\"],\n  [:TkNMATCH,     TkOp,   \"!~\"],\n  [:TkDOT2,       TkOp,   \"..\"],\n  [:TkDOT3,       TkOp,   \"...\"],\n  [:TkAREF,       TkOp,   \"[]\"],\n  [:TkASET,       TkOp,   \"[]=\"],\n  [:TkLSHFT,      TkOp,   \"<<\"],\n  [:TkRSHFT,      TkOp,   \">>\"],\n  [:TkCOLON2,     TkOp],\n  [:TkCOLON3,     TkOp],\n  [:OPASGN,       TkOp],               # +=, -=  etc. #\n  [:TkASSOC,      TkOp,   \"=>\"],\n  [:TkQUESTION,   TkOp,   \"?\"],  #?\n  [:TkCOLON,      TkOp,   \":\"],        #:\n\n#        [:TkfLPAREN],         # func( #\n#        [:TkfLBRACK],         # func[ #\n#        [:TkfLBRACE],         # func{ #\n  [:TkSTAR],            # *arg\n  [:TkAMPER],           # &arg #\n#        [:TkSYMBOL,     TkId],          # :SYMBOL\n  [:TkSYMBEG,     TkId],\n  [:TkGT,         TkOp,   \">\"],\n  [:TkLT,         TkOp,   \"<\"],\n  [:TkPLUS,       TkOp,   \"+\"],\n  [:TkMINUS,      TkOp,   \"-\"],\n  [:TkMULT,       TkOp,   \"*\"],\n  [:TkDIV,        TkOp,   \"/\"],\n  [:TkMOD,        TkOp,   \"%\"],\n  [:TkBITOR,      TkOp,   \"|\"],\n  [:TkBITXOR,     TkOp,   \"^\"],\n  [:TkBITAND,     TkOp,   \"&\"],\n  [:TkBITNOT,     TkOp,   \"~\"],\n  [:TkNOTOP,      TkOp,   \"!\"],\n\n  [:TkBACKQUOTE,  TkOp,   \"`\"],\n\n  [:TkASSIGN,     Token,  \"=\"],\n  [:TkDOT,        Token,  \".\"],\n  [:TkLPAREN,     Token,  \"(\"],  #(exp)\n  [:TkLBRACK,     Token,  \"[\"],  #[arry]\n  [:TkLBRACE,     Token,  \"{\"],  #{hash}\n  [:TkRPAREN,     Token,  \")\"],\n  [:TkRBRACK,     Token,  \"]\"],\n  [:TkRBRACE,     Token,  \"}\"],\n  [:TkCOMMA,      Token,  \",\"],\n  [:TkSEMICOLON,  Token,  \";\"],\n\n#        [:TkRD_COMMENT,     TkVal],\n  [:TkSPACE,          TkWhitespace],\n  [:TkNL,             TkWhitespace],\n  [:TkEND_OF_SCRIPT,  TkWhitespace],\n\n  [:TkBACKSLASH,  TkUnknownChar,  \"\\\\\"],\n  [:TkAT,         TkUnknownChar,  \"@\"],\n  [:TkDOLLAR,     TkUnknownChar,  \"\\$\"], #\"\n]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":148,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fruby_lex.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ARubyToken%3A%3ATokenDefinitions"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::Legacy::Statement#source":"to_s"},
            "attributes":                   {"class":{},"instance":{"tokens":{"write":null,"read":"YARD::Parser::Ruby::Legacy::Statement#tokens"},"comments":{"write":null,"read":"YARD::Parser::Ruby::Legacy::Statement#comments"},"group":{"write":"YARD::Parser::Ruby::Legacy::Statement#group=","read":"YARD::Parser::Ruby::Legacy::Statement#group"},"comments_hash_flag":{"write":"YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag=","read":"YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag"},"comments_range":{"write":"YARD::Parser::Ruby::Legacy::Statement#comments_range=","read":"YARD::Parser::Ruby::Legacy::Statement#comments_range"},"block":{"write":null,"read":"YARD::Parser::Ruby::Legacy::Statement#block"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::Statement#tokens","YARD::Parser::Ruby::Legacy::Statement#comments","YARD::Parser::Ruby::Legacy::Statement#block","YARD::Parser::Ruby::Legacy::Statement#comments_range=","YARD::Parser::Ruby::Legacy::Statement#comments_range","YARD::Parser::Ruby::Legacy::Statement#group=","YARD::Parser::Ruby::Legacy::Statement#group","YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag=","YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag","YARD::Parser::Ruby::Legacy::Statement#initialize","YARD::Parser::Ruby::Legacy::Statement#first_line","YARD::Parser::Ruby::Legacy::Statement#to_s","YARD::Parser::Ruby::Legacy::Statement#source","YARD::Parser::Ruby::Legacy::Statement#inspect","YARD::Parser::Ruby::Legacy::Statement#show","YARD::Parser::Ruby::Legacy::Statement#line","YARD::Parser::Ruby::Legacy::Statement#line_range","YARD::Parser::Ruby::Legacy::Statement#clean_tokens"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "Statement",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23tokens","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23block","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_range%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_range","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23group%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23group","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_hash_flag%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_hash_flag","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23first_line","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23to_s","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23source","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23inspect","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23show","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23line","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23line_range","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23clean_tokens"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "Returns the value of attribute block",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#block",
            "scope":                        "instance",
            "signature":                    "def block",
            "source":                       "def block\n  @block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "clean_tokens",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"tokens"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#clean_tokens",
            "scope":                        "instance",
            "signature":                    "def clean_tokens(tokens)",
            "source":                       "def clean_tokens(tokens)\n  last_tk = nil\n  tokens.reject do |tk|\n    tk.is_a?(RubyToken::TkNL) ||\n    (last_tk.is_a?(RubyToken::TkSPACE) &&\n    last_tk.class == tk.class) && last_tk = tk\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23clean_tokens"
        },
        {
            "docstring":                    "Returns the value of attribute comments",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#comments",
            "scope":                        "instance",
            "signature":                    "def comments",
            "source":                       "def comments\n  @comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments"
        },
        {
            "docstring":                    "Returns the value of attribute comments_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "comments_hash_flag",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag",
            "scope":                        "instance",
            "signature":                    "def comments_hash_flag",
            "source":                       "def comments_hash_flag\n  @comments_hash_flag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_hash_flag"
        },
        {
            "docstring":                    "Sets the attribute comments_hash_flag",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "comments_hash_flag=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#comments_hash_flag=",
            "scope":                        "instance",
            "signature":                    "def comments_hash_flag=(value)",
            "source":                       "def comments_hash_flag=(value)\n  @comments_hash_flag = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_hash_flag%3D"
        },
        {
            "docstring":                    "Returns the value of attribute comments_range",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "comments_range",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#comments_range",
            "scope":                        "instance",
            "signature":                    "def comments_range",
            "source":                       "def comments_range\n  @comments_range\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_range"
        },
        {
            "docstring":                    "Sets the attribute comments_range",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "comments_range=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#comments_range=",
            "scope":                        "instance",
            "signature":                    "def comments_range=(value)",
            "source":                       "def comments_range=(value)\n  @comments_range = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23comments_range%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "first_line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#first_line",
            "scope":                        "instance",
            "signature":                    "def first_line",
            "source":                       "def first_line\n  to_s.split(/\\n/)[0]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23first_line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "group",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#group",
            "scope":                        "instance",
            "signature":                    "def group",
            "source":                       "def group\n  @group\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23group"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "group=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#group=",
            "scope":                        "instance",
            "signature":                    "def group=(value)",
            "source":                       "def group=(value)\n  @group = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23group%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":null,"parm_name":"tokens"},{"parm_type":"nil","parm_name":"block"},{"parm_type":"nil","parm_name":"comments"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tokens, block = nil, comments = nil)",
            "source":                       "def initialize(tokens, block = nil, comments = nil)\n  @tokens = tokens\n  @block  = block\n  @comments = comments\n  @comments_hash_flag = false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  l = line - 1\n  to_s(false).split(/\\n/).map do |text|\n    \"\\t#{l += 1}:  #{text}\"\n  end.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23inspect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#line",
            "scope":                        "instance",
            "signature":                    "def line",
            "source":                       "def line\n  tokens.first.line_no\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "line_range",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#line_range",
            "scope":                        "instance",
            "signature":                    "def line_range",
            "source":                       "def line_range\n  tokens.first.line_no..tokens.last.line_no\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23line_range"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "show",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#show",
            "scope":                        "instance",
            "signature":                    "def show",
            "source":                       "def show\n  \"\\t#{line}: #{first_line}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23show"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "source",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#source",
            "scope":                        "instance",
            "signature":                    "def to_s(include_block = true)",
            "source":                       "def to_s(include_block = true)\n  tokens.map do |token|\n    RubyToken::TkBlockContents === token ? (include_block ? block.to_s : '') : token.text\n  end.join\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23source"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "parameters":                   [{"parm_type":"true","parm_name":"include_block"}],
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#to_s",
            "scope":                        "instance",
            "signature":                    "def to_s(include_block = true)",
            "source":                       "def to_s(include_block = true)\n  tokens.map do |token|\n    RubyToken::TkBlockContents === token ? (include_block ? block.to_s : '') : token.text\n  end.join\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23to_s"
        },
        {
            "docstring":                    "Returns the value of attribute tokens",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/parser/ruby/legacy/statement.rb"}],
            "name":                         "tokens",
            "namespace":                    "YARD::Parser::Ruby::Legacy::Statement",
            "path":                         "YARD::Parser::Ruby::Legacy::Statement#tokens",
            "scope":                        "instance",
            "signature":                    "def tokens",
            "source":                       "def tokens\n  @tokens\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatement%23tokens"
        },
        {
            "attributes":                   {"class":{},"instance":{"shebang_line":{"write":"YARD::Parser::Ruby::Legacy::StatementList#shebang_line=","read":"YARD::Parser::Ruby::Legacy::StatementList#shebang_line"},"encoding_line":{"write":"YARD::Parser::Ruby::Legacy::StatementList#encoding_line=","read":"YARD::Parser::Ruby::Legacy::StatementList#encoding_line"}}},
            "children":                     ["YARD::Parser::Ruby::Legacy::StatementList#shebang_line=","YARD::Parser::Ruby::Legacy::StatementList#shebang_line","YARD::Parser::Ruby::Legacy::StatementList#encoding_line=","YARD::Parser::Ruby::Legacy::StatementList#encoding_line","YARD::Parser::Ruby::Legacy::StatementList::OPEN_BLOCK_TOKENS","YARD::Parser::Ruby::Legacy::StatementList#initialize","YARD::Parser::Ruby::Legacy::StatementList#parse_statements","YARD::Parser::Ruby::Legacy::StatementList#next_statement","YARD::Parser::Ruby::Legacy::StatementList#sanitize_statement_end","YARD::Parser::Ruby::Legacy::StatementList#sanitize_block","YARD::Parser::Ruby::Legacy::StatementList#process_token","YARD::Parser::Ruby::Legacy::StatementList#process_block_token","YARD::Parser::Ruby::Legacy::StatementList#process_initial_comment","YARD::Parser::Ruby::Legacy::StatementList#process_simple_block_opener","YARD::Parser::Ruby::Legacy::StatementList#process_complex_block_opener","YARD::Parser::Ruby::Legacy::StatementList#process_statement_end","YARD::Parser::Ruby::Legacy::StatementList#balances?","YARD::Parser::Ruby::Legacy::StatementList#push_token","YARD::Parser::Ruby::Legacy::StatementList#peek_no_space"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "instance_mixins":              ["YARD::Parser::Ruby::Legacy::RubyToken"],
            "name":                         "StatementList",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList",
            "source_type":                  "ruby",
            "superclass":                   "Array",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23shebang_line%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23shebang_line","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23encoding_line%3D","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23encoding_line","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%3A%3AOPEN_BLOCK_TOKENS","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23parse_statements","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23next_statement","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23sanitize_statement_end","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23sanitize_block","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_block_token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_initial_comment","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_simple_block_opener","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_complex_block_opener","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_statement_end","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23balances%3F","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23push_token","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23peek_no_space"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList",
            "y_ld:superclass":              "Array"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Handles the balancing of parentheses and blocks",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":349,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "balances?",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#balances?",
            "scope":                        "instance",
            "signature":                    "def balances?(tk)",
            "source":                       "def balances?(tk)\n  unless [TkALIAS, TkDEF].include?(@last_ns_tk.class) || @before_last_ns_tk.class == TkALIAS\n    if [TkLPAREN, TkLBRACK, TkLBRACE, TkDO, TkBEGIN].include?(tk.class)\n      @level += 1\n    elsif OPEN_BLOCK_TOKENS.include?(tk.class)\n      @level += 1 unless tk.class == TkELSIF\n    elsif [TkRPAREN, TkRBRACK, TkRBRACE, TkEND].include?(tk.class) && @level > 0\n      @level -= 1\n    end\n  end\n\n  @level == 0\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":349,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23balances%3F"
        },
        {
            "docstring":                    "Returns the value of attribute encoding_line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "encoding_line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#encoding_line",
            "scope":                        "instance",
            "signature":                    "def encoding_line",
            "source":                       "def encoding_line\n  @encoding_line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23encoding_line"
        },
        {
            "docstring":                    "Sets the attribute encoding_line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "encoding_line=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#encoding_line=",
            "scope":                        "instance",
            "signature":                    "def encoding_line=(value)",
            "source":                       "def encoding_line=(value)\n  @encoding_line = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23encoding_line%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new statement list",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(content)",
            "source":                       "def initialize(content)\n  @shebang_line = nil\n  @encoding_line = nil\n  if content.is_a? TokenList\n    @tokens = content.dup\n  elsif content.is_a? String\n    @tokens = TokenList.new(content.gsub(\"\\r\", \"\"))\n  else\n    raise ArgumentError, \"Invalid content for StatementList: #{content.inspect}:#{content.class}\"\n  end\n\n  parse_statements\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the next statement in the token stream",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "next_statement",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#next_statement",
            "scope":                        "instance",
            "signature":                    "def next_statement",
            "source":                       "def next_statement\n  @state = :first_statement\n  @statement_stack = []\n  @level = 0\n  @block_num = 0\n  @done = false\n  @current_block = nil\n  @comments_line = nil\n  @comments_hash_flag = nil\n  @statement, @block, @comments = TokenList.new, nil, nil\n  @last_tk, @last_ns_tk, @before_last_tk, @before_last_ns_tk = nil, nil, nil, nil\n  @first_line = nil\n\n  while !@done && tk = @tokens.shift\n    process_token(tk)\n\n    @before_last_tk = @last_tk\n    @last_tk = tk # Save last token\n    unless [TkSPACE, TkNL, TkEND_OF_SCRIPT].include? tk.class\n      @before_last_ns_tk = @last_ns_tk\n      @last_ns_tk = tk\n    end\n  end\n\n  # Return the code block with starting token and initial comments\n  # If there is no code in the block, return nil\n  @comments = @comments.compact if @comments\n  if @block || !@statement.empty?\n    sanitize_statement_end\n    sanitize_block\n    @statement.pop if [TkNL, TkSPACE, TkSEMICOLON].include?(@statement.last.class)\n    stmt = Statement.new(@statement, @block, @comments)\n    if @comments && @comments_line\n      stmt.comments_range = (@comments_line..(@comments_line + @comments.size - 1))\n      stmt.comments_hash_flag = @comments_hash_flag\n    end\n    stmt\n  elsif @comments\n    @statement << TkCOMMENT.new(@comments_line, 0)\n    @statement.first.set_text(\"# \" + @comments.join(\"\\n# \"))\n    Statement.new(@statement, nil, @comments)\n  else\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23next_statement"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "parse_statements",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#parse_statements",
            "scope":                        "instance",
            "signature":                    "def parse_statements",
            "source":                       "def parse_statements\n    while stmt = next_statement do self << stmt end\n  end\n\n  # Returns the next statement in the token stream\n  #\n  # @return [Statement] the next statement\n  def next_statement\n    @state = :first_statement\n    @statement_stack = []\n    @level = 0\n    @block_num = 0\n    @done = false\n    @current_block = nil\n    @comments_line = nil\n    @comments_hash_flag = nil\n    @statement, @block, @comments = TokenList.new, nil, nil\n    @last_tk, @last_ns_tk, @before_last_tk, @before_last_ns_tk = nil, nil, nil, nil\n    @first_line = nil\n\n    while !@done && tk = @tokens.shift\n      process_token(tk)\n\n      @before_last_tk = @last_tk\n      @last_tk = tk # Save last token\n      unless [TkSPACE, TkNL, TkEND_OF_SCRIPT].include? tk.class\n        @before_last_ns_tk = @last_ns_tk\n        @last_ns_tk = tk\n      end\n    end\n\n    # Return the code block with starting token and initial comments\n    # If there is no code in the block, return nil\n    @comments = @comments.compact if @comments\n    if @block || !@statement.empty?\n      sanitize_statement_end\n      sanitize_block\n      @statement.pop if [TkNL, TkSPACE, TkSEMICOLON].include?(@statement.last.class)\n      stmt = Statement.new(@statement, @block, @comments)\n      if @comments && @comments_line\n        stmt.comments_range = (@comments_line..(@comments_line + @comments.size - 1))\n        stmt.comments_hash_flag = @comments_hash_flag\n      end\n      stmt\n    elsif @comments\n      @statement << TkCOMMENT.new(@comments_line, 0)\n      @statement.first.set_text(\"# \" + @comments.join(\"\\n# \"))\n      Statement.new(@statement, nil, @comments)\n    else\n      nil\n    end\n  end\n\n  def sanitize_statement_end\n    extra = []\n    (@statement.size - 1).downto(0) do |index|\n      token = @statement[index]\n      if TkStatementEnd === token\n        while [TkNL, TkSPACE, TkSEMICOLON].include?(@statement[index - 1].class)\n          extra.unshift(@statement.delete_at(index - 1))\n          index -= 1\n        end\n        @statement.insert(index + 1, *extra)\n        return\n      end\n    end\n  end\n\n  def sanitize_block\n    return unless @block\n    extra = []\n    while [TkSPACE, TkNL, TkSEMICOLON].include?(@block.last.class)\n      next(@block.pop) if TkSEMICOLON === @block.last\n      extra.unshift(@block.pop)\n    end\n\n    @statement.each_with_index do |token, index|\n      if TkBlockContents === token\n        @statement[index, 1] = [token, *extra]\n        return\n      end\n    end\n  end\n\n  # Processes a single token\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def process_token(tk)\n    # p tk.class, tk.text, @state, @level, @current_block, \"<br/>\"\n    case @state\n    when :first_statement\n      return if process_initial_comment(tk)\n      return if @statement.empty? && [TkSPACE, TkNL, TkCOMMENT].include?(tk.class)\n      @comments_last_line = nil\n      if @statement.empty? && tk.class == TkALIAS\n        @state = :alias_statement\n        @alias_values = []\n        push_token(tk)\n        return\n      end\n      return if process_simple_block_opener(tk)\n      push_token(tk)\n      return if process_complex_block_opener(tk)\n\n      if balances?(tk)\n        process_statement_end(tk)\n      else\n        @state = :balance\n      end\n    when :alias_statement\n      push_token(tk)\n      @alias_values << tk unless [TkSPACE, TkNL, TkCOMMENT].include?(tk.class)\n      if @alias_values.size == 2\n        @state = :first_statement\n        if [NilClass, TkNL, TkEND_OF_SCRIPT, TkSEMICOLON].include?(peek_no_space.class)\n          @done = true\n        end\n      end\n    when :balance\n      @statement << tk\n      return unless balances?(tk)\n      @state = :first_statement\n      process_statement_end(tk)\n    when :block_statement\n      push_token(tk)\n      return unless balances?(tk)\n      process_statement_end(tk)\n    when :pre_block\n      @current_block = nil\n      process_block_token(tk) unless tk.class == TkSEMICOLON\n      @state = :block\n    when :block\n      process_block_token(tk)\n    when :post_block\n      if tk.class == TkSPACE\n        @statement << tk\n        return\n      end\n\n      process_statement_end(tk)\n      @state = :block\n    end\n\n    if @first_line == tk.line_no && !@statement.empty? && TkCOMMENT === tk\n      process_initial_comment(tk)\n    end\n  end\n\n  # Processes a token in a block\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def process_block_token(tk)\n    if balances?(tk)\n      @statement << tk\n      @state = :first_statement\n      process_statement_end(tk)\n    elsif @block_num > 1 || (@block.empty? && [TkSPACE, TkNL].include?(tk.class))\n      @statement << tk\n    else\n      if @block.empty?\n        @statement << TkBlockContents.new(tk.line_no, tk.char_no)\n      end\n      @block << tk\n    end\n  end\n\n  # Processes a comment token that comes before a statement\n  #\n  # @param [RubyToken::Token] tk the token to process\n  # @return [Boolean] whether or not +tk+ was processed as an initial comment\n  def process_initial_comment(tk)\n    if @statement.empty? && (@comments_last_line || 0) < tk.line_no - 2\n      @comments = nil\n    end\n\n    return unless tk.class == TkCOMMENT\n\n    case tk.text\n    when Parser::SourceParser::SHEBANG_LINE\n      if !@last_ns_tk && !@encoding_line\n        @shebang_line = tk.text\n        return\n      end\n    when Parser::SourceParser::ENCODING_LINE\n      if (@last_ns_tk.class == TkCOMMENT && @last_ns_tk.text == @shebang_line) ||\n          !@last_ns_tk\n        @encoding_line = tk.text\n        return\n      end\n    end\n\n    return if !@statement.empty? && @comments\n    return if @first_line && tk.line_no > @first_line\n\n    if @comments_last_line && @comments_last_line < tk.line_no - 1\n      if @comments && @statement.empty?\n        @tokens.unshift(tk)\n        return @done = true\n      end\n      @comments = nil\n    end\n    @comments_line = tk.line_no unless @comments\n\n    # Remove the \"#\" and up to 1 space before the text\n    # Since, of course, the convention is to have \"# text\"\n    # and not \"#text\", which I deem ugly (you heard it here first)\n    @comments ||= []\n    if tk.text =~ /\\A=begin/\n      lines = tk.text.count(\"\\n\")\n      @comments += tk.text.gsub(/\\A=begin.*\\r?\\n|\\r?\\n=end.*\\r?\\n?\\Z/, '').split(/\\r?\\n/)\n      @comments_last_line = tk.line_no + lines\n    else\n      @comments << tk.text.gsub(/^(#+)\\s{0,1}/, '')\n      @comments_hash_flag = $1 == '##' if @comments_hash_flag == nil\n      @comments_last_line = tk.line_no\n    end\n    @comments.pop if @comments.size == 1 && @comments.first =~ /^\\s*$/\n    true\n  end\n\n  # Processes a simple block-opening token;\n  # that is, a block opener such as +begin+ or +do+\n  # that isn't followed by an expression\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def process_simple_block_opener(tk)\n    return unless [TkLBRACE, TkDO, TkBEGIN, TkELSE].include?(tk.class) &&\n      # Make sure hashes are parsed as hashes, not as blocks\n      (@last_ns_tk.nil? || @last_ns_tk.lex_state != EXPR_BEG)\n\n    @level += 1\n    @state = :block\n    @block_num += 1\n    unless @block\n      @block = TokenList.new\n      tokens = [tk, TkStatementEnd.new(tk.line_no, tk.char_no)]\n      tokens = tokens.reverse if TkBEGIN === tk.class\n      @statement.push(*tokens)\n    else\n      @statement << tk\n    end\n\n    true\n  end\n\n  # Processes a complex block-opening token;\n  # that is, a block opener such as +while+ or +for+\n  # that is followed by an expression\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def process_complex_block_opener(tk)\n    return unless OPEN_BLOCK_TOKENS.include?(tk.class)\n\n    @current_block = tk.class\n    @state = :block_statement\n\n    true\n  end\n\n  # Processes a token that closes a statement\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def process_statement_end(tk)\n    # Whitespace means that we keep the same value of @new_statement as last token\n    return if tk.class == TkSPACE\n\n    return unless\n      # We might be coming after a statement-ending token...\n      ((@last_tk && [TkSEMICOLON, TkNL, TkEND_OF_SCRIPT].include?(tk.class)) ||\n       # Or we might be at the beginning of an argument list\n       (@current_block == TkDEF && tk.class == TkRPAREN))\n\n    # Continue a possible existing new statement unless we just finished an expression...\n    return unless (@last_tk && [EXPR_END, EXPR_ARG].include?(@last_tk.lex_state)) ||\n      # Or we've opened a block and are ready to move into the body\n      (@current_block && [TkNL, TkSEMICOLON].include?(tk.class) &&\n       # Handle the case where the block statement's expression is on the next line\n       #\n       # while\n       #     foo\n       # end\n       @last_ns_tk.class != @current_block &&\n       # And the case where part of the expression is on the next line\n       #\n       # while foo ||\n       #     bar\n       # end\n       @last_tk.lex_state != EXPR_BEG)\n\n    # Continue with the statement if we've hit a comma in a def\n    return if @current_block == TkDEF && peek_no_space.class == TkCOMMA\n\n\n    if [TkEND_OF_SCRIPT, TkNL, TkSEMICOLON].include?(tk.class) && @state == :block_statement &&\n        [TkRBRACE, TkEND].include?(@last_ns_tk.class) && @level == 0\n      @current_block = nil\n    end\n\n    unless @current_block\n      @done = true\n      return\n    end\n\n    @state = :pre_block\n    @level += 1\n    @block_num += 1\n    unless @block\n      @block = TokenList.new\n      @statement << TkStatementEnd.new(tk.line_no, tk.char_no)\n    end\n  end\n\n  # Handles the balancing of parentheses and blocks\n  #\n  # @param [RubyToken::Token] tk the token to process\n  # @return [Boolean] whether or not the current statement's parentheses and blocks\n  #   are balanced after +tk+\n  def balances?(tk)\n    unless [TkALIAS, TkDEF].include?(@last_ns_tk.class) || @before_last_ns_tk.class == TkALIAS\n      if [TkLPAREN, TkLBRACK, TkLBRACE, TkDO, TkBEGIN].include?(tk.class)\n        @level += 1\n      elsif OPEN_BLOCK_TOKENS.include?(tk.class)\n        @level += 1 unless tk.class == TkELSIF\n      elsif [TkRPAREN, TkRBRACK, TkRBRACE, TkEND].include?(tk.class) && @level > 0\n        @level -= 1\n      end\n    end\n\n    @level == 0\n  end\n\n  # Adds a token to the current statement,\n  # unless it's a newline, semicolon, or comment\n  #\n  # @param [RubyToken::Token] tk the token to process\n  def push_token(tk)\n    @first_line = tk.line_no if @statement.empty?\n    @statement << tk unless @level == 0 && [TkCOMMENT].include?(tk.class)\n  end\n\n  # Returns the next token in the stream that's not a space\n  #\n  # @return [RubyToken::Token] the next non-space token\n  def peek_no_space\n    return @tokens.first unless @tokens.first.class == TkSPACE\n    return @tokens[1]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23parse_statements"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the next token in the stream that's not a space",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":375,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "peek_no_space",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#peek_no_space",
            "scope":                        "instance",
            "signature":                    "def peek_no_space",
            "source":                       "def peek_no_space\n  return @tokens.first unless @tokens.first.class == TkSPACE\n  return @tokens[1]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":375,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23peek_no_space"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a token in a block",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":183,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_block_token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_block_token",
            "scope":                        "instance",
            "signature":                    "def process_block_token(tk)",
            "source":                       "def process_block_token(tk)\n  if balances?(tk)\n    @statement << tk\n    @state = :first_statement\n    process_statement_end(tk)\n  elsif @block_num > 1 || (@block.empty? && [TkSPACE, TkNL].include?(tk.class))\n    @statement << tk\n  else\n    if @block.empty?\n      @statement << TkBlockContents.new(tk.line_no, tk.char_no)\n    end\n    @block << tk\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":183,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_block_token"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a complex block-opening token;\nthat is, a block opener such as +while+ or +for+\nthat is followed by an expression",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":282,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_complex_block_opener",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_complex_block_opener",
            "scope":                        "instance",
            "signature":                    "def process_complex_block_opener(tk)",
            "source":                       "def process_complex_block_opener(tk)\n  return unless OPEN_BLOCK_TOKENS.include?(tk.class)\n\n  @current_block = tk.class\n  @state = :block_statement\n\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":282,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_complex_block_opener"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a comment token that comes before a statement",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":202,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_initial_comment",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_initial_comment",
            "scope":                        "instance",
            "signature":                    "def process_initial_comment(tk)",
            "source":                       "def process_initial_comment(tk)\n  if @statement.empty? && (@comments_last_line || 0) < tk.line_no - 2\n    @comments = nil\n  end\n\n  return unless tk.class == TkCOMMENT\n\n  case tk.text\n  when Parser::SourceParser::SHEBANG_LINE\n    if !@last_ns_tk && !@encoding_line\n      @shebang_line = tk.text\n      return\n    end\n  when Parser::SourceParser::ENCODING_LINE\n    if (@last_ns_tk.class == TkCOMMENT && @last_ns_tk.text == @shebang_line) ||\n        !@last_ns_tk\n      @encoding_line = tk.text\n      return\n    end\n  end\n\n  return if !@statement.empty? && @comments\n  return if @first_line && tk.line_no > @first_line\n\n  if @comments_last_line && @comments_last_line < tk.line_no - 1\n    if @comments && @statement.empty?\n      @tokens.unshift(tk)\n      return @done = true\n    end\n    @comments = nil\n  end\n  @comments_line = tk.line_no unless @comments\n\n  # Remove the \"#\" and up to 1 space before the text\n  # Since, of course, the convention is to have \"# text\"\n  # and not \"#text\", which I deem ugly (you heard it here first)\n  @comments ||= []\n  if tk.text =~ /\\A=begin/\n    lines = tk.text.count(\"\\n\")\n    @comments += tk.text.gsub(/\\A=begin.*\\r?\\n|\\r?\\n=end.*\\r?\\n?\\Z/, '').split(/\\r?\\n/)\n    @comments_last_line = tk.line_no + lines\n  else\n    @comments << tk.text.gsub(/^(#+)\\s{0,1}/, '')\n    @comments_hash_flag = $1 == '##' if @comments_hash_flag == nil\n    @comments_last_line = tk.line_no\n  end\n  @comments.pop if @comments.size == 1 && @comments.first =~ /^\\s*$/\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":202,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_initial_comment"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a simple block-opening token;\nthat is, a block opener such as +begin+ or +do+\nthat isn't followed by an expression",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":257,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_simple_block_opener",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_simple_block_opener",
            "scope":                        "instance",
            "signature":                    "def process_simple_block_opener(tk)",
            "source":                       "def process_simple_block_opener(tk)\n  return unless [TkLBRACE, TkDO, TkBEGIN, TkELSE].include?(tk.class) &&\n    # Make sure hashes are parsed as hashes, not as blocks\n    (@last_ns_tk.nil? || @last_ns_tk.lex_state != EXPR_BEG)\n\n  @level += 1\n  @state = :block\n  @block_num += 1\n  unless @block\n    @block = TokenList.new\n    tokens = [tk, TkStatementEnd.new(tk.line_no, tk.char_no)]\n    tokens = tokens.reverse if TkBEGIN === tk.class\n    @statement.push(*tokens)\n  else\n    @statement << tk\n  end\n\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":257,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_simple_block_opener"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a token that closes a statement",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":294,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_statement_end",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_statement_end",
            "scope":                        "instance",
            "signature":                    "def process_statement_end(tk)",
            "source":                       "def process_statement_end(tk)\n  # Whitespace means that we keep the same value of @new_statement as last token\n  return if tk.class == TkSPACE\n\n  return unless\n    # We might be coming after a statement-ending token...\n    ((@last_tk && [TkSEMICOLON, TkNL, TkEND_OF_SCRIPT].include?(tk.class)) ||\n     # Or we might be at the beginning of an argument list\n     (@current_block == TkDEF && tk.class == TkRPAREN))\n\n  # Continue a possible existing new statement unless we just finished an expression...\n  return unless (@last_tk && [EXPR_END, EXPR_ARG].include?(@last_tk.lex_state)) ||\n    # Or we've opened a block and are ready to move into the body\n    (@current_block && [TkNL, TkSEMICOLON].include?(tk.class) &&\n     # Handle the case where the block statement's expression is on the next line\n     #\n     # while\n     #     foo\n     # end\n     @last_ns_tk.class != @current_block &&\n     # And the case where part of the expression is on the next line\n     #\n     # while foo ||\n     #     bar\n     # end\n     @last_tk.lex_state != EXPR_BEG)\n\n  # Continue with the statement if we've hit a comma in a def\n  return if @current_block == TkDEF && peek_no_space.class == TkCOMMA\n\n\n  if [TkEND_OF_SCRIPT, TkNL, TkSEMICOLON].include?(tk.class) && @state == :block_statement &&\n      [TkRBRACE, TkEND].include?(@last_ns_tk.class) && @level == 0\n    @current_block = nil\n  end\n\n  unless @current_block\n    @done = true\n    return\n  end\n\n  @state = :pre_block\n  @level += 1\n  @block_num += 1\n  unless @block\n    @block = TokenList.new\n    @statement << TkStatementEnd.new(tk.line_no, tk.char_no)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":294,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_statement_end"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Processes a single token",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":119,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "process_token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#process_token",
            "scope":                        "instance",
            "signature":                    "def process_token(tk)",
            "source":                       "def process_token(tk)\n  # p tk.class, tk.text, @state, @level, @current_block, \"<br/>\"\n  case @state\n  when :first_statement\n    return if process_initial_comment(tk)\n    return if @statement.empty? && [TkSPACE, TkNL, TkCOMMENT].include?(tk.class)\n    @comments_last_line = nil\n    if @statement.empty? && tk.class == TkALIAS\n      @state = :alias_statement\n      @alias_values = []\n      push_token(tk)\n      return\n    end\n    return if process_simple_block_opener(tk)\n    push_token(tk)\n    return if process_complex_block_opener(tk)\n\n    if balances?(tk)\n      process_statement_end(tk)\n    else\n      @state = :balance\n    end\n  when :alias_statement\n    push_token(tk)\n    @alias_values << tk unless [TkSPACE, TkNL, TkCOMMENT].include?(tk.class)\n    if @alias_values.size == 2\n      @state = :first_statement\n      if [NilClass, TkNL, TkEND_OF_SCRIPT, TkSEMICOLON].include?(peek_no_space.class)\n        @done = true\n      end\n    end\n  when :balance\n    @statement << tk\n    return unless balances?(tk)\n    @state = :first_statement\n    process_statement_end(tk)\n  when :block_statement\n    push_token(tk)\n    return unless balances?(tk)\n    process_statement_end(tk)\n  when :pre_block\n    @current_block = nil\n    process_block_token(tk) unless tk.class == TkSEMICOLON\n    @state = :block\n  when :block\n    process_block_token(tk)\n  when :post_block\n    if tk.class == TkSPACE\n      @statement << tk\n      return\n    end\n\n    process_statement_end(tk)\n    @state = :block\n  end\n\n  if @first_line == tk.line_no && !@statement.empty? && TkCOMMENT === tk\n    process_initial_comment(tk)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":119,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23process_token"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a token to the current statement,\nunless it's a newline, semicolon, or comment",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":367,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "push_token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#push_token",
            "scope":                        "instance",
            "signature":                    "def push_token(tk)",
            "source":                       "def push_token(tk)\n  @first_line = tk.line_no if @statement.empty?\n  @statement << tk unless @level == 0 && [TkCOMMENT].include?(tk.class)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":367,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23push_token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":100,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "sanitize_block",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#sanitize_block",
            "scope":                        "instance",
            "signature":                    "def sanitize_block",
            "source":                       "def sanitize_block\n  return unless @block\n  extra = []\n  while [TkSPACE, TkNL, TkSEMICOLON].include?(@block.last.class)\n    next(@block.pop) if TkSEMICOLON === @block.last\n    extra.unshift(@block.pop)\n  end\n\n  @statement.each_with_index do |token, index|\n    if TkBlockContents === token\n      @statement[index, 1] = [token, *extra]\n      return\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":100,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23sanitize_block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":85,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "sanitize_statement_end",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#sanitize_statement_end",
            "scope":                        "instance",
            "signature":                    "def sanitize_statement_end",
            "source":                       "def sanitize_statement_end\n  extra = []\n  (@statement.size - 1).downto(0) do |index|\n    token = @statement[index]\n    if TkStatementEnd === token\n      while [TkNL, TkSPACE, TkSEMICOLON].include?(@statement[index - 1].class)\n        extra.unshift(@statement.delete_at(index - 1))\n        index -= 1\n      end\n      @statement.insert(index + 1, *extra)\n      return\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":85,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23sanitize_statement_end"
        },
        {
            "docstring":                    "Returns the value of attribute shebang_line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "shebang_line",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#shebang_line",
            "scope":                        "instance",
            "signature":                    "def shebang_line",
            "source":                       "def shebang_line\n  @shebang_line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23shebang_line"
        },
        {
            "docstring":                    "Sets the attribute shebang_line",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "shebang_line=",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList#shebang_line=",
            "scope":                        "instance",
            "signature":                    "def shebang_line=(value)",
            "source":                       "def shebang_line=(value)\n  @shebang_line = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%23shebang_line%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The following list of tokens will require a block to be opened\nif used at the beginning of a statement.",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/legacy/statement_list.rb"}],
            "name":                         "OPEN_BLOCK_TOKENS",
            "namespace":                    "YARD::Parser::Ruby::Legacy::StatementList",
            "path":                         "YARD::Parser::Ruby::Legacy::StatementList::OPEN_BLOCK_TOKENS",
            "signature":                    "OPEN_BLOCK_TOKENS = [TkCLASS, TkDEF, TkMODULE, TkUNTIL,",
            "source":                       "OPEN_BLOCK_TOKENS = [TkCLASS, TkDEF, TkMODULE, TkUNTIL,\nTkIF, TkELSIF, TkUNLESS, TkWHILE, TkFOR, TkCASE]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[TkCLASS, TkDEF, TkMODULE, TkUNTIL,\nTkIF, TkELSIF, TkUNLESS, TkWHILE, TkFOR, TkCASE]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Fstatement_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3AStatementList%3A%3AOPEN_BLOCK_TOKENS"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::Legacy::TokenList#<<":"push"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::Legacy::TokenList#initialize","YARD::Parser::Ruby::Legacy::TokenList#to_s","YARD::Parser::Ruby::Legacy::TokenList#push","YARD::Parser::Ruby::Legacy::TokenList#<<","YARD::Parser::Ruby::Legacy::TokenList#squeeze","YARD::Parser::Ruby::Legacy::TokenList#parse_content","YARD::Parser::Ruby::Legacy::TokenList#convert_token"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "instance_mixins":              ["YARD::Parser::Ruby::Legacy::RubyToken"],
            "name":                         "TokenList",
            "namespace":                    "YARD::Parser::Ruby::Legacy",
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList",
            "source_type":                  "ruby",
            "superclass":                   "Array",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23to_s","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23push","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23%3C%3C","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23squeeze","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23parse_content","YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23convert_token"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList",
            "y_ld:superclass":              "Array"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "<<",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#<<",
            "scope":                        "instance",
            "signature":                    "def push(*tokens)",
            "source":                       "def push(*tokens)\n  tokens.each do |tok|\n    if tok.is_a?(TokenList) || tok.is_a?(Array)\n      concat tok\n    elsif tok.is_a?(Token)\n      super tok\n    elsif tok.is_a?(String)\n      parse_content(tok)\n    else\n      raise ArgumentError, \"Expecting token, list of tokens or string of code to be tokenized. Got #{tok.class}\"\n    end\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23%3C%3C"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "convert_token",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":null,"parm_name":"lex"},{"parm_type":null,"parm_name":"tk"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#convert_token",
            "scope":                        "instance",
            "signature":                    "def convert_token(lex, tk)",
            "source":                       "def convert_token(lex, tk)\n  if TkSYMBEG === tk && next_tk = lex.token\n    sym = TkSYMBOL.new(tk.line_no, tk.char_no, nil)\n    sym.lex_state = lex.lex_state\n    sym.set_text(tk.text + next_tk.text)\n  else\n    tk\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23convert_token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":"nil","parm_name":"content"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(content = nil)",
            "source":                       "def initialize(content = nil)\n  self << content if content\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "parse_content",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#parse_content",
            "scope":                        "instance",
            "signature":                    "def parse_content(content)",
            "source":                       "def parse_content(content)\n    lex = RubyLex.new(content)\n    while tk = lex.token do\n      self << convert_token(lex, tk)\n    end\n  end\n\n  def convert_token(lex, tk)\n    if TkSYMBEG === tk && next_tk = lex.token\n      sym = TkSYMBOL.new(tk.line_no, tk.char_no, nil)\n      sym.lex_state = lex.lex_state\n      sym.set_text(tk.text + next_tk.text)\n    else\n      tk\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23parse_content"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "push",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":null,"parm_name":"*tokens"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#push",
            "scope":                        "instance",
            "signature":                    "def push(*tokens)",
            "source":                       "def push(*tokens)\n  tokens.each do |tok|\n    if tok.is_a?(TokenList) || tok.is_a?(Array)\n      concat tok\n    elsif tok.is_a?(Token)\n      super tok\n    elsif tok.is_a?(String)\n      parse_content(tok)\n    else\n      raise ArgumentError, \"Expecting token, list of tokens or string of code to be tokenized. Got #{tok.class}\"\n    end\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23push"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "squeeze",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":"TkSPACE","parm_name":"type"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#squeeze",
            "scope":                        "instance",
            "signature":                    "def squeeze(type = TkSPACE)",
            "source":                       "def squeeze(type = TkSPACE)\n  last = nil\n  TokenList.new(map {|t| x = t.is_a?(type) && last.is_a?(type) ? nil : t; last = t; x })\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23squeeze"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/legacy/token_list.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::Parser::Ruby::Legacy::TokenList",
            "parameters":                   [{"parm_type":"false","parm_name":"full_statement"},{"parm_type":"true","parm_name":"show_block"}],
            "path":                         "YARD::Parser::Ruby::Legacy::TokenList#to_s",
            "scope":                        "instance",
            "signature":                    "def to_s(full_statement = false, show_block = true)",
            "source":                       "def to_s(full_statement = false, show_block = true)\n  inject([]) do |acc, token|\n    break acc if !full_statement && TkStatementEnd === token\n    if !show_block && TkBlockContents === token\n      acc << \"\"\n    else\n      acc << token.text\n    end\n    acc\n  end.join\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Flegacy%2Ftoken_list.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALegacy%3A%3ATokenList%23to_s"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::LiteralNode#literal?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":370,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "LiteralNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::LiteralNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALiteralNode%23literal%3F"],
            "y_ld:files":                   [{"file_line":370,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALiteralNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":371,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "literal?",
            "namespace":                    "YARD::Parser::Ruby::LiteralNode",
            "path":                         "YARD::Parser::Ruby::LiteralNode#literal?",
            "scope":                        "instance",
            "signature":                    "def literal?; true end",
            "source":                       "def literal?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":371,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALiteralNode%23literal%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::LoopNode#loop?","YARD::Parser::Ruby::LoopNode#condition","YARD::Parser::Ruby::LoopNode#block"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":472,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "LoopNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::LoopNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::KeywordNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23loop%3F","YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23condition","YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23block"],
            "y_ld:files":                   [{"file_line":472,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":475,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::LoopNode",
            "path":                         "YARD::Parser::Ruby::LoopNode#block",
            "scope":                        "instance",
            "signature":                    "def block; last end",
            "source":                       "def block; last end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":475,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":474,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "condition",
            "namespace":                    "YARD::Parser::Ruby::LoopNode",
            "path":                         "YARD::Parser::Ruby::LoopNode#condition",
            "scope":                        "instance",
            "signature":                    "def condition; type == :for ? s(self[0], self[1]) : first end",
            "source":                       "def condition; type == :for ? s(self[0], self[1]) : first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":474,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23condition"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":473,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "loop?",
            "namespace":                    "YARD::Parser::Ruby::LoopNode",
            "path":                         "YARD::Parser::Ruby::LoopNode#loop?",
            "scope":                        "instance",
            "signature":                    "def loop?; true end",
            "source":                       "def loop?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":473,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ALoopNode%23loop%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::MethodCallNode#call?","YARD::Parser::Ruby::MethodCallNode#namespace","YARD::Parser::Ruby::MethodCallNode#method_name","YARD::Parser::Ruby::MethodCallNode#parameters","YARD::Parser::Ruby::MethodCallNode#block_param","YARD::Parser::Ruby::MethodCallNode#block","YARD::Parser::Ruby::MethodCallNode#index_adjust","YARD::Parser::Ruby::MethodCallNode#call_has_paren?"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":386,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "MethodCallNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::MethodCallNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23call%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23namespace","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23method_name","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23parameters","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23block_param","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23block","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23index_adjust","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23call_has_paren%3F"],
            "y_ld:files":                   [{"file_line":386,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":405,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#block",
            "scope":                        "instance",
            "signature":                    "def block",
            "source":                       "def block\n  last.type == :do_block || last.type == :brace_block ? last : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":405,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":404,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block_param",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#block_param",
            "scope":                        "instance",
            "signature":                    "def block_param; parameters.last end",
            "source":                       "def block_param; parameters.last end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":404,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23block_param"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":387,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "call?",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#call?",
            "scope":                        "instance",
            "signature":                    "def call?; true end",
            "source":                       "def call?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":387,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23call%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":415,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "call_has_paren?",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#call_has_paren?",
            "scope":                        "instance",
            "signature":                    "def call_has_paren?",
            "source":                       "def call_has_paren?\n  [:fcall, :call].include?(type)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":415,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23call_has_paren%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":411,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "index_adjust",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#index_adjust",
            "scope":                        "instance",
            "signature":                    "def index_adjust",
            "source":                       "def index_adjust\n  [:call, :command_call].include?(type) ? 2 : 0\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":411,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23index_adjust"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":390,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "method_name",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "parameters":                   [{"parm_type":"false","parm_name":"name_only"}],
            "path":                         "YARD::Parser::Ruby::MethodCallNode#method_name",
            "scope":                        "instance",
            "signature":                    "def method_name(name_only = false)",
            "source":                       "def method_name(name_only = false)\n  name = self[index_adjust]\n  name_only ? name.jump(:ident).first.to_sym : name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":390,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":388,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "namespace",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "path":                         "YARD::Parser::Ruby::MethodCallNode#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace; first if index_adjust > 0 end",
            "source":                       "def namespace; first if index_adjust > 0 end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":388,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23namespace"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":395,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "parameters",
            "namespace":                    "YARD::Parser::Ruby::MethodCallNode",
            "parameters":                   [{"parm_type":"true","parm_name":"include_block_param"}],
            "path":                         "YARD::Parser::Ruby::MethodCallNode#parameters",
            "scope":                        "instance",
            "signature":                    "def parameters(include_block_param = true)",
            "source":                       "def parameters(include_block_param = true)\n  return [] if type == :vcall\n  params = self[1 + index_adjust]\n  return [] unless params\n  params = call_has_paren? ? params.first : params\n  return [] unless params\n  include_block_param ? params : params[0...-1]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":395,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodCallNode%23parameters"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::MethodDefinitionNode#block":"last"},
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::MethodDefinitionNode#kw?","YARD::Parser::Ruby::MethodDefinitionNode#def?","YARD::Parser::Ruby::MethodDefinitionNode#namespace","YARD::Parser::Ruby::MethodDefinitionNode#method_name","YARD::Parser::Ruby::MethodDefinitionNode#parameters","YARD::Parser::Ruby::MethodDefinitionNode#block","YARD::Parser::Ruby::MethodDefinitionNode#index_adjust"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":420,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "MethodDefinitionNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23kw%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23def%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23namespace","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23method_name","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23parameters","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23block","YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23index_adjust"],
            "y_ld:files":                   [{"file_line":420,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":436,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#block",
            "scope":                        "instance",
            "signature":                    "def block",
            "source":                       "alias block last",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":436,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":422,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "def?",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#def?",
            "scope":                        "instance",
            "signature":                    "def def?; true end",
            "source":                       "def def?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":422,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23def%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":440,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "index_adjust",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#index_adjust",
            "scope":                        "instance",
            "signature":                    "def index_adjust",
            "source":                       "def index_adjust\n  type == :defs ? 2 : 0\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":440,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23index_adjust"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":421,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "kw?",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#kw?",
            "scope":                        "instance",
            "signature":                    "def kw?; true end",
            "source":                       "def kw?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":421,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23kw%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":425,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "method_name",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "parameters":                   [{"parm_type":"false","parm_name":"name_only"}],
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#method_name",
            "scope":                        "instance",
            "signature":                    "def method_name(name_only = false)",
            "source":                       "def method_name(name_only = false)\n  name = self[index_adjust]\n  name_only ? name.jump(:ident).first.to_sym : name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":425,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":423,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "namespace",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace; first if index_adjust > 0 end",
            "source":                       "def namespace; first if index_adjust > 0 end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":423,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23namespace"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":430,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "parameters",
            "namespace":                    "YARD::Parser::Ruby::MethodDefinitionNode",
            "parameters":                   [{"parm_type":"true","parm_name":"include_block_param"}],
            "path":                         "YARD::Parser::Ruby::MethodDefinitionNode#parameters",
            "scope":                        "instance",
            "signature":                    "def parameters(include_block_param = true)",
            "source":                       "def parameters(include_block_param = true)\n  params = self[1 + index_adjust]\n  params = params[0] if params.type == :paren\n  include_block_param ? params : params[0...-1]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":430,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AMethodDefinitionNode%23parameters"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::ModuleNode#module_name","YARD::Parser::Ruby::ModuleNode#block"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":467,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "ModuleNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::ModuleNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::KeywordNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode%23module_name","YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode%23block"],
            "y_ld:files":                   [{"file_line":467,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AKeywordNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":469,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block",
            "namespace":                    "YARD::Parser::Ruby::ModuleNode",
            "path":                         "YARD::Parser::Ruby::ModuleNode#block",
            "scope":                        "instance",
            "signature":                    "def block; last end",
            "source":                       "def block; last end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":469,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode%23block"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":468,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "module_name",
            "namespace":                    "YARD::Parser::Ruby::ModuleNode",
            "path":                         "YARD::Parser::Ruby::ModuleNode#module_name",
            "scope":                        "instance",
            "signature":                    "def module_name; first end",
            "source":                       "def module_name; first end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":468,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AModuleNode%23module_name"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::ParameterNode#required_params","YARD::Parser::Ruby::ParameterNode#required_end_params","YARD::Parser::Ruby::ParameterNode#optional_params","YARD::Parser::Ruby::ParameterNode#splat_param","YARD::Parser::Ruby::ParameterNode#block_param"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":378,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "ParameterNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::ParameterNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23required_params","YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23required_end_params","YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23optional_params","YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23splat_param","YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23block_param"],
            "y_ld:files":                   [{"file_line":378,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":383,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "block_param",
            "namespace":                    "YARD::Parser::Ruby::ParameterNode",
            "path":                         "YARD::Parser::Ruby::ParameterNode#block_param",
            "scope":                        "instance",
            "signature":                    "def block_param; self[4] ? self[4][0] : nil end",
            "source":                       "def block_param; self[4] ? self[4][0] : nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":383,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23block_param"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":381,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "optional_params",
            "namespace":                    "YARD::Parser::Ruby::ParameterNode",
            "path":                         "YARD::Parser::Ruby::ParameterNode#optional_params",
            "scope":                        "instance",
            "signature":                    "def optional_params; self[1] end",
            "source":                       "def optional_params; self[1] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":381,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23optional_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":380,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "required_end_params",
            "namespace":                    "YARD::Parser::Ruby::ParameterNode",
            "path":                         "YARD::Parser::Ruby::ParameterNode#required_end_params",
            "scope":                        "instance",
            "signature":                    "def required_end_params; self[3] end",
            "source":                       "def required_end_params; self[3] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":380,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23required_end_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":379,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "required_params",
            "namespace":                    "YARD::Parser::Ruby::ParameterNode",
            "path":                         "YARD::Parser::Ruby::ParameterNode#required_params",
            "scope":                        "instance",
            "signature":                    "def required_params; self[0] end",
            "source":                       "def required_params; self[0] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":379,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23required_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":382,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "splat_param",
            "namespace":                    "YARD::Parser::Ruby::ParameterNode",
            "path":                         "YARD::Parser::Ruby::ParameterNode#splat_param",
            "scope":                        "instance",
            "signature":                    "def splat_param; self[2] ? self[2][0] : nil end",
            "source":                       "def splat_param; self[2] ? self[2][0] : nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":382,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AParameterNode%23splat_param"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Parser::Ruby::ReferenceNode#ref?","YARD::Parser::Ruby::ReferenceNode#path","YARD::Parser::Ruby::ReferenceNode#namespace"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":358,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "groups":                       ["Managing node state"],
            "name":                         "ReferenceNode",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::ReferenceNode",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Ruby::AstNode",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23ref%3F","YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23path","YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23namespace"],
            "y_ld:files":                   [{"file_line":358,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ARuby%3A%3AAstNode"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":365,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "namespace",
            "namespace":                    "YARD::Parser::Ruby::ReferenceNode",
            "path":                         "YARD::Parser::Ruby::ReferenceNode#namespace",
            "scope":                        "instance",
            "signature":                    "def namespace",
            "source":                       "def namespace\n  Array.new flatten[0...-1]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":365,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23namespace"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":361,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "path",
            "namespace":                    "YARD::Parser::Ruby::ReferenceNode",
            "path":                         "YARD::Parser::Ruby::ReferenceNode#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  Array.new flatten\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":361,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":359,"file_path":"lib/yard/parser/ruby/ast_node.rb"}],
            "group":                        "Managing node state",
            "name":                         "ref?",
            "namespace":                    "YARD::Parser::Ruby::ReferenceNode",
            "path":                         "YARD::Parser::Ruby::ReferenceNode#ref?",
            "scope":                        "instance",
            "signature":                    "def ref?; true end",
            "source":                       "def ref?; true end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":359,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fast_node.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3AReferenceNode%23ref%3F"
        },
        {
            "aliases":                      {"YARD::Parser::Ruby::RipperParser#root":"ast","YARD::Parser::Ruby::RipperParser#on_bodystmt":"on_body_stmt"},
            "attributes":                   {"class":{},"instance":{"tokens":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#tokens"},"ast":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#ast"},"comments":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#comments"},"file":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#file"},"shebang_line":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#shebang_line"},"charno":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#charno"},"encoding_line":{"write":null,"read":"YARD::Parser::Ruby::RipperParser#encoding_line"}}},
            "children":                     ["YARD::Parser::Ruby::RipperParser#ast","YARD::Parser::Ruby::RipperParser#charno","YARD::Parser::Ruby::RipperParser#comments","YARD::Parser::Ruby::RipperParser#file","YARD::Parser::Ruby::RipperParser#tokens","YARD::Parser::Ruby::RipperParser#shebang_line","YARD::Parser::Ruby::RipperParser#encoding_line","YARD::Parser::Ruby::RipperParser#root","YARD::Parser::Ruby::RipperParser#initialize","YARD::Parser::Ruby::RipperParser#parse","YARD::Parser::Ruby::RipperParser#enumerator","YARD::Parser::Ruby::RipperParser#file_encoding","YARD::Parser::Ruby::RipperParser::MAPPINGS","YARD::Parser::Ruby::RipperParser::REV_MAPPINGS","YARD::Parser::Ruby::RipperParser::AST_TOKENS","YARD::Parser::Ruby::RipperParser#visit_event","YARD::Parser::Ruby::RipperParser#visit_event_arr","YARD::Parser::Ruby::RipperParser#visit_ns_token","YARD::Parser::Ruby::RipperParser#add_token","YARD::Parser::Ruby::RipperParser#on_program","YARD::Parser::Ruby::RipperParser#on_body_stmt","YARD::Parser::Ruby::RipperParser#on_bodystmt","YARD::Parser::Ruby::RipperParser#on_assoc_new","YARD::Parser::Ruby::RipperParser#on_hash","YARD::Parser::Ruby::RipperParser#on_bare_assoc_hash","YARD::Parser::Ruby::RipperParser#on_assoclist_from_args","YARD::Parser::Ruby::RipperParser#on_unary","YARD::Parser::Ruby::RipperParser#on_aref","YARD::Parser::Ruby::RipperParser#on_aref_field","YARD::Parser::Ruby::RipperParser#on_array","YARD::Parser::Ruby::RipperParser#on_lbracket","YARD::Parser::Ruby::RipperParser#on_rbracket","YARD::Parser::Ruby::RipperParser#on_top_const_ref","YARD::Parser::Ruby::RipperParser#on_const_path_ref","YARD::Parser::Ruby::RipperParser#on_qwords_new","YARD::Parser::Ruby::RipperParser#on_qwords_add","YARD::Parser::Ruby::RipperParser#on_string_literal","YARD::Parser::Ruby::RipperParser#on_lambda","YARD::Parser::Ruby::RipperParser#on_string_content","YARD::Parser::Ruby::RipperParser#on_rescue","YARD::Parser::Ruby::RipperParser#on_void_stmt","YARD::Parser::Ruby::RipperParser#on_params","YARD::Parser::Ruby::RipperParser#on_label","YARD::Parser::Ruby::RipperParser#on_comment","YARD::Parser::Ruby::RipperParser#on_embdoc_beg","YARD::Parser::Ruby::RipperParser#on_embdoc","YARD::Parser::Ruby::RipperParser#on_embdoc_end","YARD::Parser::Ruby::RipperParser#on_parse_error","YARD::Parser::Ruby::RipperParser#insert_comments","YARD::Parser::Ruby::RipperParser#add_comment","YARD::Parser::Ruby::RipperParser#freeze_tree"],
            "current_file_has_comments":    true,
            "docstring":                    "Internal parser class",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "RipperParser",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::RipperParser",
            "source_type":                  "ruby",
            "superclass":                   "Ripper",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23ast","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23charno","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23comments","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23file","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23tokens","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23shebang_line","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23encoding_line","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23root","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23parse","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23enumerator","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23file_encoding","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AMAPPINGS","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AREV_MAPPINGS","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AAST_TOKENS","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_event","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_event_arr","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_ns_token","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23add_token","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_program","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_body_stmt","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_bodystmt","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_assoc_new","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_hash","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_bare_assoc_hash","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_assoclist_from_args","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_unary","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_aref","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_aref_field","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_array","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_lbracket","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_rbracket","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_top_const_ref","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_const_path_ref","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_qwords_new","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_qwords_add","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_string_literal","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_lambda","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_string_content","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_rescue","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_void_stmt","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_params","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_label","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_comment","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc_beg","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc_end","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_parse_error","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23insert_comments","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23add_comment","YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23freeze_tree"],
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser",
            "y_ld:superclass":              "Ripper"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":588,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "add_comment",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"line"},{"parm_type":"nil","parm_name":"node"},{"parm_type":"nil","parm_name":"before_node"},{"parm_type":"false","parm_name":"into"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#add_comment",
            "scope":                        "instance",
            "signature":                    "def add_comment(line, node = nil, before_node = nil, into = false)",
            "source":                       "def add_comment(line, node = nil, before_node = nil, into = false)\n  comment = @comments[line]\n  source_range = @comments_range[line]\n  line_range = ((line - comment.count(\"\\n\"))..line)\n  if node.nil?\n    node = CommentNode.new(:comment, [comment], :line => line_range, :char => source_range)\n    if into\n      before_node.push(node)\n      before_node.unfreeze\n      node.parent = before_node\n    elsif before_node\n      parent_node = before_node.parent\n      idx = parent_node.index(before_node)\n      parent_node.insert(idx, node)\n      parent_node.unfreeze\n      node.parent = parent_node\n    end\n  end\n  node.docstring = comment\n  node.docstring_hash_flag = @comments_flags[line]\n  node.docstring_range = line_range\n  @comments.delete(line)\n  @comments_range.delete(line)\n  @comments_flags.delete(line)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":588,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23add_comment"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":250,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "add_token",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"token"},{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#add_token",
            "scope":                        "instance",
            "signature":                    "def add_token(token, data)",
            "source":                       "def add_token(token, data)\n  if @tokens.last && @tokens.last[0] == :symbeg\n    @tokens[-1] = [:symbol, \":\" + data]\n  elsif @heredoc_state == :started\n    @heredoc_tokens << [token, data]\n\n    # fix ripper encoding of heredoc bug\n    # (see http://bugs.ruby-lang.org/issues/6200)\n    data.force_encoding(file_encoding) if file_encoding\n\n    @heredoc_state = :ended if token == :heredoc_end\n  elsif (token == :nl || token == :comment) && @heredoc_state == :ended\n    @heredoc_tokens.unshift([token, data])\n    @tokens += @heredoc_tokens\n    @heredoc_tokens = nil\n    @heredoc_state = nil\n  else\n    @tokens << [token, data]\n    if token == :heredoc_beg\n      @heredoc_state = :started\n      @heredoc_tokens = []\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":250,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23add_token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "ast",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#ast",
            "scope":                        "instance",
            "signature":                    "def ast",
            "source":                       "def ast\n  @ast\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23ast"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "charno",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#charno",
            "scope":                        "instance",
            "signature":                    "def charno",
            "source":                       "def charno\n  @charno\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23charno"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "comments",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#comments",
            "scope":                        "instance",
            "signature":                    "def comments",
            "source":                       "def comments\n  @comments\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "encoding_line",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#encoding_line",
            "scope":                        "instance",
            "signature":                    "def encoding_line",
            "source":                       "def encoding_line\n  @encoding_line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23encoding_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "enumerator",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#enumerator",
            "scope":                        "instance",
            "signature":                    "def enumerator",
            "source":                       "def enumerator\n  ast.children\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23enumerator"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23file"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "file_encoding",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#file_encoding",
            "scope":                        "instance",
            "signature":                    "def file_encoding",
            "source":                       "def file_encoding\n  return nil unless defined?(::Encoding)\n  return @file_encoding if @file_encoding\n  return Encoding.default_internal unless @encoding_line\n  if match = @encoding_line.match(SourceParser::ENCODING_LINE)\n    @file_encoding = match.captures.last\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23file_encoding"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":614,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "freeze_tree",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":"nil","parm_name":"node"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#freeze_tree",
            "scope":                        "instance",
            "signature":                    "def freeze_tree(node = nil)",
            "source":                       "def freeze_tree(node = nil)\n  node ||= root\n  node.children.each do |child|\n    child.parent = node\n    freeze_tree(child)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":614,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23freeze_tree"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":null,"parm_name":"filename"},{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, filename, *args)",
            "source":                       "def initialize(source, filename, *args)\n  super\n  @last_ns_token = nil\n  @file = filename\n  @source = source\n  @tokens = []\n  @comments = {}\n  @comments_range = {}\n  @comments_flags = {}\n  @heredoc_tokens = nil\n  @heredoc_state = nil\n  @map = {}\n  @ns_charno = 0\n  @list = []\n  @charno = 0\n  @shebang_line = nil\n  @encoding_line = nil\n  @file_encoding = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":545,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "insert_comments",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#insert_comments",
            "scope":                        "instance",
            "signature":                    "def insert_comments",
            "source":                       "def insert_comments\n  root.traverse do |node|\n    next if node.type == :list || node.parent.type != :list\n    (node.line - 2).upto(node.line) do |line|\n      comment = @comments[line]\n      if comment && !comment.empty?\n        add_comment(line, node)\n        break\n      end\n    end\n\n    @comments.keys.each do |line|\n      if node.line > line\n        add_comment(line, nil, node)\n      end\n    end\n  end\n\n  # insert any lone unadded comments before node\n  root.traverse do |node|\n    next if node.type == :list || node.parent.type != :list\n    @comments.keys.each do |line|\n      if node.line_range.include?(line)\n        pick = nil\n        node.traverse do |subnode|\n          next unless subnode.type == :list\n          pick ||= subnode\n          next unless subnode.line_range.include?(line)\n          pick = subnode\n        end\n        add_comment(line, nil, pick, true) if pick\n      end\n    end\n  end if @comments.size > 0\n\n  # insert all remaining comments\n  @comments.each do |line, comment|\n    add_comment(line, nil, root, true)\n  end\n\n  @comments = {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":545,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23insert_comments"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":338,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_aref",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_aref",
            "scope":                        "instance",
            "signature":                    "def on_aref(*args)",
            "source":                       "def on_aref(*args)\n  @map[:lbracket].pop\n  ll, lc = *@map[:aref].pop\n  sr = args.first.source_range.first..lc\n  lr = args.first.line_range.first..ll\n  AstNode.new(:aref, args, :char => sr, :line => lr)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":338,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_aref"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":346,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_aref_field",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_aref_field",
            "scope":                        "instance",
            "signature":                    "def on_aref_field(*args)",
            "source":                       "def on_aref_field(*args)\n  @map[:lbracket].pop\n  AstNode.new(:aref_field, args,\n              :listline => lineno..lineno, :listchar => charno...charno)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":346,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_aref_field"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":352,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_array",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_array",
            "scope":                        "instance",
            "signature":                    "def on_array(other)",
            "source":                       "def on_array(other)\n  node = AstNode.node_class_for(:array).new(:array, [other])\n  map = @map[MAPPINGS[node.type]]\n  if map && !map.empty?\n    lstart, sstart = *map.pop\n    node.source_range = Range.new(sstart, @ns_charno - 1)\n    node.line_range = Range.new(lstart, lineno)\n  else\n    sstart = other.source_range.begin\n    lstart = other.line_range.begin\n    node.source_range = Range.new(sstart, @ns_charno - 1)\n    node.line_range = Range.new(lstart, lineno)\n    node.source_range = other.source_range\n    node.line_range = other.line_range\n  end\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":352,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_array"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":313,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_assoc_new",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_assoc_new",
            "scope":                        "instance",
            "signature":                    "def on_assoc_new(*args)",
            "source":                       "def on_assoc_new(*args)\n  AstNode.new(:assoc, args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":313,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_assoc_new"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":325,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_assoclist_from_args",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_assoclist_from_args",
            "scope":                        "instance",
            "signature":                    "def on_assoclist_from_args(*args)",
            "source":                       "def on_assoclist_from_args(*args)\n  args.first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":325,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_assoclist_from_args"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":321,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_bare_assoc_hash",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_bare_assoc_hash",
            "scope":                        "instance",
            "signature":                    "def on_bare_assoc_hash(*args)",
            "source":                       "def on_bare_assoc_hash(*args)\n  AstNode.new(:list, args.first)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":321,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_bare_assoc_hash"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":308,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_body_stmt",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_body_stmt",
            "scope":                        "instance",
            "signature":                    "def on_body_stmt(*args)",
            "source":                       "def on_body_stmt(*args)\n  args.compact.size == 1 ? args.first : AstNode.new(:list, args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":308,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_body_stmt"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":311,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_bodystmt",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#on_bodystmt",
            "scope":                        "instance",
            "signature":                    "def on_body_stmt(*args)",
            "source":                       "def on_body_stmt(*args)\n  args.compact.size == 1 ? args.first : AstNode.new(:list, args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":311,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_bodystmt"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":485,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_comment",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"comment"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_comment",
            "scope":                        "instance",
            "signature":                    "def on_comment(comment)",
            "source":                       "def on_comment(comment)\n  not_comment = false\n  if @last_ns_token.nil? || @last_ns_token.size == 0\n    if comment =~ SourceParser::SHEBANG_LINE && !@encoding_line\n      @shebang_line = comment\n      not_comment = true\n    elsif comment =~ SourceParser::ENCODING_LINE\n      @encoding_line = comment\n      not_comment = true\n    end\n  end\n\n  ch = charno\n  visit_ns_token(:comment, comment)\n  if not_comment\n    @last_ns_token = nil\n    return\n  end\n\n  source_range = ch..(charno-1)\n  comment = comment.gsub(/^(\\#+)\\s{0,1}/, '').chomp\n  append_comment = @comments[lineno - 1]\n\n  hash_flag = $1 == '##' ? true : false\n\n  if append_comment && @comments_last_column == column\n    @comments.delete(lineno - 1)\n    @comments_flags[lineno] = @comments_flags[lineno - 1]\n    @comments_flags.delete(lineno - 1)\n    range = @comments_range.delete(lineno - 1)\n    source_range = range.first..source_range.last\n    comment = append_comment + \"\\n\" + comment\n  end\n\n  @comments[lineno] = comment\n  @comments_range[lineno] = source_range\n  @comments_flags[lineno] = hash_flag if !append_comment\n  @comments_last_column = column\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":485,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_comment"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":392,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_const_path_ref",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_const_path_ref",
            "scope":                        "instance",
            "signature":                    "def on_const_path_ref(*args)",
            "source":                       "def on_const_path_ref(*args)\n  ReferenceNode.new(:const_path_ref, args, :listline => lineno..lineno, :listchar => charno..charno)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":392,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_const_path_ref"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":530,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_embdoc",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_embdoc",
            "scope":                        "instance",
            "signature":                    "def on_embdoc(text)",
            "source":                       "def on_embdoc(text)\n  visit_ns_token(:embdoc, text)\n  @embdoc << text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":530,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":525,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_embdoc_beg",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_embdoc_beg",
            "scope":                        "instance",
            "signature":                    "def on_embdoc_beg(text)",
            "source":                       "def on_embdoc_beg(text)\n  visit_ns_token(:embdoc_beg, text)\n  @embdoc = \"\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":525,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc_beg"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":535,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_embdoc_end",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_embdoc_end",
            "scope":                        "instance",
            "signature":                    "def on_embdoc_end(text)",
            "source":                       "def on_embdoc_end(text)\n  visit_ns_token(:embdoc_end, text)\n  @comments[lineno] = @embdoc\n  @embdoc = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":535,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_embdoc_end"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":317,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_hash",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_hash",
            "scope":                        "instance",
            "signature":                    "def on_hash(*args)",
            "source":                       "def on_hash(*args)\n  visit_event AstNode.new(:hash, args.first || [])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":317,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_hash"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":477,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_label",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_label",
            "scope":                        "instance",
            "signature":                    "def on_label(data)",
            "source":                       "def on_label(data)\n  add_token(:label, data)\n  ch = charno\n  @charno += data.length\n  @ns_charno = charno\n  AstNode.new(:label, [data[0...-1]], :line => lineno..lineno, :char => ch..charno-1, :token => true)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":477,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_label"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":440,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_lambda",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_lambda",
            "scope":                        "instance",
            "signature":                    "def on_lambda(*args)",
            "source":                       "def on_lambda(*args)\n  visit_event_arr AstNode.new(:lambda, args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":440,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_lambda"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":370,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_lbracket",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tok"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_lbracket",
            "scope":                        "instance",
            "signature":                    "def on_lbracket(tok)",
            "source":                       "def on_lbracket(tok)\n  (@map[:lbracket] ||= []) << [lineno, charno]\n  visit_ns_token(:lbracket, tok, false)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":370,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_lbracket"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":457,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_params",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_params",
            "scope":                        "instance",
            "signature":                    "def on_params(*args)",
            "source":                       "def on_params(*args)\n  args.map! do |arg|\n    if arg.class == Array\n      if arg.first.class == Array\n        arg.map! do |sub_arg|\n          if sub_arg.class == Array\n            AstNode.new(:default_arg, sub_arg, :listline => lineno..lineno, :listchar => charno..charno)\n          else\n            sub_arg\n          end\n        end\n      end\n      AstNode.new(:list, arg, :listline => lineno..lineno, :listchar => charno..charno)\n    else\n      arg\n    end\n  end\n  ParameterNode.new(:params, args, :listline => lineno..lineno, :listchar => charno..charno)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":457,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_params"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":541,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_parse_error",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"msg"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_parse_error",
            "scope":                        "instance",
            "signature":                    "def on_parse_error(msg)",
            "source":                       "def on_parse_error(msg)\n  raise ParserSyntaxError, \"syntax error in `#{file}`:(#{lineno},#{column}): #{msg}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":541,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_parse_error"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":304,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_program",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_program",
            "scope":                        "instance",
            "signature":                    "def on_program(*args)",
            "source":                       "def on_program(*args)\n  args.first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":304,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_program"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":419,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_qwords_add",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"list"},{"parm_type":null,"parm_name":"item"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_qwords_add",
            "scope":                        "instance",
            "signature":                    "def on_qwords_add(list, item)",
            "source":                       "def on_qwords_add(list, item)\n  last = @source[@ns_charno,1] == \"\\n\" ? @ns_charno - 1 : @ns_charno\n  list.source_range = (list.source_range.first..last)\n  list.line_range = (list.line_range.first..lineno)\n  list.push(item)\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":419,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_qwords_add"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":409,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_qwords_new",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_qwords_new",
            "scope":                        "instance",
            "signature":                    "def on_qwords_new(*args)",
            "source":                       "def on_qwords_new(*args)\n  node = LiteralNode.new(:qwords_literal, args)\n  if @map[:qwords_beg]\n    lstart, sstart = *@map[:qwords_beg].pop\n    node.source_range = Range.new(sstart, @ns_charno-1)\n    node.line_range = Range.new(lstart, lineno)\n  end\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":409,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_qwords_new"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":375,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_rbracket",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"tok"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_rbracket",
            "scope":                        "instance",
            "signature":                    "def on_rbracket(tok)",
            "source":                       "def on_rbracket(tok)\n  (@map[:aref] ||= []) << [lineno, charno]\n  visit_ns_token(:rbracket, tok, false)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":375,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_rbracket"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":448,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_rescue",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"exc"},{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_rescue",
            "scope":                        "instance",
            "signature":                    "def on_rescue(exc, *args)",
            "source":                       "def on_rescue(exc, *args)\n  exc = AstNode.new(:list, exc) if exc\n  visit_event AstNode.new(:rescue, [exc, *args])\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":448,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_rescue"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":444,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_string_content",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_string_content",
            "scope":                        "instance",
            "signature":                    "def on_string_content(*args)",
            "source":                       "def on_string_content(*args)\n  AstNode.new(:string_content, args, :listline => lineno..lineno, :listchar => charno..charno)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":444,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_string_content"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":427,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_string_literal",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_string_literal",
            "scope":                        "instance",
            "signature":                    "def on_string_literal(*args)",
            "source":                       "def on_string_literal(*args)\n  node = visit_event_arr(LiteralNode.new(:string_literal, args))\n  if args.size == 1\n    r = args[0].source_range\n    if node.source_range != Range.new(r.first - 1, r.last + 1)\n      klass = AstNode.node_class_for(node[0].type)\n      r = Range.new(node.source_range.first + 1, node.source_range.last - 1)\n      node[0] = klass.new(node[0].type, [@source[r]], :line => node.line_range, :char => r)\n    end\n  end\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":427,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_string_literal"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":380,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_top_const_ref",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_top_const_ref",
            "scope":                        "instance",
            "signature":                    "def on_top_const_ref(*args)",
            "source":                       "def on_top_const_ref(*args)\n  type = :top_const_ref\n  node = AstNode.node_class_for(type).new(type, args)\n  mapping = @map[MAPPINGS[type]]\n  extra_op = mapping.last[1] + 2 == charno ? mapping.pop : nil\n  lstart, sstart = *mapping.pop\n  node.source_range = Range.new(sstart, args.last.source_range.last)\n  node.line_range = Range.new(lstart, args.last.line_range.last)\n  mapping.push(extra_op) if extra_op\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":380,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_top_const_ref"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":329,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_unary",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"op"},{"parm_type":null,"parm_name":"val"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#on_unary",
            "scope":                        "instance",
            "signature":                    "def on_unary(op, val)",
            "source":                       "def on_unary(op, val)\n  map = @map[op.to_s[0,1]]\n  lstart, sstart = *(map ? map.pop : [lineno, @ns_charno - 1])\n  node = AstNode.node_class_for(:unary).new(:unary, [op, val])\n  node.source_range = Range.new(sstart, @ns_charno - 1)\n  node.line_range = Range.new(lstart, lineno)\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":329,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_unary"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":453,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "on_void_stmt",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#on_void_stmt",
            "scope":                        "instance",
            "signature":                    "def on_void_stmt",
            "source":                       "def on_void_stmt\n  AstNode.new(:void_stmt, [], :line => lineno..lineno, :char => charno...charno)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":453,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23on_void_stmt"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse",
            "source":                       "def parse\n  @ast = super\n  @ast.full_source = @source\n  @ast.file = @file\n  freeze_tree\n  insert_comments\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "root",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#root",
            "scope":                        "instance",
            "signature":                    "def ast",
            "source":                       "def ast\n  @ast\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23root"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "shebang_line",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#shebang_line",
            "scope":                        "instance",
            "signature":                    "def shebang_line",
            "source":                       "def shebang_line\n  @shebang_line\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23shebang_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "tokens",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser#tokens",
            "scope":                        "instance",
            "signature":                    "def tokens",
            "source":                       "def tokens\n  @tokens\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23tokens"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":223,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "visit_event",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#visit_event",
            "scope":                        "instance",
            "signature":                    "def visit_event(node)",
            "source":                       "def visit_event(node)\n  map = @map[MAPPINGS[node.type]]\n  lstart, sstart = *(map ? map.pop : [lineno, @ns_charno - 1])\n  node.source_range = Range.new(sstart, @ns_charno - 1)\n  node.line_range = Range.new(lstart, lineno)\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":223,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_event"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":231,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "visit_event_arr",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"node"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#visit_event_arr",
            "scope":                        "instance",
            "signature":                    "def visit_event_arr(node)",
            "source":                       "def visit_event_arr(node)\n  mapping = MAPPINGS[node.type].find {|k| @map[k] && !@map[k].empty? }\n  lstart, sstart = *@map[mapping].pop\n  node.source_range = Range.new(sstart, @ns_charno - 1)\n  node.line_range = Range.new(lstart, lineno)\n  node\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":231,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_event_arr"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":239,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "visit_ns_token",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "parameters":                   [{"parm_type":null,"parm_name":"token"},{"parm_type":null,"parm_name":"data"},{"parm_type":"false","parm_name":"ast_token"}],
            "path":                         "YARD::Parser::Ruby::RipperParser#visit_ns_token",
            "scope":                        "instance",
            "signature":                    "def visit_ns_token(token, data, ast_token = false)",
            "source":                       "def visit_ns_token(token, data, ast_token = false)\n  add_token(token, data)\n  ch = charno\n  @last_ns_token = [token, data]\n  @charno += data.length\n  @ns_charno = charno\n  if ast_token\n    AstNode.new(token, [data], :line => lineno..lineno, :char => ch..charno-1, :token => true)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":239,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%23visit_ns_token"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":125,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "AST_TOKENS",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser::AST_TOKENS",
            "signature":                    "AST_TOKENS = [:CHAR, :backref, :const, :cvar, :gvar, :heredoc_end, :ident,",
            "source":                       "AST_TOKENS = [:CHAR, :backref, :const, :cvar, :gvar, :heredoc_end, :ident,\n:int, :float, :ivar, :label, :period, :regexp_end, :tstring_content, :backtick]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[:CHAR, :backref, :const, :cvar, :gvar, :heredoc_end, :ident,\n:int, :float, :ivar, :label, :period, :regexp_end, :tstring_content, :backtick]",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":125,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AAST_TOKENS"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "MAPPINGS",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser::MAPPINGS",
            "signature":                    "MAPPINGS = {",
            "source":                       "MAPPINGS = {\n  :BEGIN => \"BEGIN\",\n  :END => \"END\",\n  :alias => \"alias\",\n  :array => :lbracket,\n  :arg_paren => :lparen,\n  :begin => \"begin\",\n  :blockarg => \"&\",\n  :brace_block => :lbrace,\n  :break => \"break\",\n  :case => \"case\",\n  :class => \"class\",\n  :def => \"def\",\n  :defined => \"defined?\",\n  :defs => \"def\",\n  :do_block => \"do\",\n  :else => \"else\",\n  :elsif => \"elsif\",\n  :ensure => \"ensure\",\n  :for => \"for\",\n  :hash => :lbrace,\n  :if => \"if\",\n  :lambda => [:tlambda, \"lambda\"],\n  :module => \"module\",\n  :next => \"next\",\n  :paren => :lparen,\n  :qwords_literal => :qwords_beg,\n  :redo => \"redo\",\n  :regexp_literal => :regexp_beg,\n  :rescue => \"rescue\",\n  :rest_param => \"*\",\n  :retry => \"retry\",\n  :return => \"return\",\n  :return0 => \"return\",\n  :sclass => \"class\",\n  :string_embexpr => :embexpr_beg,\n  :string_literal => [:tstring_beg, :heredoc_beg],\n  :super => \"super\",\n  :symbol => :symbeg,\n  :top_const_ref => \"::\",\n  :undef => \"undef\",\n  :unless => \"unless\",\n  :until => \"until\",\n  :when => \"when\",\n  :while => \"while\",\n  :xstring_literal => :backtick,\n  :yield => \"yield\",\n  :yield0 => \"yield\",\n  :zsuper => \"super\"\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  :BEGIN => \"BEGIN\",\n  :END => \"END\",\n  :alias => \"alias\",\n  :array => :lbracket,\n  :arg_paren => :lparen,\n  :begin => \"begin\",\n  :blockarg => \"&\",\n  :brace_block => :lbrace,\n  :break => \"break\",\n  :case => \"case\",\n  :class => \"class\",\n  :def => \"def\",\n  :defined => \"defined?\",\n  :defs => \"def\",\n  :do_block => \"do\",\n  :else => \"else\",\n  :elsif => \"elsif\",\n  :ensure => \"ensure\",\n  :for => \"for\",\n  :hash => :lbrace,\n  :if => \"if\",\n  :lambda => [:tlambda, \"lambda\"],\n  :module => \"module\",\n  :next => \"next\",\n  :paren => :lparen,\n  :qwords_literal => :qwords_beg,\n  :redo => \"redo\",\n  :regexp_literal => :regexp_beg,\n  :rescue => \"rescue\",\n  :rest_param => \"*\",\n  :retry => \"retry\",\n  :return => \"return\",\n  :return0 => \"return\",\n  :sclass => \"class\",\n  :string_embexpr => :embexpr_beg,\n  :string_literal => [:tstring_beg, :heredoc_beg],\n  :super => \"super\",\n  :symbol => :symbeg,\n  :top_const_ref => \"::\",\n  :undef => \"undef\",\n  :unless => \"unless\",\n  :until => \"until\",\n  :when => \"when\",\n  :while => \"while\",\n  :xstring_literal => :backtick,\n  :yield => \"yield\",\n  :yield0 => \"yield\",\n  :zsuper => \"super\"\n}",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AMAPPINGS"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":123,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "REV_MAPPINGS",
            "namespace":                    "YARD::Parser::Ruby::RipperParser",
            "path":                         "YARD::Parser::Ruby::RipperParser::REV_MAPPINGS",
            "signature":                    "REV_MAPPINGS = {}",
            "source":                       "REV_MAPPINGS = {}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{}",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":123,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARipperParser%3A%3AREV_MAPPINGS"
        },
        {
            "attributes":                   {"class":{},"instance":{"shebang_line":{"write":null,"read":"YARD::Parser::Ruby::RubyParser#shebang_line"},"encoding_line":{"write":null,"read":"YARD::Parser::Ruby::RubyParser#encoding_line"},"enumerator":{"write":null,"read":"YARD::Parser::Ruby::RubyParser#enumerator"}}},
            "children":                     ["YARD::Parser::Ruby::RubyParser#encoding_line","YARD::Parser::Ruby::RubyParser#shebang_line","YARD::Parser::Ruby::RubyParser#enumerator","YARD::Parser::Ruby::RubyParser#initialize","YARD::Parser::Ruby::RubyParser#parse","YARD::Parser::Ruby::RubyParser#tokenize"],
            "current_file_has_comments":    true,
            "docstring":                    "Ruby 1.9 parser",
            "dynamic":                      true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "RubyParser",
            "namespace":                    "YARD::Parser::Ruby",
            "path":                         "YARD::Parser::Ruby::RubyParser",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Parser::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23encoding_line","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23shebang_line","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23enumerator","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23initialize","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23parse","YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23tokenize"],
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser",
            "y_ld:superclass":              "YARD%3A%3AParser%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Ruby 1.9 parser",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":19,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "encoding_line",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "path":                         "YARD::Parser::Ruby::RubyParser#encoding_line",
            "scope":                        "instance",
            "signature":                    "def encoding_line",
            "source":                       "class RubyParser < Parser::Base\n  def initialize(source, filename)\n    @parser = RipperParser.new(source, filename)\n  end\n\n  def parse; @parser.parse end\n  def tokenize; @parser.tokens end\n  def enumerator; @parser.enumerator end\n  def shebang_line; @parser.shebang_line end\n  def encoding_line; @parser.encoding_line end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":19,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23encoding_line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Ruby 1.9 parser",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":17,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "enumerator",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "path":                         "YARD::Parser::Ruby::RubyParser#enumerator",
            "scope":                        "instance",
            "signature":                    "def enumerator",
            "source":                       "class RubyParser < Parser::Base\n  def initialize(source, filename)\n    @parser = RipperParser.new(source, filename)\n  end\n\n  def parse; @parser.parse end\n  def tokenize; @parser.tokens end\n  def enumerator; @parser.enumerator end\n  def shebang_line; @parser.shebang_line end\n  def encoding_line; @parser.encoding_line end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":17,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23enumerator"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Parser::Ruby::RubyParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(source, filename)",
            "source":                       "def initialize(source, filename)\n  @parser = RipperParser.new(source, filename)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "path":                         "YARD::Parser::Ruby::RubyParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse; @parser.parse end",
            "source":                       "def parse; @parser.parse end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Ruby 1.9 parser",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"},{"file_line":18,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "shebang_line",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "path":                         "YARD::Parser::Ruby::RubyParser#shebang_line",
            "scope":                        "instance",
            "signature":                    "def shebang_line",
            "source":                       "class RubyParser < Parser::Base\n  def initialize(source, filename)\n    @parser = RipperParser.new(source, filename)\n  end\n\n  def parse; @parser.parse end\n  def tokenize; @parser.tokens end\n  def enumerator; @parser.enumerator end\n  def shebang_line; @parser.shebang_line end\n  def encoding_line; @parser.encoding_line end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"},{"file_line":18,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23shebang_line"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/parser/ruby/ruby_parser.rb"}],
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::Ruby::RubyParser",
            "path":                         "YARD::Parser::Ruby::RubyParser#tokenize",
            "scope":                        "instance",
            "signature":                    "def tokenize; @parser.tokens end",
            "source":                       "def tokenize; @parser.tokens end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fparser%2Fruby%2Fruby_parser.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ARuby%3A%3ARubyParser%23tokenize"
        },
        {
            "attributes":                   {"class":{"parser_type_extensions":{"write":"YARD::Parser::SourceParser.parser_type_extensions=","read":"YARD::Parser::SourceParser.parser_type_extensions"},"parser_types":{"write":"YARD::Parser::SourceParser.parser_types=","read":"YARD::Parser::SourceParser.parser_types"},"parser_type":{"write":"YARD::Parser::SourceParser.parser_type=","read":"YARD::Parser::SourceParser.parser_type"}},"instance":{"contents":{"write":null,"read":"YARD::Parser::SourceParser#contents"},"file":{"write":"YARD::Parser::SourceParser#file=","read":"YARD::Parser::SourceParser#file"},"globals":{"write":null,"read":"YARD::Parser::SourceParser#globals"},"parser_type":{"write":"YARD::Parser::SourceParser#parser_type=","read":"YARD::Parser::SourceParser#parser_type"}}},
            "children":                     ["YARD::Parser::SourceParser::SHEBANG_LINE","YARD::Parser::SourceParser::ENCODING_LINE","YARD::Parser::SourceParser::ENCODING_BYTE_ORDER_MARKS","YARD::Parser::SourceParser.parser_type","YARD::Parser::SourceParser.parser_type=","YARD::Parser::SourceParser.parse","YARD::Parser::SourceParser.parse_string","YARD::Parser::SourceParser.tokenize","YARD::Parser::SourceParser.register_parser_type","YARD::Parser::SourceParser.parser_types","YARD::Parser::SourceParser.parser_types=","YARD::Parser::SourceParser.parser_type_extensions","YARD::Parser::SourceParser.parser_type_extensions=","YARD::Parser::SourceParser.parser_type_for_extension","YARD::Parser::SourceParser.validated_parser_type","YARD::Parser::SourceParser.before_parse_list","YARD::Parser::SourceParser.after_parse_list","YARD::Parser::SourceParser.before_parse_file","YARD::Parser::SourceParser.after_parse_file","YARD::Parser::SourceParser.before_parse_list_callbacks","YARD::Parser::SourceParser.after_parse_list_callbacks","YARD::Parser::SourceParser.before_parse_file_callbacks","YARD::Parser::SourceParser.after_parse_file_callbacks","YARD::Parser::SourceParser.parse_in_order","YARD::Parser::SourceParser#file=","YARD::Parser::SourceParser#file","YARD::Parser::SourceParser#parser_type","YARD::Parser::SourceParser#globals","YARD::Parser::SourceParser#contents","YARD::Parser::SourceParser#initialize","YARD::Parser::SourceParser#parse","YARD::Parser::SourceParser#tokenize","YARD::Parser::SourceParser#convert_encoding","YARD::Parser::SourceParser#post_process","YARD::Parser::SourceParser#parser_type=","YARD::Parser::SourceParser#parser_type_for_filename","YARD::Parser::SourceParser#parser_class"],
            "current_file_has_comments":    true,
            "docstring":                    "Responsible for parsing a source file into the namespace. Parsing\nalso invokes handlers to process the parsed statements and generate\nany code objects that may be recognized.\n\n== Custom Parsers\nSourceParser allows custom parsers to be registered and called when\na certain filetype is recognized. To register a parser and hook it\nup to a set of file extensions, call {register_parser_type}",
            "dynamic":                      true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/parser/source_parser.rb"}],
            "groups":                       ["Parser Callbacks"],
            "name":                         "SourceParser",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::SourceParser",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AParser%3A%3ASourceParser%3A%3ASHEBANG_LINE","YARD%3A%3AParser%3A%3ASourceParser%3A%3AENCODING_LINE","YARD%3A%3AParser%3A%3ASourceParser%3A%3AENCODING_BYTE_ORDER_MARKS","YARD%3A%3AParser%3A%3ASourceParser.parser_type","YARD%3A%3AParser%3A%3ASourceParser.parser_type%3D","YARD%3A%3AParser%3A%3ASourceParser.parse","YARD%3A%3AParser%3A%3ASourceParser.parse_string","YARD%3A%3AParser%3A%3ASourceParser.tokenize","YARD%3A%3AParser%3A%3ASourceParser.register_parser_type","YARD%3A%3AParser%3A%3ASourceParser.parser_types","YARD%3A%3AParser%3A%3ASourceParser.parser_types%3D","YARD%3A%3AParser%3A%3ASourceParser.parser_type_extensions","YARD%3A%3AParser%3A%3ASourceParser.parser_type_extensions%3D","YARD%3A%3AParser%3A%3ASourceParser.parser_type_for_extension","YARD%3A%3AParser%3A%3ASourceParser.validated_parser_type","YARD%3A%3AParser%3A%3ASourceParser.before_parse_list","YARD%3A%3AParser%3A%3ASourceParser.after_parse_list","YARD%3A%3AParser%3A%3ASourceParser.before_parse_file","YARD%3A%3AParser%3A%3ASourceParser.after_parse_file","YARD%3A%3AParser%3A%3ASourceParser.before_parse_list_callbacks","YARD%3A%3AParser%3A%3ASourceParser.after_parse_list_callbacks","YARD%3A%3AParser%3A%3ASourceParser.before_parse_file_callbacks","YARD%3A%3AParser%3A%3ASourceParser.after_parse_file_callbacks","YARD%3A%3AParser%3A%3ASourceParser.parse_in_order","YARD%3A%3AParser%3A%3ASourceParser%23file%3D","YARD%3A%3AParser%3A%3ASourceParser%23file","YARD%3A%3AParser%3A%3ASourceParser%23parser_type","YARD%3A%3AParser%3A%3ASourceParser%23globals","YARD%3A%3AParser%3A%3ASourceParser%23contents","YARD%3A%3AParser%3A%3ASourceParser%23initialize","YARD%3A%3AParser%3A%3ASourceParser%23parse","YARD%3A%3AParser%3A%3ASourceParser%23tokenize","YARD%3A%3AParser%3A%3ASourceParser%23convert_encoding","YARD%3A%3AParser%3A%3ASourceParser%23post_process","YARD%3A%3AParser%3A%3ASourceParser%23parser_type%3D","YARD%3A%3AParser%3A%3ASourceParser%23parser_type_for_filename","YARD%3A%3AParser%3A%3ASourceParser%23parser_class"],
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":396,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "contents",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#contents",
            "scope":                        "instance",
            "signature":                    "def contents",
            "source":                       "def contents\n  @contents\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":396,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23contents"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches for encoding line and forces encoding",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":468,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "convert_encoding",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::SourceParser#convert_encoding",
            "scope":                        "instance",
            "signature":                    "def convert_encoding(content)",
            "source":                       "def convert_encoding(content)\n  return content unless content.respond_to?(:force_encoding)\n  if content =~ ENCODING_LINE\n    content.force_encoding($1)\n  else\n    old_encoding = content.encoding\n    content.force_encoding('binary')\n    ENCODING_BYTE_ORDER_MARKS.each do |encoding, bom|\n      bom.force_encoding('binary')\n      if content[0,bom.size] == bom\n        content.force_encoding(encoding)\n        return content\n      end\n    end\n    content.force_encoding(old_encoding)\n    content\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":468,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23convert_encoding"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":383,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "file",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":383,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":383,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "file=",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::SourceParser#file=",
            "scope":                        "instance",
            "signature":                    "def file=(value)",
            "source":                       "def file=(value)\n  @file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":383,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":392,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "globals",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#globals",
            "scope":                        "instance",
            "signature":                    "def globals",
            "source":                       "def globals\n  @globals\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":392,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23globals"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":403,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "initialize",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":"SourceParser.parser_type","parm_name":"parser_type"},{"parm_type":"nil","parm_name":"globals1"},{"parm_type":"nil","parm_name":"globals2"}],
            "path":                         "YARD::Parser::SourceParser#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(parser_type = SourceParser.parser_type, globals1 = nil, globals2 = nil)",
            "source":                       "def initialize(parser_type = SourceParser.parser_type, globals1 = nil, globals2 = nil)\n  globals = [true, false].include?(globals1) ? globals2 : globals1\n  @file = '(stdin)'\n  @globals = globals || OpenStruct.new\n  self.parser_type = parser_type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":403,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The main parser method. This should not be called directly. Instead,\nuse the class methods {parse} and {parse_string}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":415,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parse",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":"","parm_name":"content"}],
            "path":                         "YARD::Parser::SourceParser#parse",
            "scope":                        "instance",
            "signature":                    "def parse(content = __FILE__)",
            "source":                       "def parse(content = __FILE__)\n  case content\n  when String\n    @file = File.cleanpath(content)\n    content = convert_encoding(File.read_binary(file))\n    checksum = Registry.checksum_for(content)\n    return if Registry.checksums[file] == checksum\n\n    if Registry.checksums.has_key?(file)\n      log.info \"File '#{file}' was modified, re-processing...\"\n    end\n    Registry.checksums[@file] = checksum\n    self.parser_type = parser_type_for_filename(file)\n  else\n    content = content.read if content.respond_to? :read\n  end\n\n  @contents = content\n  @parser = parser_class.new(content, file)\n\n  self.class.before_parse_file_callbacks.each do |cb|\n    return @parser if cb.call(self) == false\n  end\n\n  @parser.parse\n  post_process\n\n  self.class.after_parse_file_callbacks.each do |cb|\n    cb.call(self)\n  end\n\n  @parser\nrescue ArgumentError, NotImplementedError => e\n  log.warn(\"Cannot parse `#{file}': #{e.message}\")\n  log.backtrace(e) if log.level >= Logger::DEBUG\nrescue ParserSyntaxError => e\n  log.warn(e.message.capitalize)\n  log.backtrace(e) if log.level >= Logger::DEBUG\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":415,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":511,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parser_class",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#parser_class",
            "scope":                        "instance",
            "signature":                    "def parser_class",
            "source":                       "def parser_class\n  klass = self.class.parser_types[parser_type]\n  raise ArgumentError, \"invalid parser type '#{parser_type}' or unrecognized file\", caller[1..-1] if !klass\n  klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":511,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23parser_class"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":387,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parser_type",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#parser_type",
            "scope":                        "instance",
            "signature":                    "def parser_type",
            "source":                       "def parser_type\n  @parser_type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":387,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23parser_type"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":496,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parser_type=",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::SourceParser#parser_type=",
            "scope":                        "instance",
            "signature":                    "def parser_type=(value)",
            "source":                       "def parser_type=(value)\n  @parser_type = self.class.validated_parser_type(value)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":496,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23parser_type%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Guesses the parser type to use depending on the file extension.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":504,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parser_type_for_filename",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Parser::SourceParser#parser_type_for_filename",
            "scope":                        "instance",
            "signature":                    "def parser_type_for_filename(filename)",
            "source":                       "def parser_type_for_filename(filename)\n  ext = (File.extname(filename)[1..-1] || \"\").downcase\n  type = self.class.parser_type_for_extension(ext)\n  parser_type == :ruby18 && type == :ruby ? :ruby18 : type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":504,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23parser_type_for_filename"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a {Handlers::Processor} object to post process the parsed statements.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":489,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "post_process",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser#post_process",
            "scope":                        "instance",
            "signature":                    "def post_process",
            "source":                       "def post_process\n  return unless @parser.respond_to? :enumerator\n  return unless enumerator = @parser.enumerator\n  post = Handlers::Processor.new(self)\n  post.process(enumerator)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":489,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23post_process"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tokenizes but does not parse the block of code using the current {#parser_type}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":459,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"}],
            "path":                         "YARD::Parser::SourceParser#tokenize",
            "scope":                        "instance",
            "signature":                    "def tokenize(content)",
            "source":                       "def tokenize(content)\n  @parser = parser_class.new(content, file)\n  @parser.tokenize\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":459,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%23tokenize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a callback to be called after an individual file is parsed.\nThe block passed to this method will be called on subsequent parse\ncalls.\n\nTo register a callback that is called after the entire list of files\nis processed, see {after_parse_list}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":320,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "after_parse_file",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Parser::SourceParser.after_parse_file",
            "scope":                        "class",
            "signature":                    "def after_parse_file(&block)",
            "source":                       "def after_parse_file(&block)\n  after_parse_file_callbacks << block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":320,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.after_parse_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":348,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "after_parse_file_callbacks",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.after_parse_file_callbacks",
            "scope":                        "class",
            "signature":                    "def after_parse_file_callbacks",
            "source":                       "def after_parse_file_callbacks\n  @after_parse_file_callbacks ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":348,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.after_parse_file_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a callback to be called after a list of files is parsed\nvia {parse}. The block passed to this method will be called on\nsubsequent parse calls.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":254,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "after_parse_list",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Parser::SourceParser.after_parse_list",
            "scope":                        "class",
            "signature":                    "def after_parse_list(&block)",
            "source":                       "def after_parse_list(&block)\n  after_parse_list_callbacks << block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":254,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.after_parse_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":334,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "after_parse_list_callbacks",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.after_parse_list_callbacks",
            "scope":                        "class",
            "signature":                    "def after_parse_list_callbacks",
            "source":                       "def after_parse_list_callbacks\n  @after_parse_list_callbacks ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":334,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.after_parse_list_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a callback to be called before an individual file is parsed.\nThe block passed to this method will be called on subsequent parse\ncalls.\n\nTo register a callback that is called before the entire list of files\nis processed, see {before_parse_list}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":291,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "before_parse_file",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Parser::SourceParser.before_parse_file",
            "scope":                        "class",
            "signature":                    "def before_parse_file(&block)",
            "source":                       "def before_parse_file(&block)\n  before_parse_file_callbacks << block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":291,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.before_parse_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":341,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "before_parse_file_callbacks",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.before_parse_file_callbacks",
            "scope":                        "class",
            "signature":                    "def before_parse_file_callbacks",
            "source":                       "def before_parse_file_callbacks\n  @before_parse_file_callbacks ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":341,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.before_parse_file_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a callback to be called before a list of files is parsed\nvia {parse}. The block passed to this method will be called on\nsubsequent parse calls.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":230,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "before_parse_list",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Parser::SourceParser.before_parse_list",
            "scope":                        "class",
            "signature":                    "def before_parse_list(&block)",
            "source":                       "def before_parse_list(&block)\n  before_parse_list_callbacks << block\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":230,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.before_parse_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":327,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "before_parse_list_callbacks",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.before_parse_list_callbacks",
            "scope":                        "class",
            "signature":                    "def before_parse_list_callbacks",
            "source":                       "def before_parse_list_callbacks\n  @before_parse_list_callbacks ||= []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":327,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.before_parse_list_callbacks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a path or set of paths",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parse",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":"[\"{lib,app}/**/*.rb\", \"ext/**/*.c\"]","parm_name":"paths"},{"parm_type":"[]","parm_name":"excluded"},{"parm_type":"log.level","parm_name":"level"}],
            "path":                         "YARD::Parser::SourceParser.parse",
            "scope":                        "class",
            "signature":                    "def parse(paths = [\"{lib,app}/**/*.rb\", \"ext/**/*.c\"], excluded = [], level = log.level)",
            "source":                       "def parse(paths = [\"{lib,app}/**/*.rb\", \"ext/**/*.c\"], excluded = [], level = log.level)\n  log.debug(\"Parsing #{paths.inspect} with `#{parser_type}` parser\")\n  excluded = excluded.map do |path|\n    case path\n    when Regexp; path\n    else Regexp.new(path.to_s, Regexp::IGNORECASE)\n    end\n  end\n  files = [paths].flatten.\n    map {|p| File.directory?(p) ? \"#{p}/**/*.{rb,c}\" : p }.\n    map {|p| p.include?(\"*\") ? Dir[p] : p }.flatten.\n    reject {|p| !File.file?(p) || excluded.any? {|re| p =~ re } }\n\n  log.enter_level(level) do\n    parse_in_order(*files.uniq)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a list of files in a queue.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":360,"file_path":"lib/yard/parser/source_parser.rb"}],
            "group":                        "Parser Callbacks",
            "name":                         "parse_in_order",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"*files"}],
            "path":                         "YARD::Parser::SourceParser.parse_in_order",
            "scope":                        "class",
            "signature":                    "def parse_in_order(*files)",
            "source":                       "def parse_in_order(*files)\n  global_state = OpenStruct.new\n  files = files.sort_by {|x| x.length if x }\n\n  before_parse_list_callbacks.each do |cb|\n    return if cb.call(files, global_state) == false\n  end\n\n  OrderedParser.new(global_state, files).parse\n\n  after_parse_list_callbacks.each do |cb|\n    cb.call(files, global_state)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":360,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parse_in_order"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a string +content+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":115,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parse_string",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"},{"parm_type":"parser_type","parm_name":"ptype"}],
            "path":                         "YARD::Parser::SourceParser.parse_string",
            "scope":                        "class",
            "signature":                    "def parse_string(content, ptype = parser_type)",
            "source":                       "def parse_string(content, ptype = parser_type)\n  new(ptype).parse(StringIO.new(content))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":115,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parse_string"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_type",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.parser_type",
            "scope":                        "class",
            "signature":                    "def parser_type",
            "source":                       "def parser_type\n  @parser_type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_type"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":80,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_type=",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::SourceParser.parser_type=",
            "scope":                        "class",
            "signature":                    "def parser_type=(value)",
            "source":                       "def parser_type=(value)\n  @parser_type = validated_parser_type(value)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":80,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_type%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":157,"file_path":"lib/yard/parser/source_parser.rb"},{"file_line":159,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_type_extensions",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.parser_type_extensions",
            "scope":                        "class",
            "signature":                    "def parser_type_extensions",
            "source":                       "def parser_type_extensions\n  @parser_type_extensions\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":157,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"},{"file_line":159,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_type_extensions"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":160,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_type_extensions=",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::SourceParser.parser_type_extensions=",
            "scope":                        "class",
            "signature":                    "def parser_type_extensions=(value) @@parser_type_extensions = value end",
            "source":                       "def parser_type_extensions=(value) @@parser_type_extensions = value end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":160,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_type_extensions%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Finds a parser type that is registered for the extension. If no\ntype is found, the default Ruby type is returned.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":167,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_type_for_extension",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"extension"}],
            "path":                         "YARD::Parser::SourceParser.parser_type_for_extension",
            "scope":                        "class",
            "signature":                    "def parser_type_for_extension(extension)",
            "source":                       "def parser_type_for_extension(extension)\n  type = parser_type_extensions.find do |t, exts|\n    [exts].flatten.any? {|ext| ext === extension }\n  end\n  validated_parser_type(type ? type.first : :ruby)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":167,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_type_for_extension"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/parser/source_parser.rb"},{"file_line":151,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_types",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser.parser_types",
            "scope":                        "class",
            "signature":                    "def parser_types",
            "source":                       "def parser_types\n  @parser_types\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"},{"file_line":151,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "parser_types=",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Parser::SourceParser.parser_types=",
            "scope":                        "class",
            "signature":                    "def parser_types=(value) @@parser_types = value end",
            "source":                       "def parser_types=(value) @@parser_types = value end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.parser_types%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a new parser type.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":138,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "register_parser_type",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":null,"parm_name":"parser_klass"},{"parm_type":"nil","parm_name":"extensions"}],
            "path":                         "YARD::Parser::SourceParser.register_parser_type",
            "scope":                        "class",
            "signature":                    "def register_parser_type(type, parser_klass, extensions = nil)",
            "source":                       "def register_parser_type(type, parser_klass, extensions = nil)\n  unless Base > parser_klass\n    raise ArgumentError, \"expecting parser_klass to be a subclass of YARD::Parser::Base\"\n  end\n  parser_type_extensions[type.to_sym] = extensions if extensions\n  parser_types[type.to_sym] = parser_klass\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":138,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.register_parser_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tokenizes but does not parse the block of code",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":124,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "tokenize",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"content"},{"parm_type":"parser_type","parm_name":"ptype"}],
            "path":                         "YARD::Parser::SourceParser.tokenize",
            "scope":                        "class",
            "signature":                    "def tokenize(content, ptype = parser_type)",
            "source":                       "def tokenize(content, ptype = parser_type)\n  new(ptype).tokenize(content)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":124,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.tokenize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the validated parser type. Basically, enforces that :ruby\ntype is never set if the Ripper library is not available",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":180,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "validated_parser_type",
            "namespace":                    "YARD::Parser::SourceParser",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::Parser::SourceParser.validated_parser_type",
            "scope":                        "class",
            "signature":                    "def validated_parser_type(type)",
            "source":                       "def validated_parser_type(type)\n  !defined?(::Ripper) && type == :ruby ? :ruby18 : type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":180,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser.validated_parser_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Byte order marks for various encodings",
            "dynamic":                      true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "ENCODING_BYTE_ORDER_MARKS",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser::ENCODING_BYTE_ORDER_MARKS",
            "signature":                    "ENCODING_BYTE_ORDER_MARKS = {",
            "source":                       "ENCODING_BYTE_ORDER_MARKS = {\n  'utf-8' => \"\\xEF\\xBB\\xBF\",\n  # Not yet supported\n  #'utf-16be' => \"\\xFE\\xFF\",\n  #'utf-16le' => \"\\xFF\\xFE\",\n  #'utf-32be' => \"\\x00\\x00\\xFF\\xFE\",\n  #'utf-32le' => \"\\xFF\\xFE\",\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  'utf-8' => \"\\xEF\\xBB\\xBF\",\n  # Not yet supported\n  #'utf-16be' => \"\\xFE\\xFF\",\n  #'utf-16le' => \"\\xFF\\xFE\",\n  #'utf-32be' => \"\\x00\\x00\\xFF\\xFE\",\n  #'utf-32le' => \"\\xFF\\xFE\",\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%3A%3AENCODING_BYTE_ORDER_MARKS"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":63,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "ENCODING_LINE",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser::ENCODING_LINE",
            "signature":                    "ENCODING_LINE = /\\A(?:\\s*#*!.*\\r?\\n)?\\s*(?:#+|\\/\\*+|\\/\\/+).*coding\\s*[:=]{1,2}\\s*([a-z\\d_\\-]+)/i",
            "source":                       "ENCODING_LINE = /\\A(?:\\s*#*!.*\\r?\\n)?\\s*(?:#+|\\/\\*+|\\/\\/+).*coding\\s*[:=]{1,2}\\s*([a-z\\d_\\-]+)/i",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A(?:\\s*#*!.*\\r?\\n)?\\s*(?:#+|\\/\\*+|\\/\\/+).*coding\\s*[:=]{1,2}\\s*([a-z\\d_\\-]+)/i",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":63,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%3A%3AENCODING_LINE"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "SHEBANG_LINE",
            "namespace":                    "YARD::Parser::SourceParser",
            "path":                         "YARD::Parser::SourceParser::SHEBANG_LINE",
            "signature":                    "SHEBANG_LINE  = /\\A\\s*#!\\S+/",
            "source":                       "SHEBANG_LINE  = /\\A\\s*#!\\S+/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A\\s*#!\\S+/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3ASourceParser%3A%3ASHEBANG_LINE"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Raised when an object is recognized but cannot be documented. This\ngenerally occurs when the Ruby syntax used to declare an object is\ntoo dynamic in nature.",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/parser/source_parser.rb"}],
            "name":                         "UndocumentableError",
            "namespace":                    "YARD::Parser",
            "path":                         "YARD::Parser::UndocumentableError",
            "source_type":                  "ruby",
            "superclass":                   "Exception",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fparser%2Fsource_parser.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AParser%3A%3AUndocumentableError",
            "y_ld:superclass":              "Exception"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The root path for YARD source libraries",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard.rb"}],
            "name":                         "ROOT",
            "namespace":                    "YARD",
            "path":                         "YARD::ROOT",
            "signature":                    "ROOT = File.expand_path(File.dirname(__FILE__))",
            "source":                       "ROOT = File.expand_path(File.dirname(__FILE__))",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path(File.dirname(__FILE__))",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AROOT"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Rake::YardocTask"],
            "current_file_has_comments":    true,
            "docstring":                    "Holds Rake tasks used by YARD",
            "dynamic":                      true,
            "files":                        [{"file_line":174,"file_path":"lib/yard/autoload.rb"},{"file_line":5,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "Rake",
            "namespace":                    "YARD",
            "path":                         "YARD::Rake",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ARake%3A%3AYardocTask"],
            "y_ld:files":                   [{"file_line":174,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ARake"
        },
        {
            "attributes":                   {"class":{},"instance":{"after":{"write":"YARD::Rake::YardocTask#after=","read":"YARD::Rake::YardocTask#after"},"files":{"write":"YARD::Rake::YardocTask#files=","read":"YARD::Rake::YardocTask#files"},"before":{"write":"YARD::Rake::YardocTask#before=","read":"YARD::Rake::YardocTask#before"},"name":{"write":"YARD::Rake::YardocTask#name=","read":"YARD::Rake::YardocTask#name"},"verifier":{"write":"YARD::Rake::YardocTask#verifier=","read":"YARD::Rake::YardocTask#verifier"},"options":{"write":"YARD::Rake::YardocTask#options=","read":"YARD::Rake::YardocTask#options"}}},
            "children":                     ["YARD::Rake::YardocTask#name=","YARD::Rake::YardocTask#name","YARD::Rake::YardocTask#options=","YARD::Rake::YardocTask#options","YARD::Rake::YardocTask#files=","YARD::Rake::YardocTask#files","YARD::Rake::YardocTask#before=","YARD::Rake::YardocTask#before","YARD::Rake::YardocTask#after=","YARD::Rake::YardocTask#after","YARD::Rake::YardocTask#verifier=","YARD::Rake::YardocTask#verifier","YARD::Rake::YardocTask#initialize","YARD::Rake::YardocTask#define"],
            "current_file_has_comments":    true,
            "docstring":                    "The rake task to run {CLI::Yardoc} and generate documentation.",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "YardocTask",
            "namespace":                    "YARD::Rake",
            "path":                         "YARD::Rake::YardocTask",
            "source_type":                  "ruby",
            "superclass":                   "Rake::TaskLib",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ARake%3A%3AYardocTask%23name%3D","YARD%3A%3ARake%3A%3AYardocTask%23name","YARD%3A%3ARake%3A%3AYardocTask%23options%3D","YARD%3A%3ARake%3A%3AYardocTask%23options","YARD%3A%3ARake%3A%3AYardocTask%23files%3D","YARD%3A%3ARake%3A%3AYardocTask%23files","YARD%3A%3ARake%3A%3AYardocTask%23before%3D","YARD%3A%3ARake%3A%3AYardocTask%23before","YARD%3A%3ARake%3A%3AYardocTask%23after%3D","YARD%3A%3ARake%3A%3AYardocTask%23after","YARD%3A%3ARake%3A%3AYardocTask%23verifier%3D","YARD%3A%3ARake%3A%3AYardocTask%23verifier","YARD%3A%3ARake%3A%3AYardocTask%23initialize","YARD%3A%3ARake%3A%3AYardocTask%23define"],
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask",
            "y_ld:superclass":              "Rake%3A%3ATaskLib"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a +Proc+ after the task",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "after",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#after",
            "scope":                        "instance",
            "signature":                    "def after",
            "source":                       "def after\n  @after\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23after"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a +Proc+ after the task",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "after=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#after=",
            "scope":                        "instance",
            "signature":                    "def after=(value)",
            "source":                       "def after=(value)\n  @after = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23after%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a +Proc+ before the task",
            "dynamic":                      true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "before",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#before",
            "scope":                        "instance",
            "signature":                    "def before",
            "source":                       "def before\n  @before\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23before"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a +Proc+ before the task",
            "dynamic":                      true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "before=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#before=",
            "scope":                        "instance",
            "signature":                    "def before=(value)",
            "source":                       "def before=(value)\n  @before = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23before%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Defines the rake task",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "define",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#define",
            "scope":                        "instance",
            "signature":                    "def define",
            "source":                       "def define\n  desc \"Generate YARD Documentation\"\n  task(name) do\n    before.call if before.is_a?(Proc)\n    yardoc = YARD::CLI::Yardoc.new\n    yardoc.parse_arguments *(options + files)\n    yardoc.options[:verifier] = verifier if verifier\n    yardoc.run\n    after.call if after.is_a?(Proc)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23define"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The Ruby source files (and any extra documentation files separated by '-')\nto process.",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "files",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#files",
            "scope":                        "instance",
            "signature":                    "def files",
            "source":                       "def files\n  @files\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23files"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The Ruby source files (and any extra documentation files separated by '-')\nto process.",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "files=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#files=",
            "scope":                        "instance",
            "signature":                    "def files=(value)",
            "source":                       "def files=(value)\n  @files = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23files%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new task with name +name+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":":yard","parm_name":"name"}],
            "path":                         "YARD::Rake::YardocTask#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(name = :yard)",
            "source":                       "def initialize(name = :yard)\n  @name = name\n  @options = []\n  @files = []\n\n  yield self if block_given?\n  self.options +=  ENV['OPTS'].split(/[ ,]/) if ENV['OPTS']\n  self.files   += ENV['FILES'].split(/[ ,]/) if ENV['FILES']\n\n  define\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The name of the task",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The name of the task",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23name%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Options to pass to {CLI::Yardoc}",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Options to pass to {CLI::Yardoc}",
            "dynamic":                      true,
            "files":                        [{"file_line":15,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":15,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "verifier",
            "namespace":                    "YARD::Rake::YardocTask",
            "path":                         "YARD::Rake::YardocTask#verifier",
            "scope":                        "instance",
            "signature":                    "def verifier",
            "source":                       "def verifier\n  @verifier\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23verifier"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/rake/yardoc_task.rb"}],
            "name":                         "verifier=",
            "namespace":                    "YARD::Rake::YardocTask",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Rake::YardocTask#verifier=",
            "scope":                        "instance",
            "signature":                    "def verifier=(value)",
            "source":                       "def verifier=(value)\n  @verifier = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Frake%2Fyardoc_task.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ARake%3A%3AYardocTask%23verifier%3D"
        },
        {
            "aliases":                      {"YARD::Registry.[]":"at"},
            "attributes":                   {"class":{"yardoc_file":{"write":"YARD::Registry.yardoc_file=","read":"YARD::Registry.yardoc_file"},"single_object_db":{"write":"YARD::Registry.single_object_db=","read":"YARD::Registry.single_object_db"}},"instance":{}},
            "children":                     ["YARD::Registry::DEFAULT_YARDOC_FILE","YARD::Registry::LOCAL_YARDOC_INDEX","YARD::Registry.yardoc_file_for_gem","YARD::Registry.yardoc_file=","YARD::Registry.yardoc_file","YARD::Registry.load","YARD::Registry.load_yardoc","YARD::Registry.load!","YARD::Registry.load_all","YARD::Registry.save","YARD::Registry.delete_from_disk","YARD::Registry.register","YARD::Registry.delete","YARD::Registry.clear","YARD::Registry.each","YARD::Registry.all","YARD::Registry.paths","YARD::Registry.at","YARD::Registry.[]","YARD::Registry.root","YARD::Registry.resolve","YARD::Registry.checksums","YARD::Registry.checksum_for","YARD::Registry.single_object_db=","YARD::Registry.single_object_db","YARD::Registry.proxy_types","YARD::Registry.instance","YARD::Registry.partial_resolve","YARD::Registry.global_yardoc_file","YARD::Registry.local_yardoc_file","YARD::Registry.thread_local_store","YARD::Registry.thread_local_store="],
            "class_mixins":                 ["Enumerable"],
            "current_file_has_comments":    true,
            "docstring":                    "The +Registry+ is the centralized data store for all {CodeObjects} created\nduring parsing. The storage is a key value store with the object's path\n(see {CodeObjects::Base#path}) as the key and the object itself as the value.\nObject paths must be unique to be stored in the Registry. All lookups for\nobjects are done on the singleton Registry instance using the {Registry.at}\nor {Registry.resolve} methods.\n\n== Saving / Loading a Registry\nThe registry is saved to a \"yardoc file\" (actually a directory), which can\nbe loaded back to perform any lookups. See {Registry.load!} and\n{Registry.save} for information on saving and loading of a yardoc file.\n\n== Threading Notes\nThe registry class is a singleton class that is accessed directly in many\nplaces across YARD. To mitigate threading issues, YARD (0.6.5+) makes\nthe Registry thread local. This means all access to a registry for a specific\nobject set must occur in the originating thread.",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/registry.rb"}],
            "groups":                       ["Getting .yardoc File Locations","Loading Data from Disk","Saving and Deleting Data from Disk","Adding and Deleting Objects from the Registry","Accessing Objects in the Registry","Managing Source File Checksums","Managing Internal State (Advanced / Testing Only)","Legacy Methods","Retrieving yardoc File Locations","Threading support"],
            "name":                         "Registry",
            "namespace":                    "YARD",
            "path":                         "YARD::Registry",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ARegistry%3A%3ADEFAULT_YARDOC_FILE","YARD%3A%3ARegistry%3A%3ALOCAL_YARDOC_INDEX","YARD%3A%3ARegistry.yardoc_file_for_gem","YARD%3A%3ARegistry.yardoc_file%3D","YARD%3A%3ARegistry.yardoc_file","YARD%3A%3ARegistry.load","YARD%3A%3ARegistry.load_yardoc","YARD%3A%3ARegistry.load%21","YARD%3A%3ARegistry.load_all","YARD%3A%3ARegistry.save","YARD%3A%3ARegistry.delete_from_disk","YARD%3A%3ARegistry.register","YARD%3A%3ARegistry.delete","YARD%3A%3ARegistry.clear","YARD%3A%3ARegistry.each","YARD%3A%3ARegistry.all","YARD%3A%3ARegistry.paths","YARD%3A%3ARegistry.at","YARD%3A%3ARegistry.%5B%5D","YARD%3A%3ARegistry.root","YARD%3A%3ARegistry.resolve","YARD%3A%3ARegistry.checksums","YARD%3A%3ARegistry.checksum_for","YARD%3A%3ARegistry.single_object_db%3D","YARD%3A%3ARegistry.single_object_db","YARD%3A%3ARegistry.proxy_types","YARD%3A%3ARegistry.instance","YARD%3A%3ARegistry.partial_resolve","YARD%3A%3ARegistry.global_yardoc_file","YARD%3A%3ARegistry.local_yardoc_file","YARD%3A%3ARegistry.thread_local_store","YARD%3A%3ARegistry.thread_local_store%3D"],
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ARegistry"
        },
        {
            "docstring":                    "Returns the object at a specific path.",
            "dynamic":                      true,
            "files":                        [{"file_line":235,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "[]",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.[]",
            "scope":                        "class",
            "signature":                    "def at(path) path ? thread_local_store[path] : nil end",
            "source":                       "def at(path) path ? thread_local_store[path] : nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":235,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.%5B%5D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns all objects in the registry that match one of the types provided\nin the +types+ list (if +types+ is provided).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":210,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "all",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"*types"}],
            "path":                         "YARD::Registry.all",
            "scope":                        "class",
            "signature":                    "def all(*types)",
            "source":                       "def all(*types)\n  if types.empty?\n    thread_local_store.values.select {|obj| obj != root }\n  else\n    list = []\n    types.each do |type|\n      list += thread_local_store.values_for_type(type)\n    end\n    list\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":210,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.all"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the object at a specific path.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":234,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "at",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Registry.at",
            "scope":                        "class",
            "signature":                    "def at(path) path ? thread_local_store[path] : nil end",
            "source":                       "def at(path) path ? thread_local_store[path] : nil end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":234,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.at"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":319,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Managing Source File Checksums",
            "name":                         "checksum_for",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Registry.checksum_for",
            "scope":                        "class",
            "signature":                    "def checksum_for(data)",
            "source":                       "def checksum_for(data)\n  Digest::SHA1.hexdigest(data)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":319,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.checksum_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":313,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Managing Source File Checksums",
            "name":                         "checksums",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.checksums",
            "scope":                        "class",
            "signature":                    "def checksums",
            "source":                       "def checksums\n  thread_local_store.checksums\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":313,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.checksums"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Clears the registry",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":187,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Adding and Deleting Objects from the Registry",
            "name":                         "clear",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.clear",
            "scope":                        "class",
            "signature":                    "def clear",
            "source":                       "def clear\n  self.thread_local_store = RegistryStore.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":187,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.clear"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes an object from the registry",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":181,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Adding and Deleting Objects from the Registry",
            "name":                         "delete",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Registry.delete",
            "scope":                        "class",
            "signature":                    "def delete(object)",
            "source":                       "def delete(object)\n  thread_local_store.delete(object.path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":181,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.delete"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes the yardoc file from disk",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":163,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Saving and Deleting Data from Disk",
            "name":                         "delete_from_disk",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.delete_from_disk",
            "scope":                        "class",
            "signature":                    "def delete_from_disk",
            "source":                       "def delete_from_disk\n  thread_local_store.destroy\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":163,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.delete_from_disk"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Iterates over {all} with no arguments",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":194,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "each",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Registry.each",
            "scope":                        "class",
            "signature":                    "def each(&block)",
            "source":                       "def each(&block)\n  all.each(&block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":194,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.each"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":377,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Retrieving yardoc File Locations",
            "name":                         "global_yardoc_file",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"spec"},{"parm_type":"false","parm_name":"for_writing"}],
            "path":                         "YARD::Registry.global_yardoc_file",
            "scope":                        "class",
            "signature":                    "def global_yardoc_file(spec, for_writing = false)",
            "source":                       "def global_yardoc_file(spec, for_writing = false)\n  path = spec.full_gem_path\n  yfile = File.join(path, DEFAULT_YARDOC_FILE)\n  if for_writing && File.writable?(path)\n    return yfile\n  elsif !for_writing && File.exist?(yfile)\n    return yfile\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":377,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.global_yardoc_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The registry singleton instance.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":351,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Legacy Methods",
            "name":                         "instance",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.instance",
            "scope":                        "class",
            "signature":                    "def instance; self end",
            "source":                       "def instance; self end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":351,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.instance"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads the registry and/or parses a list of files",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":96,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Loading Data from Disk",
            "name":                         "load",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":"[]","parm_name":"files"},{"parm_type":"false","parm_name":"reparse"}],
            "path":                         "YARD::Registry.load",
            "scope":                        "class",
            "signature":                    "def load(files = [], reparse = false)",
            "source":                       "def load(files = [], reparse = false)\n  if files.is_a?(Array)\n    if File.exists?(yardoc_file) && !reparse\n      load_yardoc\n    else\n      size = thread_local_store.keys.size\n      YARD.parse(files)\n      save if thread_local_store.keys.size > size\n    end\n  elsif files.is_a?(String)\n    load_yardoc(files)\n  else\n    raise ArgumentError, \"Must take a list of files to parse or the .yardoc file to load.\"\n  end\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":96,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.load"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads a yardoc file and forces all objects cached on disk into\nmemory. Equivalent to calling {load_yardoc} followed by {load_all}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":131,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Loading Data from Disk",
            "name":                         "load!",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":"yardoc_file","parm_name":"file"}],
            "path":                         "YARD::Registry.load!",
            "scope":                        "class",
            "signature":                    "def load!(file = yardoc_file)",
            "source":                       "def load!(file = yardoc_file)\n  clear\n  thread_local_store.load!(file)\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":131,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.load%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Forces all objects cached on disk into memory",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":146,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Loading Data from Disk",
            "name":                         "load_all",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.load_all",
            "scope":                        "class",
            "signature":                    "def load_all",
            "source":                       "def load_all\n  thread_local_store.load_all\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":146,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.load_all"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads a yardoc file directly",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":117,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Loading Data from Disk",
            "name":                         "load_yardoc",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":"yardoc_file","parm_name":"file"}],
            "path":                         "YARD::Registry.load_yardoc",
            "scope":                        "class",
            "signature":                    "def load_yardoc(file = yardoc_file)",
            "source":                       "def load_yardoc(file = yardoc_file)\n  clear\n  thread_local_store.load(file)\n  self\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":117,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.load_yardoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":387,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Retrieving yardoc File Locations",
            "name":                         "local_yardoc_file",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"spec"},{"parm_type":"false","parm_name":"for_writing"}],
            "path":                         "YARD::Registry.local_yardoc_file",
            "scope":                        "class",
            "signature":                    "def local_yardoc_file(spec, for_writing = false)",
            "source":                       "def local_yardoc_file(spec, for_writing = false)\n  path = Registry::LOCAL_YARDOC_INDEX\n  FileUtils.mkdir_p(path) if for_writing\n  path = File.join(path, \"#{spec.full_name}.yardoc\")\n  if for_writing\n    path\n  else\n    File.exist?(path) ? path : nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":387,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.local_yardoc_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attempts to resolve a name in a namespace",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":361,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "partial_resolve",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Registry.partial_resolve",
            "scope":                        "class",
            "signature":                    "def partial_resolve(namespace, name)",
            "source":                       "def partial_resolve(namespace, name)\n  return at(name) || at('#' + name) if namespace.root?\n  [CodeObjects::NSEP, CodeObjects::CSEP, ''].each do |s|\n    next if s.empty? && name =~ /^\\w/\n    path = name\n    if namespace != root\n      path = [namespace.path, name].join(s)\n    end\n    found = at(path)\n    return found if found\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":361,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.partial_resolve"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the paths of all of the objects in the registry.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":225,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "paths",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":"false","parm_name":"reload"}],
            "path":                         "YARD::Registry.paths",
            "scope":                        "class",
            "signature":                    "def paths(reload = false)",
            "source":                       "def paths(reload = false)\n  thread_local_store.keys(reload).map {|k| k.to_s }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":225,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The assumed types of a list of paths. This method is used by CodeObjects::Base",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":341,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Managing Internal State (Advanced / Testing Only)",
            "name":                         "proxy_types",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.proxy_types",
            "scope":                        "class",
            "signature":                    "def proxy_types",
            "source":                       "def proxy_types\n  thread_local_store.proxy_types\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":341,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.proxy_types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a new object with the registry",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":173,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Adding and Deleting Objects from the Registry",
            "name":                         "register",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Registry.register",
            "scope":                        "class",
            "signature":                    "def register(object)",
            "source":                       "def register(object)\n  return if object.is_a?(CodeObjects::Proxy)\n  thread_local_store[object.path] = object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":173,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.register"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attempts to find an object by name starting at +namespace+, performing\na lookup similar to Ruby's method of resolving a constant in a namespace.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":267,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "resolve",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"namespace"},{"parm_type":null,"parm_name":"name"},{"parm_type":"false","parm_name":"inheritance"},{"parm_type":"false","parm_name":"proxy_fallback"}],
            "path":                         "YARD::Registry.resolve",
            "scope":                        "class",
            "signature":                    "def resolve(namespace, name, inheritance = false, proxy_fallback = false)",
            "source":                       "def resolve(namespace, name, inheritance = false, proxy_fallback = false)\n  if namespace.is_a?(CodeObjects::Proxy)\n    return proxy_fallback ? CodeObjects::Proxy.new(namespace, name) : nil\n  end\n\n  if namespace == :root || !namespace\n    namespace = root\n  else\n    namespace = namespace.parent until namespace.is_a?(CodeObjects::NamespaceObject)\n  end\n  orignamespace = namespace\n\n  name = name.to_s\n  if name =~ /^#{CodeObjects::NSEPQ}/\n    [name, name[2..-1]].each do |n|\n      return at(n) if at(n)\n    end\n  else\n    while namespace\n      if namespace.is_a?(CodeObjects::NamespaceObject)\n        if inheritance\n          nss = namespace.inheritance_tree(true)\n          if namespace.respond_to?(:superclass)\n            if namespace.superclass != P('BasicObject')\n              nss |= [P('Object')]\n            end\n            nss |= [P('BasicObject')]\n          end\n        else\n          nss = [namespace]\n        end\n        nss.each do |ns|\n          next if ns.is_a?(CodeObjects::Proxy)\n          found = partial_resolve(ns, name)\n          return found if found\n        end\n      end\n      namespace = namespace.parent\n    end\n  end\n  proxy_fallback ? CodeObjects::Proxy.new(orignamespace, name) : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":267,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.resolve"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The root namespace object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":239,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Accessing Objects in the Registry",
            "name":                         "root",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.root",
            "scope":                        "class",
            "signature":                    "def root; thread_local_store[:root] end",
            "source":                       "def root; thread_local_store[:root] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":239,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.root"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Saves the registry to +file+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":157,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Saving and Deleting Data from Disk",
            "name":                         "save",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":"false","parm_name":"merge"},{"parm_type":"yardoc_file","parm_name":"file"}],
            "path":                         "YARD::Registry.save",
            "scope":                        "class",
            "signature":                    "def save(merge = false, file = yardoc_file)",
            "source":                       "def save(merge = false, file = yardoc_file)\n  thread_local_store.save(merge, file)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":157,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.save"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Whether or not the Registry storage should load everything into a\nsingle object database (for disk efficiency), or spread them out\n(for load time efficiency).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":333,"file_path":"lib/yard/registry.rb"},{"file_line":336,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Managing Internal State (Advanced / Testing Only)",
            "name":                         "single_object_db",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.single_object_db",
            "scope":                        "class",
            "signature":                    "def single_object_db",
            "source":                       "def single_object_db\n  @single_object_db\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":333,"file_path":"lib%2Fyard%2Fregistry.rb"},{"file_line":336,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.single_object_db"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Whether or not the Registry storage should load everything into a\nsingle object database (for disk efficiency), or spread them out\n(for load time efficiency).",
            "dynamic":                      true,
            "files":                        [{"file_line":333,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Managing Internal State (Advanced / Testing Only)",
            "name":                         "single_object_db=",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Registry.single_object_db=",
            "scope":                        "class",
            "signature":                    "def single_object_db=(value)",
            "source":                       "def single_object_db=(value)\n  @single_object_db = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":333,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.single_object_db%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":401,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Threading support",
            "name":                         "thread_local_store",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.thread_local_store",
            "scope":                        "class",
            "signature":                    "def thread_local_store",
            "source":                       "def thread_local_store\n  Thread.current[:__yard_registry__] ||= clear\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":401,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.thread_local_store"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":406,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Threading support",
            "name":                         "thread_local_store=",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Registry.thread_local_store=",
            "scope":                        "class",
            "signature":                    "def thread_local_store=(value)",
            "source":                       "def thread_local_store=(value)\n  Thread.current[:__yard_registry__] = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":406,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.thread_local_store%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets/sets the yardoc filename",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/registry.rb"},{"file_line":75,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Getting .yardoc File Locations",
            "name":                         "yardoc_file",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry.yardoc_file",
            "scope":                        "class",
            "signature":                    "def yardoc_file",
            "source":                       "def yardoc_file\n  @yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fregistry.rb"},{"file_line":75,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.yardoc_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets/sets the yardoc filename",
            "dynamic":                      true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Getting .yardoc File Locations",
            "name":                         "yardoc_file=",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Registry.yardoc_file=",
            "scope":                        "class",
            "signature":                    "def yardoc_file=(value)",
            "source":                       "def yardoc_file=(value)\n  @yardoc_file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.yardoc_file%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the .yardoc file associated with a gem.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/registry.rb"}],
            "group":                        "Getting .yardoc File Locations",
            "name":                         "yardoc_file_for_gem",
            "namespace":                    "YARD::Registry",
            "parameters":                   [{"parm_type":null,"parm_name":"gem"},{"parm_type":"\">= 0\"","parm_name":"ver_require"},{"parm_type":"false","parm_name":"for_writing"}],
            "path":                         "YARD::Registry.yardoc_file_for_gem",
            "scope":                        "class",
            "signature":                    "def yardoc_file_for_gem(gem, ver_require = \">= 0\", for_writing = false)",
            "source":                       "def yardoc_file_for_gem(gem, ver_require = \">= 0\", for_writing = false)\n  spec = Gem.source_index.find_name(gem, ver_require)\n  return if spec.empty?\n  spec = spec.first\n\n  if gem =~ /^yard-doc-/\n    path = File.join(spec.full_gem_path, DEFAULT_YARDOC_FILE)\n    return File.exist?(path) && !for_writing ? path : nil\n  end\n\n  if for_writing\n    global_yardoc_file(spec, for_writing) ||\n      local_yardoc_file(spec, for_writing)\n  else\n    local_yardoc_file(spec, for_writing) ||\n      global_yardoc_file(spec, for_writing)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry.yardoc_file_for_gem"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/registry.rb"}],
            "name":                         "DEFAULT_YARDOC_FILE",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry::DEFAULT_YARDOC_FILE",
            "signature":                    "DEFAULT_YARDOC_FILE = \".yardoc\"",
            "source":                       "DEFAULT_YARDOC_FILE = \".yardoc\"",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "\".yardoc\"",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry%3A%3ADEFAULT_YARDOC_FILE"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/registry.rb"}],
            "name":                         "LOCAL_YARDOC_INDEX",
            "namespace":                    "YARD::Registry",
            "path":                         "YARD::Registry::LOCAL_YARDOC_INDEX",
            "signature":                    "LOCAL_YARDOC_INDEX = File.expand_path('~/.yard/gem_index')",
            "source":                       "LOCAL_YARDOC_INDEX = File.expand_path('~/.yard/gem_index')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.expand_path('~/.yard/gem_index')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fregistry.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistry%3A%3ALOCAL_YARDOC_INDEX"
        },
        {
            "aliases":                      {"YARD::RegistryStore#[]=":"put","YARD::RegistryStore#[]":"get"},
            "attributes":                   {"class":{},"instance":{"file":{"write":null,"read":"YARD::RegistryStore#file"},"proxy_types":{"write":null,"read":"YARD::RegistryStore#proxy_types"},"checksums":{"write":null,"read":"YARD::RegistryStore#checksums"}}},
            "children":                     ["YARD::RegistryStore#proxy_types","YARD::RegistryStore#file","YARD::RegistryStore#checksums","YARD::RegistryStore#initialize","YARD::RegistryStore#get","YARD::RegistryStore#put","YARD::RegistryStore#[]","YARD::RegistryStore#[]=","YARD::RegistryStore#delete","YARD::RegistryStore#keys","YARD::RegistryStore#values","YARD::RegistryStore#paths_for_type","YARD::RegistryStore#values_for_type","YARD::RegistryStore#root","YARD::RegistryStore#load","YARD::RegistryStore#load!","YARD::RegistryStore#load_all","YARD::RegistryStore#save","YARD::RegistryStore#destroy","YARD::RegistryStore#objects_path","YARD::RegistryStore#proxy_types_path","YARD::RegistryStore#checksums_path","YARD::RegistryStore#object_types_path","YARD::RegistryStore#load_yardoc","YARD::RegistryStore#load_yardoc_old","YARD::RegistryStore#load_proxy_types","YARD::RegistryStore#load_object_types","YARD::RegistryStore#load_checksums","YARD::RegistryStore#load_root","YARD::RegistryStore#all_disk_objects","YARD::RegistryStore#write_proxy_types","YARD::RegistryStore#write_object_types","YARD::RegistryStore#write_checksums"],
            "current_file_has_comments":    true,
            "docstring":                    "The data store for the {Registry}.",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "RegistryStore",
            "namespace":                    "YARD",
            "path":                         "YARD::RegistryStore",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ARegistryStore%23proxy_types","YARD%3A%3ARegistryStore%23file","YARD%3A%3ARegistryStore%23checksums","YARD%3A%3ARegistryStore%23initialize","YARD%3A%3ARegistryStore%23get","YARD%3A%3ARegistryStore%23put","YARD%3A%3ARegistryStore%23%5B%5D","YARD%3A%3ARegistryStore%23%5B%5D%3D","YARD%3A%3ARegistryStore%23delete","YARD%3A%3ARegistryStore%23keys","YARD%3A%3ARegistryStore%23values","YARD%3A%3ARegistryStore%23paths_for_type","YARD%3A%3ARegistryStore%23values_for_type","YARD%3A%3ARegistryStore%23root","YARD%3A%3ARegistryStore%23load","YARD%3A%3ARegistryStore%23load%21","YARD%3A%3ARegistryStore%23load_all","YARD%3A%3ARegistryStore%23save","YARD%3A%3ARegistryStore%23destroy","YARD%3A%3ARegistryStore%23objects_path","YARD%3A%3ARegistryStore%23proxy_types_path","YARD%3A%3ARegistryStore%23checksums_path","YARD%3A%3ARegistryStore%23object_types_path","YARD%3A%3ARegistryStore%23load_yardoc","YARD%3A%3ARegistryStore%23load_yardoc_old","YARD%3A%3ARegistryStore%23load_proxy_types","YARD%3A%3ARegistryStore%23load_object_types","YARD%3A%3ARegistryStore%23load_checksums","YARD%3A%3ARegistryStore%23load_root","YARD%3A%3ARegistryStore%23all_disk_objects","YARD%3A%3ARegistryStore%23write_proxy_types","YARD%3A%3ARegistryStore%23write_object_types","YARD%3A%3ARegistryStore%23write_checksums"],
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ARegistryStore",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "Gets a {CodeObjects::Base} from the store",
            "dynamic":                      true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "[]",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#[]",
            "scope":                        "instance",
            "signature":                    "def get(key)",
            "source":                       "def get(key)\n  key = :root if key == ''\n  key = key.to_sym\n  return @store[key] if @store[key]\n  return if @loaded_objects >= @available_objects\n\n  # check disk\n  return if @notfound[key]\n  if obj = @serializer.deserialize(key)\n    @loaded_objects += 1\n    put(key, obj)\n  else\n    @notfound[key] = true\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23%5B%5D"
        },
        {
            "docstring":                    "Associates an object with a path",
            "dynamic":                      true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "[]=",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#[]=",
            "scope":                        "instance",
            "signature":                    "def put(key, value)",
            "source":                       "def put(key, value)\n  if key == ''\n    @object_types[:root] = [:root]\n    @store[:root] = value\n  else\n    @notfound.delete(key.to_sym)\n    (@object_types[value.type] ||= []) << key.to_s\n    if @store[key.to_sym]\n      @object_types[@store[key.to_sym].type].delete(key.to_s)\n    end\n    @store[key.to_sym] = value\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23%5B%5D%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":282,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "all_disk_objects",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#all_disk_objects",
            "scope":                        "instance",
            "signature":                    "def all_disk_objects",
            "source":                       "def all_disk_objects\n  Dir.glob(File.join(objects_path, '**/*')).select {|f| File.file?(f) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":282,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23all_disk_objects"
        },
        {
            "docstring":                    "Returns the value of attribute checksums",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "checksums",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#checksums",
            "scope":                        "instance",
            "signature":                    "def checksums",
            "source":                       "def checksums\n  @checksums\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23checksums"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":214,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "checksums_path",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#checksums_path",
            "scope":                        "instance",
            "signature":                    "def checksums_path",
            "source":                       "def checksums_path\n  @serializer.checksums_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":214,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23checksums_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes an object at a given path",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "delete",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "YARD::RegistryStore#delete",
            "scope":                        "instance",
            "signature":                    "def delete(key) @store.delete(key.to_sym) end",
            "source":                       "def delete(key) @store.delete(key.to_sym) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23delete"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Deletes the .yardoc database on disk",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":190,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "destroy",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"false","parm_name":"force"}],
            "path":                         "YARD::RegistryStore#destroy",
            "scope":                        "instance",
            "signature":                    "def destroy(force = false)",
            "source":                       "def destroy(force = false)\n  if (!force && file =~ /\\.yardoc$/) || force\n    if File.file?(@file)\n      # Handle silent upgrade of old .yardoc format\n      File.unlink(@file)\n    elsif File.directory?(@file)\n      FileUtils.rm_rf(@file)\n    end\n    true\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":190,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23destroy"
        },
        {
            "docstring":                    "Returns the value of attribute file",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#file",
            "scope":                        "instance",
            "signature":                    "def file",
            "source":                       "def file\n  @file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets a {CodeObjects::Base} from the store",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "get",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":null,"parm_name":"key"}],
            "path":                         "YARD::RegistryStore#get",
            "scope":                        "instance",
            "signature":                    "def get(key)",
            "source":                       "def get(key)\n  key = :root if key == ''\n  key = key.to_sym\n  return @store[key] if @store[key]\n  return if @loaded_objects >= @available_objects\n\n  # check disk\n  return if @notfound[key]\n  if obj = @serializer.deserialize(key)\n    @loaded_objects += 1\n    put(key, obj)\n  else\n    @notfound[key] = true\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23get"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize",
            "source":                       "def initialize\n  @file = nil\n  @checksums = {}\n  @store = {}\n  @proxy_types = {}\n  @object_types = {:root => [:root]}\n  @notfound = {}\n  @loaded_objects = 0\n  @available_objects = 0\n  @store[:root] = CodeObjects::RootObject.allocate\n  @store[:root].send(:initialize, nil, :root)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets all path names from the store. Loads the entire database\nif +reload+ is +true+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "keys",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"false","parm_name":"reload"}],
            "path":                         "YARD::RegistryStore#keys",
            "scope":                        "instance",
            "signature":                    "def keys(reload = false) load_all if reload; @store.keys end",
            "source":                       "def keys(reload = false) load_all if reload; @store.keys end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23keys"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"nil","parm_name":"file"}],
            "path":                         "YARD::RegistryStore#load",
            "scope":                        "instance",
            "signature":                    "def load(file = nil)",
            "source":                       "def load(file = nil)\n  @file = file\n  @store = {}\n  @proxy_types = {}\n  @object_types = {}\n  @notfound = {}\n  @serializer = Serializers::YardocSerializer.new(@file)\n  load_yardoc\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads the .yardoc file and loads all cached objects into memory\nautomatically.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load!",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"nil","parm_name":"file"}],
            "path":                         "YARD::RegistryStore#load!",
            "scope":                        "instance",
            "signature":                    "def load!(file = nil)",
            "source":                       "def load!(file = nil)\n  if load(file)\n    load_all\n    true\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads all cached objects into memory",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":139,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_all",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_all",
            "scope":                        "instance",
            "signature":                    "def load_all",
            "source":                       "def load_all\n  return unless @file\n  return if @loaded_objects >= @available_objects\n  log.debug \"Loading entire database: #{@file} ...\"\n  objects = []\n\n  all_disk_objects.sort_by {|x| x.size }.each do |path|\n    if obj = @serializer.deserialize(path, true)\n      objects << obj\n    end\n  end\n  objects.each do |obj|\n    put(obj.path, obj)\n  end\n  @loaded_objects += objects.size\n  log.debug \"Loaded database (file='#{@file}' count=#{objects.size} total=#{@available_objects})\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":139,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_all"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":261,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_checksums",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_checksums",
            "scope":                        "instance",
            "signature":                    "def load_checksums",
            "source":                       "def load_checksums\n  return unless File.file?(checksums_path)\n  lines = File.readlines(checksums_path).map do |line|\n    line.strip.split(/\\s+/)\n  end\n  @checksums = Hash[lines]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":261,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_checksums"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":251,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_object_types",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_object_types",
            "scope":                        "instance",
            "signature":                    "def load_object_types",
            "source":                       "def load_object_types\n  if File.file?(object_types_path)\n    @object_types = Marshal.load(File.read_binary(object_types_path))\n  else # migrate db without object_types\n    values.each do |object|\n      (@object_types[object.type] ||= []) << object.path\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":251,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_object_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":246,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_proxy_types",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_proxy_types",
            "scope":                        "instance",
            "signature":                    "def load_proxy_types",
            "source":                       "def load_proxy_types\n  return unless File.file?(proxy_types_path)\n  @proxy_types = Marshal.load(File.read_binary(proxy_types_path))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":246,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_proxy_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":269,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_root",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_root",
            "scope":                        "instance",
            "signature":                    "def load_root",
            "source":                       "def load_root\n  if root = @serializer.deserialize('root')\n    @loaded_objects += 1\n    if root.is_a?(Hash) # single object db\n      log.debug \"Loading single object DB from .yardoc\"\n      @loaded_objects += (root.keys.size - 1)\n      @store = root\n    else # just the root object\n      @store[:root] = root\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":269,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_root"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":222,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_yardoc",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_yardoc",
            "scope":                        "instance",
            "signature":                    "def load_yardoc",
            "source":                       "def load_yardoc\n  return false unless @file\n  if File.directory?(@file) # new format\n    @loaded_objects = 0\n    @available_objects = all_disk_objects.size\n    load_proxy_types\n    load_checksums\n    load_root\n    load_object_types\n    true\n  elsif File.file?(@file) # old format\n    load_yardoc_old\n    true\n  else\n    false\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":222,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_yardoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":242,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "load_yardoc_old",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#load_yardoc_old",
            "scope":                        "instance",
            "signature":                    "def load_yardoc_old",
            "source":                       "def load_yardoc_old\n  @store, @proxy_types = *Marshal.load(File.read_binary(@file))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":242,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23load_yardoc_old"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":218,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "object_types_path",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#object_types_path",
            "scope":                        "instance",
            "signature":                    "def object_types_path",
            "source":                       "def object_types_path\n  @serializer.object_types_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":218,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23object_types_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":206,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "objects_path",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#objects_path",
            "scope":                        "instance",
            "signature":                    "def objects_path",
            "source":                       "def objects_path\n  @serializer.objects_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":206,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23objects_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "paths_for_type",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":"false","parm_name":"reload"}],
            "path":                         "YARD::RegistryStore#paths_for_type",
            "scope":                        "instance",
            "signature":                    "def paths_for_type(type, reload = false)",
            "source":                       "def paths_for_type(type, reload = false)\n  load_all if reload\n  @object_types[type] || []\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23paths_for_type"
        },
        {
            "docstring":                    "Returns the value of attribute proxy_types",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "proxy_types",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#proxy_types",
            "scope":                        "instance",
            "signature":                    "def proxy_types",
            "source":                       "def proxy_types\n  @proxy_types\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23proxy_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":210,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "proxy_types_path",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#proxy_types_path",
            "scope":                        "instance",
            "signature":                    "def proxy_types_path",
            "source":                       "def proxy_types_path\n  @serializer.proxy_types_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":210,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23proxy_types_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Associates an object with a path",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "put",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":null,"parm_name":"key"},{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::RegistryStore#put",
            "scope":                        "instance",
            "signature":                    "def put(key, value)",
            "source":                       "def put(key, value)\n  if key == ''\n    @object_types[:root] = [:root]\n    @store[:root] = value\n  else\n    @notfound.delete(key.to_sym)\n    (@object_types[value.type] ||= []) << key.to_s\n    if @store[key.to_sym]\n      @object_types[@store[key.to_sym].type].delete(key.to_s)\n    end\n    @store[key.to_sym] = value\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23put"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":107,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "root",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#root",
            "scope":                        "instance",
            "signature":                    "def root; @store[:root] end",
            "source":                       "def root; @store[:root] end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":107,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23root"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Saves the database to disk",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "save",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"true","parm_name":"merge"},{"parm_type":"nil","parm_name":"file"}],
            "path":                         "YARD::RegistryStore#save",
            "scope":                        "instance",
            "signature":                    "def save(merge = true, file = nil)",
            "source":                       "def save(merge = true, file = nil)\n  if file && file != @file\n    @file = file\n    @serializer = Serializers::YardocSerializer.new(@file)\n  end\n  destroy unless merge\n\n  sdb = Registry.single_object_db\n  if sdb == true || sdb == nil\n    @serializer.serialize(@store)\n  else\n    values(false).each do |object|\n      @serializer.serialize(object)\n    end\n  end\n  write_proxy_types\n  write_object_types\n  write_checksums\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23save"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets all code objects from the store. Loads the entire database\nif +reload+ is +true+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":86,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "values",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":"false","parm_name":"reload"}],
            "path":                         "YARD::RegistryStore#values",
            "scope":                        "instance",
            "signature":                    "def values(reload = false) load_all if reload; @store.values end",
            "source":                       "def values(reload = false) load_all if reload; @store.values end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":86,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23values"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":101,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "values_for_type",
            "namespace":                    "YARD::RegistryStore",
            "parameters":                   [{"parm_type":null,"parm_name":"type"},{"parm_type":"false","parm_name":"reload"}],
            "path":                         "YARD::RegistryStore#values_for_type",
            "scope":                        "instance",
            "signature":                    "def values_for_type(type, reload = false)",
            "source":                       "def values_for_type(type, reload = false)\n  load_all if reload\n  paths_for_type(type).map {|t| @store[t.to_sym] }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":101,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23values_for_type"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":294,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "write_checksums",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#write_checksums",
            "scope":                        "instance",
            "signature":                    "def write_checksums",
            "source":                       "def write_checksums\n  File.open!(checksums_path, 'w') do |f|\n    @checksums.each {|k, v| f.puts(\"#{k} #{v}\") }\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":294,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23write_checksums"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":290,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "write_object_types",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#write_object_types",
            "scope":                        "instance",
            "signature":                    "def write_object_types",
            "source":                       "def write_object_types\n  File.open!(object_types_path, 'wb') {|f| f.write(Marshal.dump(@object_types)) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":290,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23write_object_types"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":286,"file_path":"lib/yard/registry_store.rb"}],
            "name":                         "write_proxy_types",
            "namespace":                    "YARD::RegistryStore",
            "path":                         "YARD::RegistryStore#write_proxy_types",
            "scope":                        "instance",
            "signature":                    "def write_proxy_types",
            "source":                       "def write_proxy_types\n  File.open!(proxy_types_path, 'wb') {|f| f.write(Marshal.dump(@proxy_types)) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":286,"file_path":"lib%2Fyard%2Fregistry_store.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ARegistryStore%23write_proxy_types"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Serializers::Base","YARD::Serializers::YardocSerializer","YARD::Serializers::StdoutSerializer","YARD::Serializers::ProcessSerializer","YARD::Serializers::FileSystemSerializer"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for components that serialize to various endpoints",
            "dynamic":                      true,
            "files":                        [{"file_line":178,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/serializers/base.rb"},{"file_line":28,"file_path":"lib/yard/serializers/yardoc_serializer.rb"},{"file_line":2,"file_path":"lib/yard/serializers/stdout_serializer.rb"},{"file_line":2,"file_path":"lib/yard/serializers/process_serializer.rb"},{"file_line":2,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "Serializers",
            "namespace":                    "YARD",
            "path":                         "YARD::Serializers",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3ABase","YARD%3A%3ASerializers%3A%3AYardocSerializer","YARD%3A%3ASerializers%3A%3AStdoutSerializer","YARD%3A%3ASerializers%3A%3AProcessSerializer","YARD%3A%3ASerializers%3A%3AFileSystemSerializer"],
            "y_ld:files":                   [{"file_line":178,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"},{"file_line":28,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserializers%2Fprocess_serializer.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ASerializers"
        },
        {
            "attributes":                   {"class":{},"instance":{"options":{"write":null,"read":"YARD::Serializers::Base#options"}}},
            "children":                     ["YARD::Serializers::Base#options","YARD::Serializers::Base#initialize","YARD::Serializers::Base#serialize","YARD::Serializers::Base#serialized_path","YARD::Serializers::Base#exists?","YARD::Serializers::Base#before_serialize","YARD::Serializers::Base#after_serialize"],
            "current_file_has_comments":    true,
            "docstring":                    "The abstract base serializer. Serializers allow templates to be\nrendered to various endpoints. For instance, a {FileSystemSerializer}\nwould allow template contents to be written to the filesystem\n\nTo implement a custom serializer, override the following methods:\n* {#serialize}\n* {#serialized_path}\n\nOptionally, a serializer can implement before and after filters:\n* {#before_serialize}\n* {#after_serialize}",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/serializers/base.rb"}],
            "groups":                       ["Creating a New Serializer","Serializing an Object","Callbacks"],
            "name":                         "Base",
            "namespace":                    "YARD::Serializers",
            "path":                         "YARD::Serializers::Base",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3ABase%23options","YARD%3A%3ASerializers%3A%3ABase%23initialize","YARD%3A%3ASerializers%3A%3ABase%23serialize","YARD%3A%3ASerializers%3A%3ABase%23serialized_path","YARD%3A%3ASerializers%3A%3ABase%23exists%3F","YARD%3A%3ASerializers%3A%3ABase%23before_serialize","YARD%3A%3ASerializers%3A%3ABase%23after_serialize"],
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called after serialization.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Callbacks",
            "name":                         "after_serialize",
            "namespace":                    "YARD::Serializers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Serializers::Base#after_serialize",
            "scope":                        "instance",
            "signature":                    "def after_serialize(data) end",
            "source":                       "def after_serialize(data) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23after_serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called before serialization.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Callbacks",
            "name":                         "before_serialize",
            "namespace":                    "YARD::Serializers::Base",
            "path":                         "YARD::Serializers::Base#before_serialize",
            "scope":                        "instance",
            "signature":                    "def before_serialize; end",
            "source":                       "def before_serialize; end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23before_serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns whether an object has been serialized",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Serializing an Object",
            "name":                         "exists?",
            "namespace":                    "YARD::Serializers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::Base#exists?",
            "scope":                        "instance",
            "signature":                    "def exists?(object) false end",
            "source":                       "def exists?(object) false end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23exists%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new serializer with options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Creating a New Serializer",
            "name":                         "initialize",
            "namespace":                    "YARD::Serializers::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Serializers::Base#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(opts = {})",
            "source":                       "def initialize(opts = {})\n  @options = SymbolHash.new(false).update(opts)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "All serializer options are saved so they can be passed to other serializers.",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/serializers/base.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Serializers::Base",
            "path":                         "YARD::Serializers::Base#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Serializes an object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Serializing an Object",
            "name":                         "serialize",
            "namespace":                    "YARD::Serializers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Serializers::Base#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize(object, data) end",
            "source":                       "def serialize(object, data) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The serialized path of an object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":50,"file_path":"lib/yard/serializers/base.rb"}],
            "group":                        "Serializing an Object",
            "name":                         "serialized_path",
            "namespace":                    "YARD::Serializers::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::Base#serialized_path",
            "scope":                        "instance",
            "signature":                    "def serialized_path(object) end",
            "source":                       "def serialized_path(object) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":50,"file_path":"lib%2Fyard%2Fserializers%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3ABase%23serialized_path"
        },
        {
            "attributes":                   {"class":{},"instance":{"extension":{"write":"YARD::Serializers::FileSystemSerializer#extension=","read":"YARD::Serializers::FileSystemSerializer#extension"},"basepath":{"write":"YARD::Serializers::FileSystemSerializer#basepath=","read":"YARD::Serializers::FileSystemSerializer#basepath"}}},
            "children":                     ["YARD::Serializers::FileSystemSerializer#basepath","YARD::Serializers::FileSystemSerializer#basepath=","YARD::Serializers::FileSystemSerializer#extension","YARD::Serializers::FileSystemSerializer#extension=","YARD::Serializers::FileSystemSerializer#initialize","YARD::Serializers::FileSystemSerializer#serialize","YARD::Serializers::FileSystemSerializer#serialized_path","YARD::Serializers::FileSystemSerializer#exists?","YARD::Serializers::FileSystemSerializer#encode_path_components"],
            "current_file_has_comments":    true,
            "docstring":                    "Implements a serializer that reads from and writes to the filesystem.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "FileSystemSerializer",
            "namespace":                    "YARD::Serializers",
            "path":                         "YARD::Serializers::FileSystemSerializer",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Serializers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23basepath","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23basepath%3D","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23extension","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23extension%3D","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23initialize","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23serialize","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23serialized_path","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23exists%3F","YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23encode_path_components"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer",
            "y_ld:superclass":              "YARD%3A%3ASerializers%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The base path to write data to.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "basepath",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "path":                         "YARD::Serializers::FileSystemSerializer#basepath",
            "scope":                        "instance",
            "signature":                    "def basepath",
            "source":                       "def basepath\n  @basepath\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23basepath"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "basepath=",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#basepath=",
            "scope":                        "instance",
            "signature":                    "def basepath=(value)",
            "source":                       "def basepath=(value)\n  @basepath = options[:basepath] = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23basepath%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Remove special chars from filenames.\nWindows disallows \\ / : * ? \" < > | but we will just remove any\nnon alphanumeric (plus period, underscore and dash).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":78,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "encode_path_components",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"*components"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#encode_path_components",
            "scope":                        "instance",
            "signature":                    "def encode_path_components(*components)",
            "source":                       "def encode_path_components(*components)\n  components.map! do |p|\n    p.gsub(/[^\\w\\.-]/) do |x|\n      encoded = '_'\n\n      x.each_byte { |b| encoded << (\"%X\" % b) }\n      encoded\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":78,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23encode_path_components"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Checks the disk for an object and returns whether it was serialized.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":69,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "exists?",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#exists?",
            "scope":                        "instance",
            "signature":                    "def exists?(object)",
            "source":                       "def exists?(object)\n  File.exist?(File.join(basepath, serialized_path(object)))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":69,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23exists%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The extension of the filename (defaults to +html+)",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "extension",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "path":                         "YARD::Serializers::FileSystemSerializer#extension",
            "scope":                        "instance",
            "signature":                    "def extension",
            "source":                       "def extension\n  @extension\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23extension"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "extension=",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#extension=",
            "scope":                        "instance",
            "signature":                    "def extension=(value)",
            "source":                       "def extension=(value)\n  @extension = options[:extension] = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23extension%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new FileSystemSerializer with options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(opts = {})",
            "source":                       "def initialize(opts = {})\n  super\n  @basepath = (options[:basepath] || 'doc').to_s\n  @extension = (options.has_key?(:extension) ? options[:extension] : 'html').to_s\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Serializes object with data to its serialized path (prefixed by the +#basepath+).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize(object, data)",
            "source":                       "def serialize(object, data)\n  path = File.join(basepath, serialized_path(object))\n  log.debug \"Serializing to #{path}\"\n  File.open!(path, \"wb\") {|f| f.write data }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Implements the serialized path of a code object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/serializers/file_system_serializer.rb"}],
            "name":                         "serialized_path",
            "namespace":                    "YARD::Serializers::FileSystemSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::FileSystemSerializer#serialized_path",
            "scope":                        "instance",
            "signature":                    "def serialized_path(object)",
            "source":                       "def serialized_path(object)\n  return object if object.is_a?(String)\n\n  if object.is_a?(CodeObjects::ExtraFileObject)\n    fspath = ['file.' + object.name + (extension.empty? ? '' : \".#{extension}\")]\n  else\n    objname = object != YARD::Registry.root ? object.name.to_s : \"top-level-namespace\"\n    objname += '_' + object.scope.to_s[0,1] if object.is_a?(CodeObjects::MethodObject)\n    fspath = [objname + (extension.empty? ? '' : \".#{extension}\")]\n    if object.namespace && object.namespace.path != \"\"\n      fspath.unshift(*object.namespace.path.split(CodeObjects::NSEP))\n    end\n  end\n\n  File.join(encode_path_components(*fspath))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fserializers%2Ffile_system_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AFileSystemSerializer%23serialized_path"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Serializers::ProcessSerializer#initialize","YARD::Serializers::ProcessSerializer#serialize"],
            "current_file_has_comments":    true,
            "docstring":                    "Serializes an object to a process (like less)",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/serializers/process_serializer.rb"}],
            "name":                         "ProcessSerializer",
            "namespace":                    "YARD::Serializers",
            "path":                         "YARD::Serializers::ProcessSerializer",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Serializers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3AProcessSerializer%23initialize","YARD%3A%3ASerializers%3A%3AProcessSerializer%23serialize"],
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserializers%2Fprocess_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AProcessSerializer",
            "y_ld:superclass":              "YARD%3A%3ASerializers%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new ProcessSerializer for the shell command +cmd+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/serializers/process_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Serializers::ProcessSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"cmd"}],
            "path":                         "YARD::Serializers::ProcessSerializer#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(cmd)",
            "source":                       "def initialize(cmd)\n  @cmd = cmd\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fserializers%2Fprocess_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AProcessSerializer%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Overrides serialize behaviour and writes data to standard input\nof the associated command",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/serializers/process_serializer.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Serializers::ProcessSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Serializers::ProcessSerializer#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize(object, data)",
            "source":                       "def serialize(object, data)\n  IO.popen(@cmd, 'w') {|io| io.write(data) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Fserializers%2Fprocess_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AProcessSerializer%23serialize"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Serializers::StdoutSerializer#initialize","YARD::Serializers::StdoutSerializer#serialize","YARD::Serializers::StdoutSerializer#word_wrap"],
            "current_file_has_comments":    true,
            "docstring":                    "A serializer that writes data to standard output.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/serializers/stdout_serializer.rb"}],
            "name":                         "StdoutSerializer",
            "namespace":                    "YARD::Serializers",
            "path":                         "YARD::Serializers::StdoutSerializer",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Serializers::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3AStdoutSerializer%23initialize","YARD%3A%3ASerializers%3A%3AStdoutSerializer%23serialize","YARD%3A%3ASerializers%3A%3AStdoutSerializer%23word_wrap"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AStdoutSerializer",
            "y_ld:superclass":              "YARD%3A%3ASerializers%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a serializer to print text to stdout",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/serializers/stdout_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Serializers::StdoutSerializer",
            "parameters":                   [{"parm_type":"nil","parm_name":"wrap"}],
            "path":                         "YARD::Serializers::StdoutSerializer#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(wrap = nil)",
            "source":                       "def initialize(wrap = nil)\n  @wrap = wrap\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AStdoutSerializer%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Overrides serialize behaviour to write data to standard output",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/serializers/stdout_serializer.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Serializers::StdoutSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Serializers::StdoutSerializer#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize(object, data)",
            "source":                       "def serialize(object, data)\n  print(@wrap ? word_wrap(data, @wrap) : data)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AStdoutSerializer%23serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Wraps text to a specific column length",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/serializers/stdout_serializer.rb"}],
            "name":                         "word_wrap",
            "namespace":                    "YARD::Serializers::StdoutSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"80","parm_name":"length"}],
            "path":                         "YARD::Serializers::StdoutSerializer#word_wrap",
            "scope":                        "instance",
            "signature":                    "def word_wrap(text, length = 80)",
            "source":                       "def word_wrap(text, length = 80)\n  # See ruby-talk/10655 / Ernest Ellingson\n  text.gsub(/\\t/,\"     \").gsub(/.{1,50}(?:\\s|\\Z)/){($& +\n    5.chr).gsub(/\\n\\005/,\"\\n\").gsub(/\\005/,\"\\n\")}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Fserializers%2Fstdout_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AStdoutSerializer%23word_wrap"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Serializers::YardocSerializer#initialize","YARD::Serializers::YardocSerializer#objects_path","YARD::Serializers::YardocSerializer#proxy_types_path","YARD::Serializers::YardocSerializer#checksums_path","YARD::Serializers::YardocSerializer#object_types_path","YARD::Serializers::YardocSerializer#serialized_path","YARD::Serializers::YardocSerializer#serialize","YARD::Serializers::YardocSerializer#deserialize","YARD::Serializers::YardocSerializer#dump","YARD::Serializers::YardocSerializer#internal_dump"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "YardocSerializer",
            "namespace":                    "YARD::Serializers",
            "path":                         "YARD::Serializers::YardocSerializer",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Serializers::FileSystemSerializer",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ASerializers%3A%3AYardocSerializer%23initialize","YARD%3A%3ASerializers%3A%3AYardocSerializer%23objects_path","YARD%3A%3ASerializers%3A%3AYardocSerializer%23proxy_types_path","YARD%3A%3ASerializers%3A%3AYardocSerializer%23checksums_path","YARD%3A%3ASerializers%3A%3AYardocSerializer%23object_types_path","YARD%3A%3ASerializers%3A%3AYardocSerializer%23serialized_path","YARD%3A%3ASerializers%3A%3AYardocSerializer%23serialize","YARD%3A%3ASerializers%3A%3AYardocSerializer%23deserialize","YARD%3A%3ASerializers%3A%3AYardocSerializer%23dump","YARD%3A%3ASerializers%3A%3AYardocSerializer%23internal_dump"],
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer",
            "y_ld:superclass":              "YARD%3A%3ASerializers%3A%3AFileSystemSerializer"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "checksums_path",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "path":                         "YARD::Serializers::YardocSerializer#checksums_path",
            "scope":                        "instance",
            "signature":                    "def checksums_path; File.join(basepath, 'checksums') end",
            "source":                       "def checksums_path; File.join(basepath, 'checksums') end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23checksums_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":72,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "deserialize",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"path"},{"parm_type":"false","parm_name":"is_path"}],
            "path":                         "YARD::Serializers::YardocSerializer#deserialize",
            "scope":                        "instance",
            "signature":                    "def deserialize(path, is_path = false)",
            "source":                       "def deserialize(path, is_path = false)\n  path = File.join(basepath, serialized_path(path)) unless is_path\n  if File.file?(path)\n    log.debug \"Deserializing #{path}...\"\n    Marshal.load(File.read_binary(path))\n  else\n    log.debug \"Could not find #{path}\"\n    nil\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":72,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23deserialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":85,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "dump",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::YardocSerializer#dump",
            "scope":                        "instance",
            "signature":                    "def dump(object)",
            "source":                       "def dump(object)\n  object = internal_dump(object, true) unless object.is_a?(Hash)\n  Marshal.dump(object)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":85,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23dump"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"yfile"}],
            "path":                         "YARD::Serializers::YardocSerializer#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(yfile)",
            "source":                       "def initialize(yfile)\n  super(:basepath => yfile, :extension => 'dat')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "internal_dump",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"false","parm_name":"first_object"}],
            "path":                         "YARD::Serializers::YardocSerializer#internal_dump",
            "scope":                        "instance",
            "signature":                    "def internal_dump(object, first_object = false)",
            "source":                       "def internal_dump(object, first_object = false)\n  if !first_object && object.is_a?(CodeObjects::Base) &&\n      !(Tags::OverloadTag === object)\n    return StubProxy.new(object.path)\n  end\n\n  if object.is_a?(Hash) || object.is_a?(Array) ||\n      object.is_a?(CodeObjects::Base) ||\n      object.instance_variables.size > 0\n    object = object.dup\n  end\n\n  object.instance_variables.each do |ivar|\n    ivar_obj = object.instance_variable_get(ivar)\n    ivar_obj_dump = internal_dump(ivar_obj)\n    object.instance_variable_set(ivar, ivar_obj_dump)\n  end\n\n  case object\n  when Hash\n    list = object.map do |k, v|\n      [k, v].map {|item| internal_dump(item) }\n    end\n    object.replace(Hash[list])\n  when Array\n    list = object.map {|item| internal_dump(item) }\n    object.replace(list)\n  end\n\n  object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23internal_dump"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "object_types_path",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "path":                         "YARD::Serializers::YardocSerializer#object_types_path",
            "scope":                        "instance",
            "signature":                    "def object_types_path; File.join(basepath, 'object_types') end",
            "source":                       "def object_types_path; File.join(basepath, 'object_types') end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23object_types_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "objects_path",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "path":                         "YARD::Serializers::YardocSerializer#objects_path",
            "scope":                        "instance",
            "signature":                    "def objects_path; File.join(basepath, 'objects') end",
            "source":                       "def objects_path; File.join(basepath, 'objects') end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23objects_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "proxy_types_path",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "path":                         "YARD::Serializers::YardocSerializer#proxy_types_path",
            "scope":                        "instance",
            "signature":                    "def proxy_types_path; File.join(basepath, 'proxy_types') end",
            "source":                       "def proxy_types_path; File.join(basepath, 'proxy_types') end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23proxy_types_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::YardocSerializer#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize(object)",
            "source":                       "def serialize(object)\n  if Hash === object\n    super(object[:root], dump(object)) if object[:root]\n  else\n    super(object, dump(object))\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23serialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "serialized_path",
            "namespace":                    "YARD::Serializers::YardocSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Serializers::YardocSerializer#serialized_path",
            "scope":                        "instance",
            "signature":                    "def serialized_path(object)",
            "source":                       "def serialized_path(object)\n  path = case object\n  when String, Symbol\n    object = object.to_s\n    if object =~ /#/\n      object += '_i'\n    elsif object =~ /\\./\n      object += '_c'\n    end\n    object.split(/::|\\.|#/).map do |p|\n      p.gsub(/[^\\w\\.-]/) do |x|\n        encoded = '_'\n\n        x.each_byte { |b| encoded << (\"%X\" % b) }\n        encoded\n      end\n    end.join('/') + '.' + extension\n  when YARD::CodeObjects::RootObject\n    'root.dat'\n  else\n    super(object)\n  end\n  File.join('objects', path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ASerializers%3A%3AYardocSerializer%23serialized_path"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server.register_static_path","YARD::Server::Commands","YARD::Server::Router","YARD::Server::FinishRequest","YARD::Server::NotFoundError","YARD::Server::Adapter","YARD::Server::RackMiddleware","YARD::Server::RackAdapter","YARD::Server::StaticCaching","YARD::Server::LibraryNotPreparedError","YARD::Server::LibraryVersion","YARD::Server::WebrickAdapter","YARD::Server::WebrickServlet","YARD::Server::DocServerHelper","YARD::Server::DocServerSerializer"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for classes and modules that handle serving documentation over HTTP\n\n== Implementing a Custom Server\nTo customize the YARD server, see the {Adapter} and {Router} classes.\n\n== Rack Middleware\nIf you want to use the YARD server as a Rack middleware, see the documentation\nin {RackMiddleware}.",
            "dynamic":                      true,
            "files":                        [{"file_line":196,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/server.rb"},{"file_line":2,"file_path":"lib/yard/server/router.rb"},{"file_line":2,"file_path":"lib/yard/server/adapter.rb"},{"file_line":5,"file_path":"lib/yard/server/rack_adapter.rb"},{"file_line":4,"file_path":"lib/yard/server/commands/base.rb"},{"file_line":2,"file_path":"lib/yard/server/static_caching.rb"},{"file_line":4,"file_path":"lib/yard/server/library_version.rb"},{"file_line":4,"file_path":"lib/yard/server/webrick_adapter.rb"},{"file_line":2,"file_path":"lib/yard/server/doc_server_helper.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/list_command.rb"},{"file_line":4,"file_path":"lib/yard/server/doc_server_serializer.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/search_command.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/frames_command.rb"},{"file_line":4,"file_path":"lib/yard/server/commands/library_command.rb"},{"file_line":4,"file_path":"lib/yard/server/commands/static_file_command.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/display_file_command.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/library_index_command.rb"},{"file_line":2,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "Server",
            "namespace":                    "YARD",
            "path":                         "YARD::Server",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer.register_static_path","YARD%3A%3AServer%3A%3ACommands","YARD%3A%3AServer%3A%3ARouter","YARD%3A%3AServer%3A%3AFinishRequest","YARD%3A%3AServer%3A%3ANotFoundError","YARD%3A%3AServer%3A%3AAdapter","YARD%3A%3AServer%3A%3ARackMiddleware","YARD%3A%3AServer%3A%3ARackAdapter","YARD%3A%3AServer%3A%3AStaticCaching","YARD%3A%3AServer%3A%3ALibraryNotPreparedError","YARD%3A%3AServer%3A%3ALibraryVersion","YARD%3A%3AServer%3A%3AWebrickAdapter","YARD%3A%3AServer%3A%3AWebrickServlet","YARD%3A%3AServer%3A%3ADocServerHelper","YARD%3A%3AServer%3A%3ADocServerSerializer"],
            "y_ld:files":                   [{"file_line":196,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fstatic_caching.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flist_command.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_serializer.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fframes_command.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_file_command.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AServer"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a static path to be used in static asset lookup.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server.rb"}],
            "name":                         "register_static_path",
            "namespace":                    "YARD::Server",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Server.register_static_path",
            "scope":                        "class",
            "signature":                    "def self.register_static_path(path)",
            "source":                       "def self.register_static_path(path)\n  Commands::StaticFileCommand::STATIC_PATHS.push(path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer.register_static_path"
        },
        {
            "attributes":                   {"class":{},"instance":{"router":{"write":"YARD::Server::Adapter#router=","read":"YARD::Server::Adapter#router"},"libraries":{"write":"YARD::Server::Adapter#libraries=","read":"YARD::Server::Adapter#libraries"},"server_options":{"write":"YARD::Server::Adapter#server_options=","read":"YARD::Server::Adapter#server_options"},"document_root":{"write":"YARD::Server::Adapter#document_root=","read":"YARD::Server::Adapter#document_root"},"options":{"write":"YARD::Server::Adapter#options=","read":"YARD::Server::Adapter#options"}}},
            "children":                     ["YARD::Server::Adapter#document_root=","YARD::Server::Adapter#document_root","YARD::Server::Adapter#libraries=","YARD::Server::Adapter#libraries","YARD::Server::Adapter#options=","YARD::Server::Adapter#options","YARD::Server::Adapter#server_options=","YARD::Server::Adapter#server_options","YARD::Server::Adapter#router=","YARD::Server::Adapter#router","YARD::Server::Adapter.setup","YARD::Server::Adapter.shutdown","YARD::Server::Adapter#initialize","YARD::Server::Adapter#add_library","YARD::Server::Adapter#start"],
            "current_file_has_comments":    true,
            "docstring":                    "This class implements the bridge between the {Router} and the server\nbackend for a specific server type. YARD implements concrete adapters\nfor WEBrick and Rack respectively, though other adapters can be made\nfor other server architectures.\n\n== Subclassing Notes\nTo create a concrete adapter class, implement the {#start} method to\ninitiate the server backend.",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "Adapter",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::Adapter",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3AAdapter%23document_root%3D","YARD%3A%3AServer%3A%3AAdapter%23document_root","YARD%3A%3AServer%3A%3AAdapter%23libraries%3D","YARD%3A%3AServer%3A%3AAdapter%23libraries","YARD%3A%3AServer%3A%3AAdapter%23options%3D","YARD%3A%3AServer%3A%3AAdapter%23options","YARD%3A%3AServer%3A%3AAdapter%23server_options%3D","YARD%3A%3AServer%3A%3AAdapter%23server_options","YARD%3A%3AServer%3A%3AAdapter%23router%3D","YARD%3A%3AServer%3A%3AAdapter%23router","YARD%3A%3AServer%3A%3AAdapter.setup","YARD%3A%3AServer%3A%3AAdapter.shutdown","YARD%3A%3AServer%3A%3AAdapter%23initialize","YARD%3A%3AServer%3A%3AAdapter%23add_library","YARD%3A%3AServer%3A%3AAdapter%23start"],
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a library to the {#libraries} mapping for a given library object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "add_library",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"library"}],
            "path":                         "YARD::Server::Adapter#add_library",
            "scope":                        "instance",
            "signature":                    "def add_library(library)",
            "source":                       "def add_library(library)\n  libraries[library.name] ||= []\n  libraries[library.name] |= [library]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23add_library"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "document_root",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#document_root",
            "scope":                        "instance",
            "signature":                    "def document_root",
            "source":                       "def document_root\n  @document_root\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23document_root"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "document_root=",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Adapter#document_root=",
            "scope":                        "instance",
            "signature":                    "def document_root=(value)",
            "source":                       "def document_root=(value)\n  @document_root = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23document_root%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new adapter object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"libs"},{"parm_type":"{}","parm_name":"opts"},{"parm_type":"{}","parm_name":"server_opts"}],
            "path":                         "YARD::Server::Adapter#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(libs, opts = {}, server_opts = {})",
            "source":                       "def initialize(libs, opts = {}, server_opts = {})\n  self.class.setup\n  self.libraries = libs\n  self.options = opts\n  self.server_options = server_opts\n  self.document_root = server_options[:DocumentRoot]\n  self.router = (options[:router] || Router).new(self)\n  options[:adapter] = self\n  log.debug \"Serving libraries using #{self.class}: #{libraries.keys.join(', ')}\"\n  log.debug \"Caching on\" if options[:caching]\n  log.debug \"Document root: #{document_root}\" if document_root\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "libraries",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#libraries",
            "scope":                        "instance",
            "signature":                    "def libraries",
            "source":                       "def libraries\n  @libraries\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23libraries"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "libraries=",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Adapter#libraries=",
            "scope":                        "instance",
            "signature":                    "def libraries=(value)",
            "source":                       "def libraries=(value)\n  @libraries = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23libraries%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Adapter#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "router",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#router",
            "scope":                        "instance",
            "signature":                    "def router",
            "source":                       "def router\n  @router\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23router"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "router=",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Adapter#router=",
            "scope":                        "instance",
            "signature":                    "def router=(value)",
            "source":                       "def router=(value)\n  @router = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23router%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "server_options",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#server_options",
            "scope":                        "instance",
            "signature":                    "def server_options",
            "source":                       "def server_options\n  @server_options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23server_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "server_options=",
            "namespace":                    "YARD::Server::Adapter",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Adapter#server_options=",
            "scope":                        "instance",
            "signature":                    "def server_options=(value)",
            "source":                       "def server_options=(value)\n  @server_options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23server_options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Implement this method to connect your adapter to your server.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":95,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "start",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter#start",
            "scope":                        "instance",
            "signature":                    "def start",
            "source":                       "def start\n  raise NotImplementedError\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":95,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter%23start"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Performs any global initialization for the adapter.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "setup",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter.setup",
            "scope":                        "class",
            "signature":                    "def self.setup",
            "source":                       "def self.setup\n  Templates::Template.extra_includes |= [YARD::Server::DocServerHelper]\n  Templates::Engine.template_paths |= [File.dirname(__FILE__) + '/templates']\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter.setup"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Performs any global shutdown procedures for the adapter.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "shutdown",
            "namespace":                    "YARD::Server::Adapter",
            "path":                         "YARD::Server::Adapter.shutdown",
            "scope":                        "class",
            "signature":                    "def self.shutdown",
            "source":                       "def self.shutdown\n  Templates::Template.extra_includes -= [YARD::Server::DocServerHelper]\n  Templates::Engine.template_paths -= [File.dirname(__FILE__) + '/templates']\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AAdapter.shutdown"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::Base","YARD::Server::Commands::ListCommand","YARD::Server::Commands::SearchCommand","YARD::Server::Commands::FramesCommand","YARD::Server::Commands::LibraryOptions","YARD::Server::Commands::LibraryCommand","YARD::Server::Commands::StaticFileCommand","YARD::Server::Commands::DisplayFileCommand","YARD::Server::Commands::LibraryIndexCommand","YARD::Server::Commands::DisplayObjectCommand"],
            "current_file_has_comments":    true,
            "docstring":                    "Commands implement specific kinds of server responses which are routed\nto by the {Router} class. To implement a custom command, subclass {Commands::Base}.",
            "dynamic":                      true,
            "files":                        [{"file_line":201,"file_path":"lib/yard/autoload.rb"},{"file_line":5,"file_path":"lib/yard/server/commands/base.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/list_command.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/search_command.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/frames_command.rb"},{"file_line":5,"file_path":"lib/yard/server/commands/library_command.rb"},{"file_line":5,"file_path":"lib/yard/server/commands/static_file_command.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/display_file_command.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/library_index_command.rb"},{"file_line":3,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "Commands",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::Commands",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ABase","YARD%3A%3AServer%3A%3ACommands%3A%3AListCommand","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand","YARD%3A%3AServer%3A%3ACommands%3A%3AFramesCommand","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand","YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand","YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayFileCommand","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand","YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand"],
            "y_ld:files":                   [{"file_line":201,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flist_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fframes_command.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"},{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_file_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands"
        },
        {
            "attributes":                   {"class":{},"instance":{"status":{"write":"YARD::Server::Commands::Base#status=","read":"YARD::Server::Commands::Base#status"},"command_options":{"write":"YARD::Server::Commands::Base#command_options=","read":"YARD::Server::Commands::Base#command_options"},"path":{"write":"YARD::Server::Commands::Base#path=","read":"YARD::Server::Commands::Base#path"},"headers":{"write":"YARD::Server::Commands::Base#headers=","read":"YARD::Server::Commands::Base#headers"},"request":{"write":"YARD::Server::Commands::Base#request=","read":"YARD::Server::Commands::Base#request"},"caching":{"write":"YARD::Server::Commands::Base#caching=","read":"YARD::Server::Commands::Base#caching"},"body":{"write":"YARD::Server::Commands::Base#body=","read":"YARD::Server::Commands::Base#body"},"adapter":{"write":"YARD::Server::Commands::Base#adapter=","read":"YARD::Server::Commands::Base#adapter"}}},
            "children":                     ["YARD::Server::Commands::Base#command_options=","YARD::Server::Commands::Base#command_options","YARD::Server::Commands::Base#adapter=","YARD::Server::Commands::Base#adapter","YARD::Server::Commands::Base#caching=","YARD::Server::Commands::Base#caching","YARD::Server::Commands::Base#request=","YARD::Server::Commands::Base#request","YARD::Server::Commands::Base#path=","YARD::Server::Commands::Base#path","YARD::Server::Commands::Base#headers=","YARD::Server::Commands::Base#headers","YARD::Server::Commands::Base#status=","YARD::Server::Commands::Base#status","YARD::Server::Commands::Base#body=","YARD::Server::Commands::Base#body","YARD::Server::Commands::Base#initialize","YARD::Server::Commands::Base#call","YARD::Server::Commands::Base#run","YARD::Server::Commands::Base#render","YARD::Server::Commands::Base#cache","YARD::Server::Commands::Base#not_found","YARD::Server::Commands::Base#redirect"],
            "current_file_has_comments":    true,
            "docstring":                    "This is the base command class used to implement custom commands for\na server. A command will be routed to by the {Router} class and return\na Rack-style response.\n\n== Attribute Initializers\nAll attributes can be initialized via options passed into the {#initialize}\nmethod. When creating a custom command, the {Adapter#options} will\nautomatically be mapped to attributes by the same name on your class.\n\n  class MyCommand < Base\n    attr_accessor :myattr\n  end\n\n  Adapter.new(libs, {:myattr => 'foo'}).start\n\n  # when a request comes in, cmd.myattr == 'foo'\n\n== Subclassing Notes\nTo implement a custom command, override the {#run} method, not {#call}.\nIn your implementation, you should set the body and status for requests.\nSee details in the +#run+ method documentation.\n\nNote that if your command deals directly with libraries, you should\nconsider subclassing the more specific {LibraryCommand} class instead.",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/server/commands/base.rb"}],
            "groups":                       ["Basic Command and Adapter Options","Attributes Set Per Request","Instance Method Summary","Abstract Methods","Helper Methods"],
            "name":                         "Base",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::Base",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23command_options%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23command_options","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23adapter%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23adapter","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23caching%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23caching","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23request%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23request","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23path%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23path","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23headers%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23headers","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23status%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23status","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23body%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23body","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23initialize","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23call","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23run","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23render","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23cache","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23not_found","YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23redirect"],
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "adapter",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#adapter",
            "scope":                        "instance",
            "signature":                    "def adapter",
            "source":                       "def adapter\n  @adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23adapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "adapter=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#adapter=",
            "scope":                        "instance",
            "signature":                    "def adapter=(value)",
            "source":                       "def adapter=(value)\n  @adapter = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23adapter%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "body",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#body",
            "scope":                        "instance",
            "signature":                    "def body",
            "source":                       "def body\n  @body\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23body"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":60,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "body=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#body=",
            "scope":                        "instance",
            "signature":                    "def body=(value)",
            "source":                       "def body=(value)\n  @body = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":60,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23body%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Override this method to implement custom caching mechanisms for",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Helper Methods",
            "name":                         "cache",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Server::Commands::Base#cache",
            "scope":                        "instance",
            "signature":                    "def cache(data)",
            "source":                       "def cache(data)\n  if caching && adapter.document_root\n    path = File.join(adapter.document_root, request.path.sub(/\\.html$/, '') + '.html')\n    path = path.sub(%r{/\\.html$}, '.html')\n    FileUtils.mkdir_p(File.dirname(path))\n    log.debug \"Caching data to #{path}\"\n    File.open(path, 'wb') {|f| f.write(data) }\n  end\n  self.body = data\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23cache"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "caching",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#caching",
            "scope":                        "instance",
            "signature":                    "def caching",
            "source":                       "def caching\n  @caching\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23caching"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "caching=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#caching=",
            "scope":                        "instance",
            "signature":                    "def caching=(value)",
            "source":                       "def caching=(value)\n  @caching = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23caching%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The main method called by a router with a request object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":88,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Instance Method Summary",
            "name":                         "call",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"request"}],
            "path":                         "YARD::Server::Commands::Base#call",
            "scope":                        "instance",
            "signature":                    "def call(request)",
            "source":                       "def call(request)\n  self.request = request\n  self.path ||= request.path[1..-1]\n  self.headers = {'Content-Type' => 'text/html'}\n  self.body = ''\n  self.status = 200\n  begin\n    run\n  rescue FinishRequest\n  rescue NotFoundError => e\n    self.body = e.message if e.message != e.class.to_s\n    self.status = 404\n  end\n  not_found if status == 404\n  [status, headers, body.is_a?(Array) ? body : [body]]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":88,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "command_options",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#command_options",
            "scope":                        "instance",
            "signature":                    "def command_options",
            "source":                       "def command_options\n  @command_options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23command_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Basic Command and Adapter Options",
            "name":                         "command_options=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#command_options=",
            "scope":                        "instance",
            "signature":                    "def command_options=(value)",
            "source":                       "def command_options=(value)\n  @command_options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23command_options%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "headers",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#headers",
            "scope":                        "instance",
            "signature":                    "def headers",
            "source":                       "def headers\n  @headers\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23headers"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "headers=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#headers=",
            "scope":                        "instance",
            "signature":                    "def headers=(value)",
            "source":                       "def headers=(value)\n  @headers = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23headers%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new command object, setting attributes named by keys\nin the options hash. After initialization, the options hash\nis saved in {#command_options} for further inspection.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Instance Method Summary",
            "name":                         "initialize",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Server::Commands::Base#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(opts = {})",
            "source":                       "def initialize(opts = {})\n  opts.each do |key, value|\n    send(\"#{key}=\", value) if respond_to?(\"#{key}=\")\n  end\n  self.command_options = opts\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the body and headers (but not status) for a 404 response. Does\nnothing if the body is already set.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":174,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Helper Methods",
            "name":                         "not_found",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#not_found",
            "scope":                        "instance",
            "signature":                    "def not_found",
            "source":                       "def not_found\n  return unless body.empty?\n  self.body = \"Not found: #{request.path}\"\n  self.headers['Content-Type'] = 'text/plain'\n  self.headers['X-Cascade'] = 'pass'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":174,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23not_found"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "path",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  @path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "path=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#path=",
            "scope":                        "instance",
            "signature":                    "def path=(value)",
            "source":                       "def path=(value)\n  @path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23path%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the headers and status code for a redirection to a given URL",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":184,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Helper Methods",
            "name":                         "redirect",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"url"}],
            "path":                         "YARD::Server::Commands::Base#redirect",
            "scope":                        "instance",
            "signature":                    "def redirect(url)",
            "source":                       "def redirect(url)\n  headers['Location'] = url\n  self.status = 302\n  raise FinishRequest\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":184,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23redirect"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Renders a specific object if provided, or a regular template rendering\nif object is not provided.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":138,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Helper Methods",
            "name":                         "render",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":"nil","parm_name":"object"}],
            "path":                         "YARD::Server::Commands::Base#render",
            "scope":                        "instance",
            "signature":                    "def render(object = nil)",
            "source":                       "def render(object = nil)\n  case object\n  when CodeObjects::Base\n    cache object.format(options)\n  when nil\n    cache Templates::Engine.render(options)\n  else\n    cache object\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":138,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23render"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "request",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#request",
            "scope":                        "instance",
            "signature":                    "def request",
            "source":                       "def request\n  @request\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23request"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "request=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#request=",
            "scope":                        "instance",
            "signature":                    "def request=(value)",
            "source":                       "def request=(value)\n  @request = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23request%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Subclass this method to implement a custom command. This method\nshould set the {#status} and {#body}, and optionally modify the\n{#headers}. Note that +#status+ defaults to 200.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Abstract Methods",
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  raise NotImplementedError\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "status",
            "namespace":                    "YARD::Server::Commands::Base",
            "path":                         "YARD::Server::Commands::Base#status",
            "scope":                        "instance",
            "signature":                    "def status",
            "source":                       "def status\n  @status\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23status"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/server/commands/base.rb"}],
            "group":                        "Attributes Set Per Request",
            "name":                         "status=",
            "namespace":                    "YARD::Server::Commands::Base",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::Base#status=",
            "scope":                        "instance",
            "signature":                    "def status=(value)",
            "source":                       "def status=(value)\n  @status = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fbase.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ABase%23status%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::DisplayFileCommand#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Displays a README or extra file.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server/commands/display_file_command.rb"}],
            "name":                         "DisplayFileCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::DisplayFileCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::LibraryCommand",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayFileCommand%23run"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_file_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayFileCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/server/commands/display_file_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::DisplayFileCommand",
            "path":                         "YARD::Server::Commands::DisplayFileCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  ppath = library.source_path\n  filename = File.cleanpath(File.join(library.source_path, path))\n  raise NotFoundError if !File.file?(filename)\n  if filename =~ /\\.(jpe?g|gif|png|bmp)$/i\n    headers['Content-Type'] = StaticFileCommand::DefaultMimeTypes[$1.downcase] || 'text/html'\n    render IO.read(filename)\n  else\n    file = CodeObjects::ExtraFileObject.new(filename)\n    options.update(:object => Registry.root, :type => :layout, :file => file)\n    render\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_file_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayFileCommand%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::DisplayObjectCommand#run","YARD::Server::Commands::DisplayObjectCommand#index","YARD::Server::Commands::DisplayObjectCommand#not_found","YARD::Server::Commands::DisplayObjectCommand#object_path"],
            "current_file_has_comments":    true,
            "docstring":                    "Displays documentation for a specific object identified by the path",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "instance_mixins":              ["YARD::Server::DocServerHelper"],
            "name":                         "DisplayObjectCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::DisplayObjectCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::LibraryCommand",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23run","YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23index","YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23not_found","YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23object_path"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "index",
            "namespace":                    "YARD::Server::Commands::DisplayObjectCommand",
            "path":                         "YARD::Server::Commands::DisplayObjectCommand#index",
            "scope":                        "instance",
            "signature":                    "def index",
            "source":                       "def index\n  Registry.load_all\n\n  options.update(\n    :object => '_index.html',\n    :objects => Registry.all(:module, :class),\n    :type => :layout\n  )\n  render\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23index"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "not_found",
            "namespace":                    "YARD::Server::Commands::DisplayObjectCommand",
            "path":                         "YARD::Server::Commands::DisplayObjectCommand#not_found",
            "scope":                        "instance",
            "signature":                    "def not_found",
            "source":                       "def not_found\n  super\n  self.body = \"Could not find object: #{object_path}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23not_found"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "object_path",
            "namespace":                    "YARD::Server::Commands::DisplayObjectCommand",
            "path":                         "YARD::Server::Commands::DisplayObjectCommand#object_path",
            "scope":                        "instance",
            "signature":                    "def object_path",
            "source":                       "def object_path\n  return @object_path if @object_path\n  if path == \"toplevel\"\n    @object_path = :root\n  else\n    @object_path = path.sub(':', '#').gsub('/', '::').sub(/^toplevel\\b/, '').sub(/\\.html$/, '')\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23object_path"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/server/commands/display_object_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::DisplayObjectCommand",
            "path":                         "YARD::Server::Commands::DisplayObjectCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  if path.empty?\n    if options.readme\n      url = url_for_file(options.readme)\n      self.status, self.headers, self.body = *router.send(:route, url)\n      cache(body.first)\n      return\n    else\n      self.path = 'index'\n    end\n  end\n  return index if path == 'index'\n\n  if object = Registry.at(object_path)\n    options.update(:type => :layout)\n    render(object)\n  else\n    self.status = 404\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fdisplay_object_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::FramesCommand#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Displays an object wrapped in frames",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/server/commands/frames_command.rb"}],
            "name":                         "FramesCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::FramesCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::DisplayObjectCommand",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3AFramesCommand%23run"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fframes_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AFramesCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ADisplayObjectCommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/commands/frames_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::FramesCommand",
            "path":                         "YARD::Server::Commands::FramesCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  options.update(:frames => true, :type => :fulldoc)\n  tpl = fulldoc_template\n  tpl.generate_frameset\n  cache(tpl.contents)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fframes_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AFramesCommand%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{"single_library":{"write":"YARD::Server::Commands::LibraryCommand#single_library=","read":"YARD::Server::Commands::LibraryCommand#single_library"},"incremental":{"write":"YARD::Server::Commands::LibraryCommand#incremental=","read":"YARD::Server::Commands::LibraryCommand#incremental"},"options":{"write":"YARD::Server::Commands::LibraryCommand#options=","read":"YARD::Server::Commands::LibraryCommand#options"},"library":{"write":"YARD::Server::Commands::LibraryCommand#library=","read":"YARD::Server::Commands::LibraryCommand#library"},"serializer":{"write":"YARD::Server::Commands::LibraryCommand#serializer=","read":"YARD::Server::Commands::LibraryCommand#serializer"}}},
            "children":                     ["YARD::Server::Commands::LibraryCommand#library=","YARD::Server::Commands::LibraryCommand#library","YARD::Server::Commands::LibraryCommand#options=","YARD::Server::Commands::LibraryCommand#options","YARD::Server::Commands::LibraryCommand#serializer=","YARD::Server::Commands::LibraryCommand#serializer","YARD::Server::Commands::LibraryCommand#single_library=","YARD::Server::Commands::LibraryCommand#single_library","YARD::Server::Commands::LibraryCommand#incremental=","YARD::Server::Commands::LibraryCommand#incremental","YARD::Server::Commands::LibraryCommand::@@library_chdir_lock","YARD::Server::Commands::LibraryCommand#initialize","YARD::Server::Commands::LibraryCommand#call","YARD::Server::Commands::LibraryCommand#save_default_template_info","YARD::Server::Commands::LibraryCommand#restore_template_info","YARD::Server::Commands::LibraryCommand#setup_library","YARD::Server::Commands::LibraryCommand#setup_yardopts","YARD::Server::Commands::LibraryCommand#load_yardoc","YARD::Server::Commands::LibraryCommand#not_prepared","YARD::Server::Commands::LibraryCommand#fulldoc_template","YARD::Server::Commands::LibraryCommand::@@last_yardoc"],
            "current_file_has_comments":    true,
            "docstring":                    "This is the base command for all commands that deal directly with libraries.\nSome commands do not, but most (like {DisplayObjectCommand}) do. If your\ncommand deals with libraries directly, subclass this class instead.\nSee {Base} for notes on how to subclass a command.",
            "dynamic":                      true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "LibraryCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::LibraryCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23library%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23library","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23options%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23options","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23serializer%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23serializer","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23single_library%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23single_library","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23incremental%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23incremental","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%3A%3A%40%40library_chdir_lock","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23initialize","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23call","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23save_default_template_info","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23restore_template_info","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23setup_library","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23setup_yardopts","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23load_yardoc","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23not_prepared","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23fulldoc_template","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%3A%3A%40%40last_yardoc"],
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "call",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"request"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#call",
            "scope":                        "instance",
            "signature":                    "def call(request)",
            "source":                       "def call(request)\n  save_default_template_info\n  self.request = request\n  self.options = LibraryOptions.new\n  self.options.reset_defaults\n  self.options.command = self\n  setup_library\n  self.options.title = \"Documentation for #{library.name} \" +\n    (library.version ? '(' + library.version + ')' : '')\n  super\nrescue LibraryNotPreparedError\n  not_prepared\nensure\n  restore_template_info\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Hack to load a custom fulldoc template object that does\nnot do any rendering/generation. We need this to access the\ngenerate_*_list methods.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "fulldoc_template",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#fulldoc_template",
            "scope":                        "instance",
            "signature":                    "def fulldoc_template",
            "source":                       "def fulldoc_template\n  tplopts = [options.template, :fulldoc, options.format]\n  tplclass = Templates::Engine.template(*tplopts)\n  obj = Object.new.extend(tplclass)\n  class << obj; def init; end end\n  obj.class = tplclass\n  obj.send(:initialize, options)\n  class << obj\n    attr_reader :contents\n    def asset(file, contents) @contents = contents end\n  end\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23fulldoc_template"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "incremental",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#incremental",
            "scope":                        "instance",
            "signature":                    "def incremental",
            "source":                       "def incremental\n  @incremental\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23incremental"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":45,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "incremental=",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#incremental=",
            "scope":                        "instance",
            "signature":                    "def incremental=(value)",
            "source":                       "def incremental=(value)\n  @incremental = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":45,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23incremental%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(opts = {})",
            "source":                       "def initialize(opts = {})\n  super\n  self.serializer = DocServerSerializer.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "library",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#library",
            "scope":                        "instance",
            "signature":                    "def library",
            "source":                       "def library\n  @library\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23library"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "library=",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#library=",
            "scope":                        "instance",
            "signature":                    "def library=(value)",
            "source":                       "def library=(value)\n  @library = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23library%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":107,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "load_yardoc",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#load_yardoc",
            "scope":                        "instance",
            "signature":                    "def load_yardoc",
            "source":                       "def load_yardoc\n  raise LibraryNotPreparedError unless library.yardoc_file\n  if Thread.current[:__yard_last_yardoc__] == library.yardoc_file\n    log.debug \"Reusing yardoc file: #{library.yardoc_file}\"\n    return\n  end\n  Registry.clear\n  Templates::ErbCache.clear!\n  Registry.load_yardoc(library.yardoc_file)\n  Thread.current[:__yard_last_yardoc__] = library.yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":107,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23load_yardoc"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":119,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "not_prepared",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#not_prepared",
            "scope":                        "instance",
            "signature":                    "def not_prepared",
            "source":                       "def not_prepared\n  self.caching = false\n  options.update(:template => :doc_server, :type => :processing)\n  [202, {'Content-Type' => 'text/html'}, [render]]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":119,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23not_prepared"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23options%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":79,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "restore_template_info",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#restore_template_info",
            "scope":                        "instance",
            "signature":                    "def restore_template_info",
            "source":                       "def restore_template_info\n  Templates::Engine.template_paths = @old_template_paths\n  Templates::Template.extra_includes = @old_extra_includes\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":79,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23restore_template_info"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":74,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "save_default_template_info",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#save_default_template_info",
            "scope":                        "instance",
            "signature":                    "def save_default_template_info",
            "source":                       "def save_default_template_info\n  @old_template_paths = Templates::Engine.template_paths.dup\n  @old_extra_includes = Templates::Template.extra_includes.dup\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":74,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23save_default_template_info"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "serializer",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#serializer",
            "scope":                        "instance",
            "signature":                    "def serializer",
            "source":                       "def serializer\n  @serializer\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23serializer"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "serializer=",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#serializer=",
            "scope":                        "instance",
            "signature":                    "def serializer=(value)",
            "source":                       "def serializer=(value)\n  @serializer = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23serializer%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":84,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "setup_library",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#setup_library",
            "scope":                        "instance",
            "signature":                    "def setup_library",
            "source":                       "def setup_library\n  library.prepare! if request.xhr? && request.query['process']\n  load_yardoc\n  setup_yardopts\n  true\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":84,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23setup_library"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":91,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "setup_yardopts",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#setup_yardopts",
            "scope":                        "instance",
            "signature":                    "def setup_yardopts",
            "source":                       "def setup_yardopts\n  @@library_chdir_lock.synchronize do\n    Dir.chdir(library.source_path) do\n      yardoc = CLI::Yardoc.new\n      if incremental\n        yardoc.run('-c', '-n', '--no-stats')\n      else\n        yardoc.parse_arguments\n      end\n      yardoc.send(:verify_markup_options)\n      yardoc.options.delete(:serializer)\n      options.update(yardoc.options.to_hash)\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":91,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23setup_yardopts"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "single_library",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand#single_library",
            "scope":                        "instance",
            "signature":                    "def single_library",
            "source":                       "def single_library\n  @single_library\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23single_library"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "single_library=",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryCommand#single_library=",
            "scope":                        "instance",
            "signature":                    "def single_library=(value)",
            "source":                       "def single_library=(value)\n  @single_library = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%23single_library%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "@@last_yardoc",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand::@@last_yardoc",
            "signature":                    "@@last_yardoc = nil",
            "source":                       "@@last_yardoc = nil",
            "source_type":                  "ruby",
            "type":                         "classvariable",
            "value":                        "nil",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%3A%3A%40%40last_yardoc"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Needed to synchronize threads in {#setup_yardopts}",
            "dynamic":                      true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "@@library_chdir_lock",
            "namespace":                    "YARD::Server::Commands::LibraryCommand",
            "path":                         "YARD::Server::Commands::LibraryCommand::@@library_chdir_lock",
            "signature":                    "@@library_chdir_lock = Mutex.new",
            "source":                       "@@library_chdir_lock = Mutex.new",
            "source_type":                  "ruby",
            "type":                         "classvariable",
            "value":                        "Mutex.new",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand%3A%3A%40%40library_chdir_lock"
        },
        {
            "attributes":                   {"class":{},"instance":{"options":{"write":"YARD::Server::Commands::LibraryIndexCommand#options=","read":"YARD::Server::Commands::LibraryIndexCommand#options"}}},
            "children":                     ["YARD::Server::Commands::LibraryIndexCommand#options=","YARD::Server::Commands::LibraryIndexCommand#options","YARD::Server::Commands::LibraryIndexCommand#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Returns the index of libraries served by the server.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/server/commands/library_index_command.rb"}],
            "name":                         "LibraryIndexCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::LibraryIndexCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23options%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23options","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23run"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ABase"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/commands/library_index_command.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Server::Commands::LibraryIndexCommand",
            "path":                         "YARD::Server::Commands::LibraryIndexCommand#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/commands/library_index_command.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Server::Commands::LibraryIndexCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryIndexCommand#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23options%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/server/commands/library_index_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::LibraryIndexCommand",
            "path":                         "YARD::Server::Commands::LibraryIndexCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  return unless path.empty?\n\n  self.options = SymbolHash.new(false).update(\n    :markup => :rdoc,\n    :format => :html,\n    :libraries => adapter.libraries,\n    :adapter => adapter,\n    :template => :doc_server,\n    :type => :library_list\n  )\n  render\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_index_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryIndexCommand%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{"serialize":{"write":"YARD::Server::Commands::LibraryOptions#serialize=","read":"YARD::Server::Commands::LibraryOptions#serialize"},"frames":{"write":"YARD::Server::Commands::LibraryOptions#frames=","read":"YARD::Server::Commands::LibraryOptions#frames"},"command":{"write":"YARD::Server::Commands::LibraryOptions#command=","read":"YARD::Server::Commands::LibraryOptions#command"}}},
            "children":                     ["YARD::Server::Commands::LibraryOptions#adapter","YARD::Server::Commands::LibraryOptions#library","YARD::Server::Commands::LibraryOptions#single_library","YARD::Server::Commands::LibraryOptions#serializer","YARD::Server::Commands::LibraryOptions#serialize","YARD::Server::Commands::LibraryOptions#serialize=","YARD::Server::Commands::LibraryOptions#command=","YARD::Server::Commands::LibraryOptions#command","YARD::Server::Commands::LibraryOptions#frames=","YARD::Server::Commands::LibraryOptions#frames","YARD::Server::Commands::LibraryOptions#each"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "LibraryOptions",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::LibraryOptions",
            "source_type":                  "ruby",
            "superclass":                   "YARD::CLI::YardocOptions",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23adapter","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23library","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23single_library","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serializer","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serialize","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serialize%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23command%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23command","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23frames%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23frames","YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23each"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions",
            "y_ld:superclass":              "YARD%3A%3ACLI%3A%3AYardocOptions"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "adapter",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#adapter",
            "scope":                        "instance",
            "signature":                    "def adapter; @command.adapter end",
            "source":                       "def adapter; @command.adapter end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23adapter"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "command",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#command",
            "scope":                        "instance",
            "signature":                    "def command",
            "source":                       "def command\n  @command\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23command"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "command=",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryOptions#command=",
            "scope":                        "instance",
            "signature":                    "def command=(value)",
            "source":                       "def command=(value)\n  @command = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23command%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "each",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Server::Commands::LibraryOptions#each",
            "scope":                        "instance",
            "signature":                    "def each(&block)",
            "source":                       "def each(&block)\n  super(&block)\n  yield(:adapter, adapter)\n  yield(:library, library)\n  yield(:single_library, single_library)\n  yield(:serializer, serializer)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23each"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "frames",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#frames",
            "scope":                        "instance",
            "signature":                    "def frames",
            "source":                       "def frames\n  @frames\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23frames"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "frames=",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryOptions#frames=",
            "scope":                        "instance",
            "signature":                    "def frames=(value)",
            "source":                       "def frames=(value)\n  @frames = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23frames%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "library",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#library",
            "scope":                        "instance",
            "signature":                    "def library; @command.library end",
            "source":                       "def library; @command.library end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23library"
        },
        {
            "docstring":                    "",
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize",
            "source":                       "default_attr :serialize, false",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serialize"
        },
        {
            "docstring":                    "",
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "serialize=",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::LibraryOptions#serialize=",
            "scope":                        "instance",
            "signature":                    "def serialize=(value)",
            "source":                       "default_attr :serialize, false",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serialize%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "serializer",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#serializer",
            "scope":                        "instance",
            "signature":                    "def serializer; @command.serializer end",
            "source":                       "def serializer; @command.serializer end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23serializer"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/server/commands/library_command.rb"}],
            "name":                         "single_library",
            "namespace":                    "YARD::Server::Commands::LibraryOptions",
            "path":                         "YARD::Server::Commands::LibraryOptions#single_library",
            "scope":                        "instance",
            "signature":                    "def single_library; @command.single_library end",
            "source":                       "def single_library; @command.single_library end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flibrary_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryOptions%23single_library"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::ListCommand#run"],
            "current_file_has_comments":    true,
            "docstring":                    "Returns a list of objects of a specific type",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/server/commands/list_command.rb"}],
            "instance_mixins":              ["YARD::Templates::Helpers::BaseHelper"],
            "name":                         "ListCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::ListCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::LibraryCommand",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3AListCommand%23run"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flist_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AListCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/server/commands/list_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::ListCommand",
            "path":                         "YARD::Server::Commands::ListCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  Registry.load_all\n  options.update(:objects => run_verifier(Registry.all(:class, :module)))\n  list_type = request.path.split('/').last\n  meth = \"generate_#{list_type}_list\"\n  tpl = fulldoc_template\n  if tpl.respond_to?(meth)\n    tpl.send(meth)\n    cache(tpl.contents)\n  else\n    not_found\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Flist_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AListCommand%23run"
        },
        {
            "attributes":                   {"class":{},"instance":{"query":{"write":"YARD::Server::Commands::SearchCommand#query=","read":"YARD::Server::Commands::SearchCommand#query"},"results":{"write":"YARD::Server::Commands::SearchCommand#results=","read":"YARD::Server::Commands::SearchCommand#results"}}},
            "children":                     ["YARD::Server::Commands::SearchCommand#results=","YARD::Server::Commands::SearchCommand#results","YARD::Server::Commands::SearchCommand#query=","YARD::Server::Commands::SearchCommand#query","YARD::Server::Commands::SearchCommand#run","YARD::Server::Commands::SearchCommand#visible_results","YARD::Server::Commands::SearchCommand#url_for","YARD::Server::Commands::SearchCommand#serve_xhr","YARD::Server::Commands::SearchCommand#serve_normal","YARD::Server::Commands::SearchCommand#search_for_object"],
            "current_file_has_comments":    true,
            "docstring":                    "Performs a search over the objects inside of a library and returns\nthe results as HTML or plaintext",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "instance_mixins":              ["YARD::Server::DocServerHelper","YARD::Templates::Helpers::ModuleHelper","YARD::Templates::Helpers::BaseHelper"],
            "name":                         "SearchCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::SearchCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::LibraryCommand",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23results%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23results","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23query%3D","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23query","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23run","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23visible_results","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23url_for","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23serve_xhr","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23serve_normal","YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23search_for_object"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ALibraryCommand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "query",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#query",
            "scope":                        "instance",
            "signature":                    "def query",
            "source":                       "def query\n  @query\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23query"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "query=",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::SearchCommand#query=",
            "scope":                        "instance",
            "signature":                    "def query=(value)",
            "source":                       "def query=(value)\n  @query = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23query%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "results",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#results",
            "scope":                        "instance",
            "signature":                    "def results",
            "source":                       "def results\n  @results\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23results"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "results=",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Commands::SearchCommand#results=",
            "scope":                        "instance",
            "signature":                    "def results=(value)",
            "source":                       "def results=(value)\n  @results = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23results%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  Registry.load_all\n  self.query = request.query['q']\n  redirect(\"/#{adapter.router.docs_prefix}/#{single_library ? library : ''}\") if query.nil? || query =~ /\\A\\s*\\Z/\n  if found = Registry.at(query)\n    redirect(url_for(found))\n  end\n  search_for_object\n  request.xhr? ? serve_xhr : serve_normal\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23run"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "search_for_object",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#search_for_object",
            "scope":                        "instance",
            "signature":                    "def search_for_object",
            "source":                       "def search_for_object\n  splitquery = query.split(/\\s+/).map {|c| c.downcase }.reject {|m| m.empty? }\n  self.results = run_verifier(Registry.all).select {|o|\n      o.path.downcase.include?(query.downcase)\n    }.reject {|o|\n      name = (o.type == :method ? o.name(true) : o.name).to_s.downcase\n      !name.include?(query.downcase) ||\n      case o.type\n      when :method\n        !(query =~ /[#.]/) && query.include?(\"::\")\n      when :class, :module, :constant, :class_variable\n        query =~ /[#.]/\n      end\n    }.sort_by {|o|\n      name = (o.type == :method ? o.name(true) : o.name).to_s\n      name.length.to_f / query.length.to_f\n    }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23search_for_object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "serve_normal",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#serve_normal",
            "scope":                        "instance",
            "signature":                    "def serve_normal",
            "source":                       "def serve_normal\n  options.update(\n    :visible_results => visible_results,\n    :query => query,\n    :results => results,\n    :template => :doc_server,\n    :type => :search\n  )\n  self.body = Templates::Engine.render(options)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23serve_normal"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "serve_xhr",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#serve_xhr",
            "scope":                        "instance",
            "signature":                    "def serve_xhr",
            "source":                       "def serve_xhr\n  self.headers['Content-Type'] = 'text/plain'\n  self.body = visible_results.map {|o|\n    [(o.type == :method ? o.name(true) : o.name).to_s,\n     o.path,\n     o.namespace.root? ? '' : o.namespace.path,\n     url_for(o)\n    ].join(\",\")\n  }.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23serve_xhr"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "url_for",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Server::Commands::SearchCommand#url_for",
            "scope":                        "instance",
            "signature":                    "def url_for(object)",
            "source":                       "def url_for(object)\n  File.join('', base_path(router.docs_prefix),\n    serializer.serialized_path(object))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23url_for"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/server/commands/search_command.rb"}],
            "name":                         "visible_results",
            "namespace":                    "YARD::Server::Commands::SearchCommand",
            "path":                         "YARD::Server::Commands::SearchCommand#visible_results",
            "scope":                        "instance",
            "signature":                    "def visible_results",
            "source":                       "def visible_results\n  results[0, 10]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fsearch_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3ASearchCommand%23visible_results"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::Commands::StaticFileCommand::STATIC_PATHS","YARD::Server::Commands::StaticFileCommand#run","YARD::Server::Commands::StaticFileCommand#favicon?"],
            "current_file_has_comments":    true,
            "docstring":                    "Serves static content when no other router matches a request",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server/commands/static_file_command.rb"}],
            "instance_mixins":              ["WEBrick::HTTPUtils"],
            "name":                         "StaticFileCommand",
            "namespace":                    "YARD::Server::Commands",
            "path":                         "YARD::Server::Commands::StaticFileCommand",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Commands::Base",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%3A%3ASTATIC_PATHS","YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%23run","YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%23favicon%3F"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3ACommands%3A%3ABase"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Return an empty favicon.ico if it does not exist so that\nbrowsers don't complain.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/server/commands/static_file_command.rb"}],
            "name":                         "favicon?",
            "namespace":                    "YARD::Server::Commands::StaticFileCommand",
            "path":                         "YARD::Server::Commands::StaticFileCommand#favicon?",
            "scope":                        "instance",
            "signature":                    "def favicon?",
            "source":                       "def favicon?\n  return unless request.path == '/favicon.ico'\n  self.headers['Content-Type'] = 'image/png'\n  self.status = 200\n  self.body = ''\n  raise FinishRequest\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%23favicon%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/server/commands/static_file_command.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Server::Commands::StaticFileCommand",
            "path":                         "YARD::Server::Commands::StaticFileCommand#run",
            "scope":                        "instance",
            "signature":                    "def run",
            "source":                       "def run\n  path = File.cleanpath(request.path).gsub(%r{^(../)+}, '')\n  ([adapter.document_root] + STATIC_PATHS.reverse).compact.each do |path_prefix|\n    file = File.join(path_prefix, path)\n    if File.exist?(file)\n      ext = \".\" + (request.path[/\\.(\\w+)$/, 1] || \"html\")\n      headers['Content-Type'] = mime_type(ext, DefaultMimeTypes)\n      self.body = File.read(file)\n      return\n    end\n  end\n  favicon?\n  self.status = 404\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Defines the paths used to search for static assets. To define an\nextra path, use {YARD::Server.register_static_path} rather than\nmodifying this constant directly. Also note that files in the\ndocument root will always take precedence over these paths.",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/server/commands/static_file_command.rb"}],
            "name":                         "STATIC_PATHS",
            "namespace":                    "YARD::Server::Commands::StaticFileCommand",
            "path":                         "YARD::Server::Commands::StaticFileCommand::STATIC_PATHS",
            "signature":                    "STATIC_PATHS = [",
            "source":                       "STATIC_PATHS = [\n  File.join(YARD::TEMPLATE_ROOT, 'default', 'fulldoc', 'html'),\n  File.join(File.dirname(__FILE__), '..', 'templates', 'default', 'fulldoc', 'html')\n]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[\n  File.join(YARD::TEMPLATE_ROOT, 'default', 'fulldoc', 'html'),\n  File.join(File.dirname(__FILE__), '..', 'templates', 'default', 'fulldoc', 'html')\n]",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fserver%2Fcommands%2Fstatic_file_command.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ACommands%3A%3AStaticFileCommand%3A%3ASTATIC_PATHS"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::DocServerHelper#url_for","YARD::Server::DocServerHelper#url_for_file","YARD::Server::DocServerHelper#url_for_list","YARD::Server::DocServerHelper#url_for_frameset","YARD::Server::DocServerHelper#url_for_main","YARD::Server::DocServerHelper#url_for_index","YARD::Server::DocServerHelper#base_path","YARD::Server::DocServerHelper#router"],
            "current_file_has_comments":    true,
            "docstring":                    "A module that is mixed into {Templates::Template} in order to customize\ncertain template methods.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "DocServerHelper",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::DocServerHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ADocServerHelper%23url_for","YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_file","YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_list","YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_frameset","YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_main","YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_index","YARD%3A%3AServer%3A%3ADocServerHelper%23base_path","YARD%3A%3AServer%3A%3ADocServerHelper%23router"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "base_path",
            "namespace":                    "YARD::Server::DocServerHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Server::DocServerHelper#base_path",
            "scope":                        "instance",
            "signature":                    "def base_path(path)",
            "source":                       "def base_path(path)\n  libname = router.request.version_supplied ? @library.to_s : @library.name\n  path + (@single_library ? '' : \"/#{libname}\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23base_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "router",
            "namespace":                    "YARD::Server::DocServerHelper",
            "path":                         "YARD::Server::DocServerHelper#router",
            "scope":                        "instance",
            "signature":                    "def router; @adapter.router end",
            "source":                       "def router; @adapter.router end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23router"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Modifies {Templates::Helpers::HtmlHelper#url_for} to return a URL instead\nof a disk location.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for",
            "namespace":                    "YARD::Server::DocServerHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"},{"parm_type":"nil","parm_name":"anchor"},{"parm_type":"false","parm_name":"relative"}],
            "path":                         "YARD::Server::DocServerHelper#url_for",
            "scope":                        "instance",
            "signature":                    "def url_for(obj, anchor = nil, relative = false)",
            "source":                       "def url_for(obj, anchor = nil, relative = false)\n  return '' if obj.nil?\n  return url_for_index if obj == '_index.html'\n  return \"/#{obj}\" if String === obj\n  File.join('', base_path(router.docs_prefix), super(obj, anchor, false))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Modifies {Templates::Helpers::HtmlHelper#url_for_file} to return a URL instead\nof a disk location.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for_file",
            "namespace":                    "YARD::Server::DocServerHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":"nil","parm_name":"anchor"}],
            "path":                         "YARD::Server::DocServerHelper#url_for_file",
            "scope":                        "instance",
            "signature":                    "def url_for_file(filename, anchor = nil)",
            "source":                       "def url_for_file(filename, anchor = nil)\n  if filename.is_a?(CodeObjects::ExtraFileObject)\n    filename = filename.filename\n  end\n  \"/#{base_path(router.docs_prefix)}/file/\" + filename.sub(%r{^#{@library.source_path.to_s}/}, '') +\n    (anchor ? \"##{anchor}\" : \"\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the frames URL for the page",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for_frameset",
            "namespace":                    "YARD::Server::DocServerHelper",
            "path":                         "YARD::Server::DocServerHelper#url_for_frameset",
            "scope":                        "instance",
            "signature":                    "def url_for_frameset",
            "source":                       "def url_for_frameset\n  url = options.file ? url_for_file(options.file) : url_for(object)\n  url = url.gsub(%r{^/#{base_path(router.docs_prefix)}/}, '')\n  File.join('', base_path(router.docs_prefix), \"frames\", url)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_frameset"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for the alphabetic index page",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for_index",
            "namespace":                    "YARD::Server::DocServerHelper",
            "path":                         "YARD::Server::DocServerHelper#url_for_index",
            "scope":                        "instance",
            "signature":                    "def url_for_index",
            "source":                       "def url_for_index\n  File.join('', base_path(router.docs_prefix), 'index')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_index"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Modifies {Templates::Helpers::HtmlHelper#url_for_list} to return a URL\nbased on the list prefix instead of a HTML filename.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for_list",
            "namespace":                    "YARD::Server::DocServerHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::Server::DocServerHelper#url_for_list",
            "scope":                        "instance",
            "signature":                    "def url_for_list(type)",
            "source":                       "def url_for_list(type)\n  File.join('', base_path(router.list_prefix), type.to_s)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the main URL, first checking a readme and then linking to the index",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/server/doc_server_helper.rb"}],
            "name":                         "url_for_main",
            "namespace":                    "YARD::Server::DocServerHelper",
            "path":                         "YARD::Server::DocServerHelper#url_for_main",
            "scope":                        "instance",
            "signature":                    "def url_for_main",
            "source":                       "def url_for_main\n  if options.frames && !options.command.path.empty?\n    File.join('', base_path(router.docs_prefix), options.command.path)\n  else\n    options.readme ? url_for_file(options.readme) : url_for_index\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerHelper%23url_for_main"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::DocServerSerializer#initialize","YARD::Server::DocServerSerializer#serialized_path"],
            "current_file_has_comments":    true,
            "docstring":                    "A custom {Serializers::Base serializer} which returns resource URLs instead of\nstatic relative paths to files on disk.",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server/doc_server_serializer.rb"}],
            "instance_mixins":              ["WEBrick::HTTPUtils"],
            "name":                         "DocServerSerializer",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::DocServerSerializer",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Serializers::FileSystemSerializer",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ADocServerSerializer%23initialize","YARD%3A%3AServer%3A%3ADocServerSerializer%23serialized_path"],
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerSerializer",
            "y_ld:superclass":              "YARD%3A%3ASerializers%3A%3AFileSystemSerializer"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/server/doc_server_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::DocServerSerializer",
            "parameters":                   [{"parm_type":"nil","parm_name":"command"}],
            "path":                         "YARD::Server::DocServerSerializer#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(command = nil)",
            "source":                       "def initialize(command = nil)\n  super(:basepath => '', :extension => '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerSerializer%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/server/doc_server_serializer.rb"}],
            "name":                         "serialized_path",
            "namespace":                    "YARD::Server::DocServerSerializer",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Server::DocServerSerializer#serialized_path",
            "scope":                        "instance",
            "signature":                    "def serialized_path(object)",
            "source":                       "def serialized_path(object)\n  case object\n  when CodeObjects::RootObject\n    \"toplevel\"\n  when CodeObjects::MethodObject\n    serialized_path(object.namespace) +\n      (object.scope == :instance ? \":\" : \".\") + escape(object.name.to_s)\n  when CodeObjects::ConstantObject, CodeObjects::ClassVariableObject\n    serialized_path(object.namespace) + \"##{object.name}-#{object.type}\"\n  when CodeObjects::ExtraFileObject\n    super(object).gsub(/^file./, 'file/')\n  else\n    super(object)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Fserver%2Fdoc_server_serializer.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ADocServerSerializer%23serialized_path"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Short circuits a request by raising an error. This exception is caught\nby {Commands::Base#call} to immediately end a request and return a response.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "FinishRequest",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::FinishRequest",
            "source_type":                  "ruby",
            "superclass":                   "RuntimeError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AFinishRequest",
            "y_ld:superclass":              "RuntimeError"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "This exception is raised when {LibraryVersion#prepare!} fails, or discovers\nthat the library is not \"prepared\" to be served by",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "LibraryNotPreparedError",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::LibraryNotPreparedError",
            "source_type":                  "ruby",
            "superclass":                   "RuntimeError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryNotPreparedError",
            "y_ld:superclass":              "RuntimeError"
        },
        {
            "aliases":                      {"YARD::Server::LibraryVersion#equal?":"eql?","YARD::Server::LibraryVersion#==":"eql?"},
            "attributes":                   {"class":{},"instance":{"version":{"write":"YARD::Server::LibraryVersion#version=","read":"YARD::Server::LibraryVersion#version"},"source":{"write":"YARD::Server::LibraryVersion#source=","read":"YARD::Server::LibraryVersion#source"},"yardoc_file":{"write":"YARD::Server::LibraryVersion#yardoc_file=","read":"YARD::Server::LibraryVersion#yardoc_file"},"name":{"write":"YARD::Server::LibraryVersion#name=","read":"YARD::Server::LibraryVersion#name"},"source_path":{"write":"YARD::Server::LibraryVersion#source_path=","read":"YARD::Server::LibraryVersion#source_path"}}},
            "children":                     ["YARD::Server::LibraryVersion#name=","YARD::Server::LibraryVersion#name","YARD::Server::LibraryVersion#version=","YARD::Server::LibraryVersion#version","YARD::Server::LibraryVersion#yardoc_file=","YARD::Server::LibraryVersion#yardoc_file","YARD::Server::LibraryVersion#source=","YARD::Server::LibraryVersion#source","YARD::Server::LibraryVersion#source_path=","YARD::Server::LibraryVersion#source_path","YARD::Server::LibraryVersion#initialize","YARD::Server::LibraryVersion#to_s","YARD::Server::LibraryVersion#hash","YARD::Server::LibraryVersion#eql?","YARD::Server::LibraryVersion#==","YARD::Server::LibraryVersion#equal?","YARD::Server::LibraryVersion#prepare!","YARD::Server::LibraryVersion#gemspec","YARD::Server::LibraryVersion#load_yardoc_from_disk","YARD::Server::LibraryVersion#load_yardoc_from_gem","YARD::Server::LibraryVersion#source_path_for_disk","YARD::Server::LibraryVersion#source_path_for_gem","YARD::Server::LibraryVersion#load_source_path"],
            "current_file_has_comments":    true,
            "docstring":                    "A library version encapsulates a library's documentation at a specific version.\nAlthough the version is optional, this allows for creating multiple documentation\npoints for a specific library, each representing a unique version. The term\n\"library\" used in other parts of the YARD::Server documentation refers to\nobjects of this class unless otherwise noted.\n\nA library points to a location where a {#yardoc_file} is located so that\nits documentation may be loaded and served. Optionally, a {#source_path} is\ngiven to point to a location where any extra files (and {YARD::CLI::Yardoc .yardopts})\nshould be loaded from. Both of these methods may not be known immediately,\nsince the yardoc file may not be built until later. Resolving the yardoc\nfile and source path are dependent on the specific library \"source type\" used.\nSource types (known as \"library source\") are discussed in detail below.\n\n== Using with Adapters\nA list of libraries need to be passed into adapters upon creation. In\nmost cases, you will never do this manually, but if you use a {RackMiddleware},\nyou will need to pass in this list yourself. To build this list of libraries,\nyou should create a hash of library names mapped to an *Array* of LibraryVersion\nobjects. For example:\n\n  {'mylib' => [LibraryVersion.new('mylib', '1.0', ...),\n               LibraryVersion.new('mylib', '2.0', ...)]}\n\nNote that you can also use {Adapter#add_library} for convenience.\n\nThe \"array\" part is required, even for just one library version.\n\n== Library Sources\nThe {#source} method represents the library source type, ie. where the\nlibrary \"comes from\". It might come from \"disk\", or it might come from a\n\"gem\" (technically the disk, but a separate type nonetheless). In these\ntwo cases, the yardoc file sits somewhere on your filesystem, though\nit may also be built dynamically if it does not yet exist. This behaviour\nis controlled through the {#prepare!} method, which prepares the yardoc file\ngiven a specific library source. We will see how this works in detail in\nthe following section.\n\n== Implementing a Custom Library Source\nYARD can be extended to support custom library sources in order to\nbuild or retrieve a yardoc file at runtime from many different locations.\n\nTo implement this behaviour, two methods must be added to the +LibraryVersion+\nclass, +#load_yardoc_from_SOURCE+ and +#source_path_for_SOURCE+. In both\ncases, \"SOURCE\" represents the source type used in {#source} when creating\nthe library object. The +#source_path_for_SOURCE+ method is called upon\ncreation and should return the location where the source code for the library\nlives. The load method is called from {#prepare!} if there is no yardoc file\nand should set {#yardoc_file}. Below is a full example for\nimplementing a custom library source, +:http+, which reads packaged .yardoc\ndatabases from zipped archives off of an HTTP server.",
            "dynamic":                      true,
            "files":                        [{"file_line":87,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "LibraryVersion",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::LibraryVersion",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ALibraryVersion%23name%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23name","YARD%3A%3AServer%3A%3ALibraryVersion%23version%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23version","YARD%3A%3AServer%3A%3ALibraryVersion%23yardoc_file%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23yardoc_file","YARD%3A%3AServer%3A%3ALibraryVersion%23source%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23source","YARD%3A%3AServer%3A%3ALibraryVersion%23source_path%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23source_path","YARD%3A%3AServer%3A%3ALibraryVersion%23initialize","YARD%3A%3AServer%3A%3ALibraryVersion%23to_s","YARD%3A%3AServer%3A%3ALibraryVersion%23hash","YARD%3A%3AServer%3A%3ALibraryVersion%23eql%3F","YARD%3A%3AServer%3A%3ALibraryVersion%23%3D%3D","YARD%3A%3AServer%3A%3ALibraryVersion%23equal%3F","YARD%3A%3AServer%3A%3ALibraryVersion%23prepare%21","YARD%3A%3AServer%3A%3ALibraryVersion%23gemspec","YARD%3A%3AServer%3A%3ALibraryVersion%23load_yardoc_from_disk","YARD%3A%3AServer%3A%3ALibraryVersion%23load_yardoc_from_gem","YARD%3A%3AServer%3A%3ALibraryVersion%23source_path_for_disk","YARD%3A%3AServer%3A%3ALibraryVersion%23source_path_for_gem","YARD%3A%3AServer%3A%3ALibraryVersion%23load_source_path"],
            "y_ld:files":                   [{"file_line":87,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":144,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#==",
            "scope":                        "instance",
            "signature":                    "def eql?(other)",
            "source":                       "def eql?(other)\n  other.is_a?(LibraryVersion) && other.name == name &&\n    other.version == version && other.yardoc_file == yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":144,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23%3D%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":140,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "eql?",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Server::LibraryVersion#eql?",
            "scope":                        "instance",
            "signature":                    "def eql?(other)",
            "source":                       "def eql?(other)\n  other.is_a?(LibraryVersion) && other.name == name &&\n    other.version == version && other.yardoc_file == yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":140,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23eql%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":145,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "equal?",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#equal?",
            "scope":                        "instance",
            "signature":                    "def eql?(other)",
            "source":                       "def eql?(other)\n  other.is_a?(LibraryVersion) && other.name == name &&\n    other.version == version && other.yardoc_file == yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":145,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23equal%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":171,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "gemspec",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#gemspec",
            "scope":                        "instance",
            "signature":                    "def gemspec",
            "source":                       "def gemspec\n  ver = version ? \"= #{version}\" : \">= 0\"\n  Gem.source_index.find_name(name, ver).first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":171,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23gemspec"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":137,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#hash",
            "scope":                        "instance",
            "signature":                    "def hash; to_s.hash end",
            "source":                       "def hash; to_s.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":137,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23hash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":"nil","parm_name":"version"},{"parm_type":"nil","parm_name":"yardoc"},{"parm_type":":disk","parm_name":"source"}],
            "path":                         "YARD::Server::LibraryVersion#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(name, version = nil, yardoc = nil, source = :disk)",
            "source":                       "def initialize(name, version = nil, yardoc = nil, source = :disk)\n  self.name = name\n  self.yardoc_file = yardoc\n  self.version = version\n  self.source = source\n  self.source_path = load_source_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":221,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "load_source_path",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#load_source_path",
            "scope":                        "instance",
            "signature":                    "def load_source_path",
            "source":                       "def load_source_path\n  meth = \"source_path_for_#{source}\"\n  send(meth) if respond_to?(meth)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":221,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23load_source_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called when a library of source type \"disk\" is to be prepared. In this\ncase, the {#yardoc_file} should already be set, so nothing needs to be\ndone.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":181,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "load_yardoc_from_disk",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#load_yardoc_from_disk",
            "scope":                        "instance",
            "signature":                    "def load_yardoc_from_disk",
            "source":                       "def load_yardoc_from_disk\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":181,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23load_yardoc_from_disk"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called when a library of source type \"gem\" is to be prepared. In this\ncase, the {#yardoc_file} needs to point to the correct location for\nthe installed gem. The yardoc file is built if it has not been done.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":191,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "load_yardoc_from_gem",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#load_yardoc_from_gem",
            "scope":                        "instance",
            "signature":                    "def load_yardoc_from_gem",
            "source":                       "def load_yardoc_from_gem\n  require 'rubygems'\n  ver = version ? \"= #{version}\" : \">= 0\"\n  self.yardoc_file = Registry.yardoc_file_for_gem(name, ver)\n  unless yardoc_file && File.directory?(yardoc_file)\n    Thread.new do\n      # Build gem docs on demand\n      log.debug \"Building gem docs for #{to_s(false)}\"\n      CLI::Gems.run(name, ver)\n      self.yardoc_file = Registry.yardoc_file_for_gem(name, ver)\n      FileUtils.touch(File.join(yardoc_file, 'complete'))\n    end\n  end\n  unless yardoc_file && File.exist?(File.join(yardoc_file, 'complete'))\n    raise LibraryNotPreparedError\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":191,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23load_yardoc_from_gem"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":89,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":89,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":89,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::LibraryVersion#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":89,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23name%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prepares a library to be displayed by the server. This callback is\nperformed before each request on a library to ensure that it is loaded\nand ready to be viewed. If any steps need to be performed prior to loading,\nthey are performed through this method (though they should be implemented\nthrough the +load_yardoc_from_SOURCE+ method).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":162,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "prepare!",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#prepare!",
            "scope":                        "instance",
            "signature":                    "def prepare!",
            "source":                       "def prepare!\n  return if yardoc_file\n  meth = \"load_yardoc_from_#{source}\"\n  send(meth) if respond_to?(meth)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":162,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23prepare%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":105,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#source",
            "scope":                        "instance",
            "signature":                    "def source",
            "source":                       "def source\n  @source\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":105,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":105,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source=",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::LibraryVersion#source=",
            "scope":                        "instance",
            "signature":                    "def source=(value)",
            "source":                       "def source=(value)\n  @source = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":105,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source_path",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#source_path",
            "scope":                        "instance",
            "signature":                    "def source_path",
            "source":                       "def source_path\n  @source_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source_path=",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::LibraryVersion#source_path=",
            "scope":                        "instance",
            "signature":                    "def source_path=(value)",
            "source":                       "def source_path=(value)\n  @source_path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source_path%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":210,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source_path_for_disk",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#source_path_for_disk",
            "scope":                        "instance",
            "signature":                    "def source_path_for_disk",
            "source":                       "def source_path_for_disk\n  File.dirname(yardoc_file) if yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":210,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source_path_for_disk"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":215,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "source_path_for_gem",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#source_path_for_gem",
            "scope":                        "instance",
            "signature":                    "def source_path_for_gem",
            "source":                       "def source_path_for_gem\n  gemspec.full_gem_path if gemspec\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":215,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23source_path_for_gem"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":132,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "to_s",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":"true","parm_name":"url_format"}],
            "path":                         "YARD::Server::LibraryVersion#to_s",
            "scope":                        "instance",
            "signature":                    "def to_s(url_format = true)",
            "source":                       "def to_s(url_format = true)\n  version ? \"#{name}#{url_format ? '/' : '-'}#{version}\" : \"#{name}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":132,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23to_s"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "version",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#version",
            "scope":                        "instance",
            "signature":                    "def version",
            "source":                       "def version\n  @version\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23version"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":92,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "version=",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::LibraryVersion#version=",
            "scope":                        "instance",
            "signature":                    "def version=(value)",
            "source":                       "def version=(value)\n  @version = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":92,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23version%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "yardoc_file",
            "namespace":                    "YARD::Server::LibraryVersion",
            "path":                         "YARD::Server::LibraryVersion#yardoc_file",
            "scope":                        "instance",
            "signature":                    "def yardoc_file",
            "source":                       "def yardoc_file\n  @yardoc_file\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23yardoc_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/server/library_version.rb"}],
            "name":                         "yardoc_file=",
            "namespace":                    "YARD::Server::LibraryVersion",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::LibraryVersion#yardoc_file=",
            "scope":                        "instance",
            "signature":                    "def yardoc_file=(value)",
            "source":                       "def yardoc_file=(value)\n  @yardoc_file = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fserver%2Flibrary_version.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ALibraryVersion%23yardoc_file%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "current_file_has_comments":    true,
            "docstring":                    "Raises an error if a resource is not found. This exception is caught by\n{Commands::Base#call} to immediately end a request and return a 404 response\ncode. If a message is provided, the body is set to the exception message.",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/server/adapter.rb"}],
            "name":                         "NotFoundError",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::NotFoundError",
            "source_type":                  "ruby",
            "superclass":                   "RuntimeError",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Fserver%2Fadapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ANotFoundError",
            "y_ld:superclass":              "RuntimeError"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::RackAdapter#call","YARD::Server::RackAdapter#start","YARD::Server::RackAdapter#print_start_message"],
            "current_file_has_comments":    true,
            "docstring":                    "A server adapter to respond to requests using the Rack server infrastructure.",
            "dynamic":                      true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "instance_mixins":              ["WEBrick::HTTPUtils"],
            "name":                         "RackAdapter",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::RackAdapter",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Adapter",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ARackAdapter%23call","YARD%3A%3AServer%3A%3ARackAdapter%23start","YARD%3A%3AServer%3A%3ARackAdapter%23print_start_message"],
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackAdapter",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3AAdapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Responds to Rack requests and builds a response with the {Router}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "call",
            "namespace":                    "YARD::Server::RackAdapter",
            "parameters":                   [{"parm_type":null,"parm_name":"env"}],
            "path":                         "YARD::Server::RackAdapter#call",
            "scope":                        "instance",
            "signature":                    "def call(env)",
            "source":                       "def call(env)\n  request = Rack::Request.new(env)\n  request.path_info = unescape(request.path_info) # unescape things like %3F\n  router.call(request)\nrescue StandardError => ex\n  log.backtrace(ex)\n  [500, {'Content-Type' => 'text/plain'},\n    [ex.message + \"\\n\" + ex.backtrace.join(\"\\n\")]]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackAdapter%23call"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "print_start_message",
            "namespace":                    "YARD::Server::RackAdapter",
            "parameters":                   [{"parm_type":null,"parm_name":"server"}],
            "path":                         "YARD::Server::RackAdapter#print_start_message",
            "scope":                        "instance",
            "signature":                    "def print_start_message(server)",
            "source":                       "def print_start_message(server)\n  opts = server.default_options.merge(server.options)\n  puts \">> YARD #{YARD::VERSION} documentation server at http://#{opts[:Host]}:#{opts[:Port]}\"\n\n  # Only happens for Mongrel\n  return unless server.server.to_s == \"Rack::Handler::Mongrel\"\n  puts \">> #{server.server.class_name} web server (running on Rack)\"\n  puts \">> Listening on #{opts[:Host]}:#{opts[:Port]}, CTRL+C to stop\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackAdapter%23print_start_message"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Starts the +Rack::Server+. This method will pass control to the server and\nblock.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "start",
            "namespace":                    "YARD::Server::RackAdapter",
            "path":                         "YARD::Server::RackAdapter#start",
            "scope":                        "instance",
            "signature":                    "def start",
            "source":                       "def start\n  server = Rack::Server.new(server_options)\n  server.instance_variable_set(\"@app\", self)\n  print_start_message(server)\n  server.start\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackAdapter%23start"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::RackMiddleware#initialize","YARD::Server::RackMiddleware#call"],
            "current_file_has_comments":    true,
            "docstring":                    "This class wraps the {RackAdapter} into a Rack-compatible middleware.\nSee {#initialize} for a list of options to pass via Rack's +#use+ method.",
            "dynamic":                      true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "RackMiddleware",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::RackMiddleware",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ARackMiddleware%23initialize","YARD%3A%3AServer%3A%3ARackMiddleware%23call"],
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackMiddleware",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "call",
            "namespace":                    "YARD::Server::RackMiddleware",
            "parameters":                   [{"parm_type":null,"parm_name":"env"}],
            "path":                         "YARD::Server::RackMiddleware#call",
            "scope":                        "instance",
            "signature":                    "def call(env)",
            "source":                       "def call(env)\n  status, headers, body = *@adapter.call(env)\n  if status == 404\n    @app.call(env)\n  else\n    [status, headers, body]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackMiddleware%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new Rack-based middleware for serving YARD documentation.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/server/rack_adapter.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::RackMiddleware",
            "parameters":                   [{"parm_type":null,"parm_name":"app"},{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Server::RackMiddleware#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(app, opts = {})",
            "source":                       "def initialize(app, opts = {})\n  args = [opts[:libraries] || {}, opts[:options] || {}, opts[:server_options] || {}]\n  @app = app\n  @adapter = RackAdapter.new(*args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Fserver%2Frack_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARackMiddleware%23initialize"
        },
        {
            "attributes":                   {"class":{},"instance":{"request":{"write":"YARD::Server::Router#request=","read":"YARD::Server::Router#request"},"adapter":{"write":"YARD::Server::Router#adapter=","read":"YARD::Server::Router#adapter"}}},
            "children":                     ["YARD::Server::Router#request=","YARD::Server::Router#request","YARD::Server::Router#adapter=","YARD::Server::Router#adapter","YARD::Server::Router#initialize","YARD::Server::Router#call","YARD::Server::Router#docs_prefix","YARD::Server::Router#list_prefix","YARD::Server::Router#search_prefix","YARD::Server::Router#parse_library_from_path","YARD::Server::Router#route","YARD::Server::Router#route_docs","YARD::Server::Router#route_index","YARD::Server::Router#route_list","YARD::Server::Router#route_search","YARD::Server::Router#final_options"],
            "current_file_has_comments":    true,
            "docstring":                    "A router class implements the logic used to recognize a request for a specific\nURL and run specific {Commands::Base commands}.\n\n== Subclassing Notes\nTo create a custom router, subclass this class and pass it into the adapter\noptions through {Adapter#initialize} or by directly modifying {Adapter#router}.\n\nThe most general customization is to change the URL prefixes recognized by\nrouting, which can be done by overriding {#docs_prefix}, {#list_prefix}\nand {#search_prefix}.\n\n== Implementing Custom Caching\nBy default, the Router class performs static disk-based caching on all\nrequests through the +#check_static_cache+. To override this behaviour,\nor create your own caching mechanism, mixin your own custom module with\nthis method implemented as per {StaticCaching#check_static_cache}.",
            "dynamic":                      true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/server/router.rb"}],
            "groups":                       ["Route Prefixes","Routing Methods","Utility Methods"],
            "instance_mixins":              ["YARD::Server::Commands","YARD::Server::StaticCaching"],
            "name":                         "Router",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::Router",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3ARouter%23request%3D","YARD%3A%3AServer%3A%3ARouter%23request","YARD%3A%3AServer%3A%3ARouter%23adapter%3D","YARD%3A%3AServer%3A%3ARouter%23adapter","YARD%3A%3AServer%3A%3ARouter%23initialize","YARD%3A%3AServer%3A%3ARouter%23call","YARD%3A%3AServer%3A%3ARouter%23docs_prefix","YARD%3A%3AServer%3A%3ARouter%23list_prefix","YARD%3A%3AServer%3A%3ARouter%23search_prefix","YARD%3A%3AServer%3A%3ARouter%23parse_library_from_path","YARD%3A%3AServer%3A%3ARouter%23route","YARD%3A%3AServer%3A%3ARouter%23route_docs","YARD%3A%3AServer%3A%3ARouter%23route_index","YARD%3A%3AServer%3A%3ARouter%23route_list","YARD%3A%3AServer%3A%3ARouter%23route_search","YARD%3A%3AServer%3A%3ARouter%23final_options"],
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "adapter",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#adapter",
            "scope":                        "instance",
            "signature":                    "def adapter",
            "source":                       "def adapter\n  @adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23adapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "adapter=",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Router#adapter=",
            "scope":                        "instance",
            "signature":                    "def adapter=(value)",
            "source":                       "def adapter=(value)\n  @adapter = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23adapter%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Perform routing on a specific request, serving the request as a static\nfile through {Commands::StaticFileCommand} if no route is found.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "call",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"request"}],
            "path":                         "YARD::Server::Router#call",
            "scope":                        "instance",
            "signature":                    "def call(request)",
            "source":                       "def call(request)\n  self.request = request\n  if result = (check_static_cache || route)\n    result\n  else\n    StaticFileCommand.new(adapter.options).call(request)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":64,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Route Prefixes",
            "name":                         "docs_prefix",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#docs_prefix",
            "scope":                        "instance",
            "signature":                    "def docs_prefix; 'docs' end",
            "source":                       "def docs_prefix; 'docs' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":64,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23docs_prefix"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds extra :library/:path option keys to the adapter options.\nUse this method when passing options to a command.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":171,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Utility Methods",
            "name":                         "final_options",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"library"},{"parm_type":null,"parm_name":"paths"}],
            "path":                         "YARD::Server::Router#final_options",
            "scope":                        "instance",
            "signature":                    "def final_options(library, paths)",
            "source":                       "def final_options(library, paths)\n  adapter.options.merge(:library => library, :path => paths.join('/'))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":171,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23final_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new router for a specific adapter",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"adapter"}],
            "path":                         "YARD::Server::Router#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(adapter)",
            "source":                       "def initialize(adapter)\n  self.adapter = adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Route Prefixes",
            "name":                         "list_prefix",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#list_prefix",
            "scope":                        "instance",
            "signature":                    "def list_prefix; 'list' end",
            "source":                       "def list_prefix; 'list' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23list_prefix"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":77,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "parse_library_from_path",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"paths"}],
            "path":                         "YARD::Server::Router#parse_library_from_path",
            "scope":                        "instance",
            "signature":                    "def parse_library_from_path(paths)",
            "source":                       "def parse_library_from_path(paths)\n  return [adapter.libraries.values.first.first, paths] if adapter.options[:single_library]\n  library, paths = nil, paths.dup\n  if libs = adapter.libraries[paths.first]\n    paths.shift\n    if library = libs.find {|l| l.version == paths.first }\n      request.version_supplied = true if request\n      paths.shift\n    else # use the last lib in the list\n      request.version_supplied = false if request\n      library = libs.last\n    end\n  end\n  [library, paths]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":77,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23parse_library_from_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "request",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#request",
            "scope":                        "instance",
            "signature":                    "def request",
            "source":                       "def request\n  @request\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23request"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/server/router.rb"}],
            "name":                         "request=",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::Router#request=",
            "scope":                        "instance",
            "signature":                    "def request=(value)",
            "source":                       "def request=(value)\n  @request = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23request%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Performs routing algorithm to find which prefix is called, first\nparsing out library name/version information.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":100,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "route",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":"request.path","parm_name":"path"}],
            "path":                         "YARD::Server::Router#route",
            "scope":                        "instance",
            "signature":                    "def route(path = request.path)",
            "source":                       "def route(path = request.path)\n  path = path.gsub(%r{//+}, '/').gsub(%r{^/|/$}, '')\n  return route_index if path.empty? || path == docs_prefix\n  case path\n  when /^(#{docs_prefix}|#{list_prefix}|#{search_prefix})(\\/.*|$)/\n    prefix = $1\n    paths = $2.gsub(%r{^/|/$}, '').split('/')\n    library, paths = *parse_library_from_path(paths)\n    return unless library\n    return case prefix\n    when docs_prefix;   route_docs(library, paths)\n    when list_prefix;   route_list(library, paths)\n    when search_prefix; route_search(library, paths)\n    end\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":100,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23route"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Routes requests from {#docs_prefix} and calls the appropriate command",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "route_docs",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"library"},{"parm_type":null,"parm_name":"paths"}],
            "path":                         "YARD::Server::Router#route_docs",
            "scope":                        "instance",
            "signature":                    "def route_docs(library, paths)",
            "source":                       "def route_docs(library, paths)\n  return route_index if library.nil?\n  case paths.first\n  when \"frames\"\n    paths.shift\n    cmd = FramesCommand\n  when \"file\"\n    paths.shift\n    cmd = DisplayFileCommand\n  else\n    cmd = DisplayObjectCommand\n  end\n  cmd = cmd.new(final_options(library, paths))\n  cmd.call(request)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23route_docs"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Routes for the index of a library / multiple libraries",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":140,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "route_index",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#route_index",
            "scope":                        "instance",
            "signature":                    "def route_index",
            "source":                       "def route_index\n  if adapter.options[:single_library]\n    route_docs(adapter.libraries.values.first.first, [])\n  else\n    LibraryIndexCommand.new(adapter.options.merge(:path => '')).call(request)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":140,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23route_index"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Routes requests from {#list_prefix} and calls the appropriate command",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":151,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "route_list",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"library"},{"parm_type":null,"parm_name":"paths"}],
            "path":                         "YARD::Server::Router#route_list",
            "scope":                        "instance",
            "signature":                    "def route_list(library, paths)",
            "source":                       "def route_list(library, paths)\n  return if paths.empty?\n  ListCommand.new(final_options(library, paths)).call(request)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":151,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23route_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Routes requests from {#search_prefix} and calls the appropriate command",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Routing Methods",
            "name":                         "route_search",
            "namespace":                    "YARD::Server::Router",
            "parameters":                   [{"parm_type":null,"parm_name":"library"},{"parm_type":null,"parm_name":"paths"}],
            "path":                         "YARD::Server::Router#route_search",
            "scope":                        "instance",
            "signature":                    "def route_search(library, paths)",
            "source":                       "def route_search(library, paths)\n  return unless paths.empty?\n  SearchCommand.new(final_options(library, paths)).call(request)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23route_search"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":70,"file_path":"lib/yard/server/router.rb"}],
            "group":                        "Route Prefixes",
            "name":                         "search_prefix",
            "namespace":                    "YARD::Server::Router",
            "path":                         "YARD::Server::Router#search_prefix",
            "scope":                        "instance",
            "signature":                    "def search_prefix; 'search' end",
            "source":                       "def search_prefix; 'search' end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":70,"file_path":"lib%2Fyard%2Fserver%2Frouter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3ARouter%23search_prefix"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::StaticCaching#check_static_cache"],
            "current_file_has_comments":    true,
            "docstring":                    "Implements static caching for requests.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/static_caching.rb"}],
            "name":                         "StaticCaching",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::StaticCaching",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3AStaticCaching%23check_static_cache"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fstatic_caching.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AStaticCaching"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called by a router to return the cached object. By default, this\nmethod performs disk-based caching. To perform other forms of caching,\nimplement your own +#check_static_cache+ method and mix the module into\nthe Router class.\n\nNote that caching does not occur here. This method simply checks for\nthe existence of cached data. To actually cache a response, see\n{Commands::Base#cache}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/server/static_caching.rb"}],
            "name":                         "check_static_cache",
            "namespace":                    "YARD::Server::StaticCaching",
            "path":                         "YARD::Server::StaticCaching#check_static_cache",
            "scope":                        "instance",
            "signature":                    "def check_static_cache",
            "source":                       "def check_static_cache\n  return nil unless adapter.document_root\n  cache_path = File.join(adapter.document_root, request.path.sub(/\\.html$/, '') + '.html')\n  cache_path = cache_path.sub(%r{/\\.html$}, '.html')\n  if File.file?(cache_path)\n    log.debug \"Loading cache from disk: #{cache_path}\"\n    return [200, {'Content-Type' => 'text/html'}, [File.read_binary(cache_path)]]\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fserver%2Fstatic_caching.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AStaticCaching%23check_static_cache"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Server::WebrickAdapter#start"],
            "current_file_has_comments":    true,
            "docstring":                    "The main adapter to initialize a WEBrick server.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "WebrickAdapter",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::WebrickAdapter",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Server::Adapter",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3AWebrickAdapter%23start"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickAdapter",
            "y_ld:superclass":              "YARD%3A%3AServer%3A%3AAdapter"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Initializes a WEBrick server. If {Adapter#server_options} contains a\n+:daemonize+ key set to true, the server will be daemonized.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "start",
            "namespace":                    "YARD::Server::WebrickAdapter",
            "path":                         "YARD::Server::WebrickAdapter#start",
            "scope":                        "instance",
            "signature":                    "def start",
            "source":                       "def start\n  server_options[:ServerType] = WEBrick::Daemon if server_options[:daemonize]\n  server = WEBrick::HTTPServer.new(server_options)\n  server.mount('/', WebrickServlet, self)\n  trap(\"INT\") { server.shutdown }\n  server.start\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickAdapter%23start"
        },
        {
            "attributes":                   {"class":{},"instance":{"adapter":{"write":"YARD::Server::WebrickServlet#adapter=","read":"YARD::Server::WebrickServlet#adapter"}}},
            "children":                     ["YARD::Server::WebrickServlet#adapter=","YARD::Server::WebrickServlet#adapter","YARD::Server::WebrickServlet#initialize","YARD::Server::WebrickServlet#do_GET"],
            "current_file_has_comments":    true,
            "docstring":                    "The main WEBrick servlet implementation, accepting only GET requests.",
            "dynamic":                      true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "WebrickServlet",
            "namespace":                    "YARD::Server",
            "path":                         "YARD::Server::WebrickServlet",
            "source_type":                  "ruby",
            "superclass":                   "WEBrick::HTTPServlet::AbstractServlet",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AServer%3A%3AWebrickServlet%23adapter%3D","YARD%3A%3AServer%3A%3AWebrickServlet%23adapter","YARD%3A%3AServer%3A%3AWebrickServlet%23initialize","YARD%3A%3AServer%3A%3AWebrickServlet%23do_GET"],
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickServlet",
            "y_ld:superclass":              "WEBrick%3A%3AHTTPServlet%3A%3AAbstractServlet"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "adapter",
            "namespace":                    "YARD::Server::WebrickServlet",
            "path":                         "YARD::Server::WebrickServlet#adapter",
            "scope":                        "instance",
            "signature":                    "def adapter",
            "source":                       "def adapter\n  @adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickServlet%23adapter"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "adapter=",
            "namespace":                    "YARD::Server::WebrickServlet",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Server::WebrickServlet#adapter=",
            "scope":                        "instance",
            "signature":                    "def adapter=(value)",
            "source":                       "def adapter=(value)\n  @adapter = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickServlet%23adapter%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "do_GET",
            "namespace":                    "YARD::Server::WebrickServlet",
            "parameters":                   [{"parm_type":null,"parm_name":"request"},{"parm_type":null,"parm_name":"response"}],
            "path":                         "YARD::Server::WebrickServlet#do_GET",
            "scope":                        "instance",
            "signature":                    "def do_GET(request, response)",
            "source":                       "def do_GET(request, response)\n  status, headers, body = *adapter.router.call(request)\n  response.status = status\n  response.body = body.is_a?(Array) ? body[0] : body\n  headers.each do |key, value|\n    response[key] = value\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickServlet%23do_GET"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/server/webrick_adapter.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Server::WebrickServlet",
            "parameters":                   [{"parm_type":null,"parm_name":"server"},{"parm_type":null,"parm_name":"adapter"}],
            "path":                         "YARD::Server::WebrickServlet#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(server, adapter)",
            "source":                       "def initialize(server, adapter)\n  super\n  self.adapter = adapter\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Fserver%2Fwebrick_adapter.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3AServer%3A%3AWebrickServlet%23initialize"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::StubProxy#_dump","YARD::StubProxy._load","YARD::StubProxy#hash","YARD::StubProxy#initialize","YARD::StubProxy#method_missing"],
            "current_file_has_comments":    true,
            "docstring":                    "Stubs marshal dumps and acts a delegate class for an object by path",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "StubProxy",
            "namespace":                    "YARD",
            "path":                         "YARD::StubProxy",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AStubProxy%23_dump","YARD%3A%3AStubProxy._load","YARD%3A%3AStubProxy%23hash","YARD%3A%3AStubProxy%23initialize","YARD%3A%3AStubProxy%23method_missing"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AStubProxy",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "_dump",
            "namespace":                    "YARD::StubProxy",
            "parameters":                   [{"parm_type":null,"parm_name":"depth"}],
            "path":                         "YARD::StubProxy#_dump",
            "scope":                        "instance",
            "signature":                    "def _dump(depth) @path end",
            "source":                       "def _dump(depth) @path end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AStubProxy%23_dump"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "hash",
            "namespace":                    "YARD::StubProxy",
            "path":                         "YARD::StubProxy#hash",
            "scope":                        "instance",
            "signature":                    "def hash; @path.hash end",
            "source":                       "def hash; @path.hash end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AStubProxy%23hash"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::StubProxy",
            "parameters":                   [{"parm_type":null,"parm_name":"path"},{"parm_type":"false","parm_name":"transient"}],
            "path":                         "YARD::StubProxy#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(path, transient = false)",
            "source":                       "def initialize(path, transient = false)\n  @path = path\n  @transient = transient\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AStubProxy%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::StubProxy",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::StubProxy#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(meth, *args, &block)",
            "source":                       "def method_missing(meth, *args, &block)\n  return true if meth == :respond_to? && args.first == :_dump\n  @object = nil if @transient\n  @object ||= Registry.at(@path)\n  @object.send(meth, *args, &block)\nrescue NoMethodError => e\n  e.backtrace.delete_if {|l| l[0, __FILE__.size] == __FILE__ }\n  raise\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AStubProxy%23method_missing"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/serializers/yardoc_serializer.rb"}],
            "name":                         "_load",
            "namespace":                    "YARD::StubProxy",
            "parameters":                   [{"parm_type":null,"parm_name":"str"}],
            "path":                         "YARD::StubProxy._load",
            "scope":                        "class",
            "signature":                    "def self._load(str) new(str) end",
            "source":                       "def self._load(str) new(str) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Fserializers%2Fyardoc_serializer.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AStubProxy._load"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The root path for YARD builtin templates",
            "dynamic":                      true,
            "files":                        [{"file_line":8,"file_path":"lib/yard.rb"}],
            "name":                         "TEMPLATE_ROOT",
            "namespace":                    "YARD",
            "path":                         "YARD::TEMPLATE_ROOT",
            "signature":                    "TEMPLATE_ROOT = File.join(ROOT, '..', 'templates')",
            "source":                       "TEMPLATE_ROOT = File.join(ROOT, '..', 'templates')",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "File.join(ROOT, '..', 'templates')",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ATEMPLATE_ROOT"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::Tag","YARD::Tags::RefTag","YARD::Tags::Library","YARD::Tags::Directive","YARD::Tags::EndGroupDirective","YARD::Tags::GroupDirective","YARD::Tags::MacroDirective","YARD::Tags::MethodDirective","YARD::Tags::AttributeDirective","YARD::Tags::ParseDirective","YARD::Tags::ScopeDirective","YARD::Tags::VisibilityDirective","YARD::Tags::OptionTag","YARD::Tags::DefaultTag","YARD::Tags::RefTagList","YARD::Tags::OverloadTag","YARD::Tags::DefaultFactory","YARD::Tags::TagFormatError"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for Tag components",
            "dynamic":                      true,
            "files":                        [{"file_line":227,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/tags/tag.rb"},{"file_line":2,"file_path":"lib/yard/tags/ref_tag.rb"},{"file_line":2,"file_path":"lib/yard/tags/library.rb"},{"file_line":4,"file_path":"lib/yard/tags/directives.rb"},{"file_line":2,"file_path":"lib/yard/tags/option_tag.rb"},{"file_line":2,"file_path":"lib/yard/tags/default_tag.rb"},{"file_line":2,"file_path":"lib/yard/tags/ref_tag_list.rb"},{"file_line":2,"file_path":"lib/yard/tags/overload_tag.rb"},{"file_line":2,"file_path":"lib/yard/tags/default_factory.rb"},{"file_line":2,"file_path":"lib/yard/tags/tag_format_error.rb"}],
            "groups":                       ["Parser callbacks"],
            "name":                         "Tags",
            "namespace":                    "YARD",
            "path":                         "YARD::Tags",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ATag","YARD%3A%3ATags%3A%3ARefTag","YARD%3A%3ATags%3A%3ALibrary","YARD%3A%3ATags%3A%3ADirective","YARD%3A%3ATags%3A%3AEndGroupDirective","YARD%3A%3ATags%3A%3AGroupDirective","YARD%3A%3ATags%3A%3AMacroDirective","YARD%3A%3ATags%3A%3AMethodDirective","YARD%3A%3ATags%3A%3AAttributeDirective","YARD%3A%3ATags%3A%3AParseDirective","YARD%3A%3ATags%3A%3AScopeDirective","YARD%3A%3ATags%3A%3AVisibilityDirective","YARD%3A%3ATags%3A%3AOptionTag","YARD%3A%3ATags%3A%3ADefaultTag","YARD%3A%3ATags%3A%3ARefTagList","YARD%3A%3ATags%3A%3AOverloadTag","YARD%3A%3ATags%3A%3ADefaultFactory","YARD%3A%3ATags%3A%3ATagFormatError"],
            "y_ld:files":                   [{"file_line":227,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Fref_tag.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Fdefault_tag.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftags%2Ftag_format_error.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ATags"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::AttributeDirective#after_parse","YARD::Tags::AttributeDirective#method_name","YARD::Tags::AttributeDirective#method_signature","YARD::Tags::AttributeDirective#create_attribute_data","YARD::Tags::AttributeDirective#writable?","YARD::Tags::AttributeDirective#readable?"],
            "current_file_has_comments":    true,
            "docstring":                    "Defines an attribute with a given name, using indented block data as the\nattribute's docstring. If the type specifier is supplied with \"r\", \"w\", or\n\"rw\", the attribute is made readonly, writeonly or readwrite respectively.\nA readwrite attribute is the default, if no type is specified. The comment\ncontaining this directive does not need to be attached to any source, but\nif it is, that source code will be used as the method's source.\n\nTo define an regular method, see {tag:!method}",
            "dynamic":                      true,
            "files":                        [{"file_line":432,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "AttributeDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::AttributeDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::MethodDirective",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AAttributeDirective%23after_parse","YARD%3A%3ATags%3A%3AAttributeDirective%23method_name","YARD%3A%3ATags%3A%3AAttributeDirective%23method_signature","YARD%3A%3ATags%3A%3AAttributeDirective%23create_attribute_data","YARD%3A%3ATags%3A%3AAttributeDirective%23writable%3F","YARD%3A%3ATags%3A%3AAttributeDirective%23readable%3F"],
            "y_ld:files":                   [{"file_line":432,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3AMethodDirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":433,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "after_parse",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "path":                         "YARD::Tags::AttributeDirective#after_parse",
            "scope":                        "instance",
            "signature":                    "def after_parse",
            "source":                       "def after_parse\n  return unless handler\n  use_indented_text\n  create_attribute_data(create_object)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":433,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23after_parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":457,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "create_attribute_data",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Tags::AttributeDirective#create_attribute_data",
            "scope":                        "instance",
            "signature":                    "def create_attribute_data(object)",
            "source":                       "def create_attribute_data(object)\n  return unless object\n  clean_name = object.name.to_s.sub(/=$/, '')\n  attrs = object.namespace.attributes[object.scope]\n  attrs[clean_name] ||= SymbolHash[:read => nil, :write => nil]\n  if readable?\n    attrs[clean_name][:read] = object\n  end\n  if writable?\n    if object.name.to_s[-1,1] == '='\n      writer = object\n      writer.parameters = [['value', nil]]\n    else\n      writer = CodeObjects::MethodObject.new(object.namespace,\n        object.name.to_s + '=', object.scope)\n      writer.signature = \"def #{object.name}=(value)\"\n      writer.visibility = object.visibility\n      writer.dynamic = object.dynamic\n      writer.source = object.source\n      writer.group = object.group\n      writer.parameters = [['value', nil]]\n      handler.register_file_info(writer)\n    end\n    attrs[clean_name][:write] = writer\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":457,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23create_attribute_data"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":441,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "method_name",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "path":                         "YARD::Tags::AttributeDirective#method_name",
            "scope":                        "instance",
            "signature":                    "def method_name",
            "source":                       "def method_name\n  name = sanitized_tag_signature || handler.call_params.first\n  name += '=' unless readable?\n  name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":441,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":447,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "method_signature",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "path":                         "YARD::Tags::AttributeDirective#method_signature",
            "scope":                        "instance",
            "signature":                    "def method_signature",
            "source":                       "def method_signature\n  if readable?\n    \"def #{method_name}\"\n  else\n    \"def #{method_name}(value)\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":447,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23method_signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":488,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "readable?",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "path":                         "YARD::Tags::AttributeDirective#readable?",
            "scope":                        "instance",
            "signature":                    "def readable?",
            "source":                       "def readable?\n  !tag.types || tag.types.join =~ /(?!w)r/\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":488,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23readable%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":484,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "writable?",
            "namespace":                    "YARD::Tags::AttributeDirective",
            "path":                         "YARD::Tags::AttributeDirective#writable?",
            "scope":                        "instance",
            "signature":                    "def writable?",
            "source":                       "def writable?\n  !tag.types || tag.types.join.include?('w')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":484,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AAttributeDirective%23writable%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::DefaultFactory::TYPELIST_OPENING_CHARS","YARD::Tags::DefaultFactory::TYPELIST_CLOSING_CHARS","YARD::Tags::DefaultFactory#parse_tag","YARD::Tags::DefaultFactory#parse_tag_with_name","YARD::Tags::DefaultFactory#parse_tag_with_types","YARD::Tags::DefaultFactory#parse_tag_with_types_and_name","YARD::Tags::DefaultFactory#parse_tag_with_types_and_title","YARD::Tags::DefaultFactory#parse_tag_with_title_and_text","YARD::Tags::DefaultFactory#parse_tag_with_types_name_and_default","YARD::Tags::DefaultFactory#parse_tag_with_options","YARD::Tags::DefaultFactory#extract_name_from_text","YARD::Tags::DefaultFactory#extract_title_and_desc_from_text","YARD::Tags::DefaultFactory#extract_types_and_name_from_text","YARD::Tags::DefaultFactory#extract_types_and_name_from_text_unstripped"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "DefaultFactory",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::DefaultFactory",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ADefaultFactory%3A%3ATYPELIST_OPENING_CHARS","YARD%3A%3ATags%3A%3ADefaultFactory%3A%3ATYPELIST_CLOSING_CHARS","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_name","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_and_name","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_and_title","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_title_and_text","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_name_and_default","YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_options","YARD%3A%3ATags%3A%3ADefaultFactory%23extract_name_from_text","YARD%3A%3ATags%3A%3ADefaultFactory%23extract_title_and_desc_from_text","YARD%3A%3ATags%3A%3ADefaultFactory%23extract_types_and_name_from_text","YARD%3A%3ATags%3A%3ADefaultFactory%23extract_types_and_name_from_text_unstripped"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extracts the name from raw tag text returning the name and remaining value",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "extract_name_from_text",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#extract_name_from_text",
            "scope":                        "instance",
            "signature":                    "def extract_name_from_text(text)",
            "source":                       "def extract_name_from_text(text)\n  text.strip.split(/\\s+/, 2)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23extract_name_from_text"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":102,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "extract_title_and_desc_from_text",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#extract_title_and_desc_from_text",
            "scope":                        "instance",
            "signature":                    "def extract_title_and_desc_from_text(text)",
            "source":                       "def extract_title_and_desc_from_text(text)\n  raise TagFormatError if text.nil? || text.empty?\n  title, desc = nil, nil\n  if text =~ /\\A[ \\t]\\n/\n    desc = text\n  else\n    text = text.split(/\\r?\\n/)\n    title = text.shift.squeeze(' ').strip\n    desc = text.join(\"\\n\")\n  end\n  [title, desc]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":102,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23extract_title_and_desc_from_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a [], <>, {} or () block at the beginning of a line of text\ninto a list of comma delimited values.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":125,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "extract_types_and_name_from_text",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"TYPELIST_OPENING_CHARS","parm_name":"opening_types"},{"parm_type":"TYPELIST_CLOSING_CHARS","parm_name":"closing_types"}],
            "path":                         "YARD::Tags::DefaultFactory#extract_types_and_name_from_text",
            "scope":                        "instance",
            "signature":                    "def extract_types_and_name_from_text(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)",
            "source":                       "def extract_types_and_name_from_text(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)\n  before, list, text = *extract_types_and_name_from_text_unstripped(text, opening_types, closing_types)\n  if list.nil?\n    [nil, nil, text.strip]\n  else\n    [before ? before.strip : nil, list.map {|e| e.strip }, text.strip]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":125,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23extract_types_and_name_from_text"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":134,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "extract_types_and_name_from_text_unstripped",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"TYPELIST_OPENING_CHARS","parm_name":"opening_types"},{"parm_type":"TYPELIST_CLOSING_CHARS","parm_name":"closing_types"}],
            "path":                         "YARD::Tags::DefaultFactory#extract_types_and_name_from_text_unstripped",
            "scope":                        "instance",
            "signature":                    "def extract_types_and_name_from_text_unstripped(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)",
            "source":                       "def extract_types_and_name_from_text_unstripped(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)\n  s, e = 0, 0\n  before = ''\n  list, level, seen_space = [''], 0, false\n  text.split(//).each_with_index do |c, i|\n    if opening_types.include?(c)\n      list.last << c if level > 0\n      s = i if level == 0\n      level += 1\n    elsif closing_types.include?(c)\n      level -= 1 unless list.last[-1,1] == '=' && c == '>'\n      break e = i if level == 0\n      list.last << c\n    elsif c == ',' && level == 1\n      list.push ''\n    elsif c =~ /\\S/ && level == 0\n      break e = i if seen_space && list == ['']\n      before << c\n    elsif c =~ /\\s/ && level == 0 && !before.empty?\n      seen_space = true\n    elsif level >= 1\n      list.last << c\n    end\n  end\n\n  before = before.empty? ? nil : before\n  if list.size == 1 && list.first == ''\n    [nil, nil, text]\n  else\n    [before, list, text[(e+1)..-1]]\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":134,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23extract_types_and_name_from_text_unstripped"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses tag text and creates a new tag with descriptive text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag",
            "scope":                        "instance",
            "signature":                    "def parse_tag(tag_name, text)",
            "source":                       "def parse_tag(tag_name, text)\n  Tag.new(tag_name, text.strip)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses tag text and creates a new tag with a key name and descriptive text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_name",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_name",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_name(tag_name, text)",
            "source":                       "def parse_tag_with_name(tag_name, text)\n  name, text = *extract_name_from_text(text)\n  Tag.new(tag_name, text, nil, name)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":86,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_options",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_options",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_options(tag_name, text)",
            "source":                       "def parse_tag_with_options(tag_name, text)\n  name, text = *extract_name_from_text(text)\n  OptionTag.new(tag_name, name, parse_tag_with_types_name_and_default(tag_name, text))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":86,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_title_and_text",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_title_and_text",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_title_and_text(tag_name, text)",
            "source":                       "def parse_tag_with_title_and_text(tag_name, text)\n  title, desc = *extract_title_and_desc_from_text(text)\n  Tag.new(tag_name, desc, nil, title)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_title_and_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses tag text and creates a new tag with formally declared types and\ndescriptive text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_types",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_types",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_types(tag_name, text)",
            "source":                       "def parse_tag_with_types(tag_name, text)\n  name, types, text = *extract_types_and_name_from_text(text)\n  raise TagFormatError, \"cannot specify a name before type list for '@#{tag_name}'\" if name\n  Tag.new(tag_name, text, types)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses tag text and creates a new tag with formally declared types, a key\nname and descriptive text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_types_and_name",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_types_and_name",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_types_and_name(tag_name, text)",
            "source":                       "def parse_tag_with_types_and_name(tag_name, text)\n  name, types, text = *extract_types_and_name_from_text(text)\n  name, text = *extract_name_from_text(text) unless name\n  Tag.new(tag_name, text, types, name)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_and_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses tag text and creates a new tag with formally declared types, a title\non the first line and descriptive text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":56,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_types_and_title",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_types_and_title",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_types_and_title(tag_name, text)",
            "source":                       "def parse_tag_with_types_and_title(tag_name, text)\n  name, types, text = *extract_types_and_name_from_text_unstripped(text)\n  if name\n    title, desc = name, text\n  else\n    title, desc = *extract_title_and_desc_from_text(text)\n  end\n  Tag.new(tag_name, desc, types, title)\nrescue TagFormatError\n  Tag.new(tag_name, '', types, nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":56,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_and_title"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "parse_tag_with_types_name_and_default",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::DefaultFactory#parse_tag_with_types_name_and_default",
            "scope":                        "instance",
            "signature":                    "def parse_tag_with_types_name_and_default(tag_name, text)",
            "source":                       "def parse_tag_with_types_name_and_default(tag_name, text)\n  # Can't allow () in a default tag, otherwise the grammar is too ambiguous when types is omitted.\n  open, close = TYPELIST_OPENING_CHARS.gsub('(', ''), TYPELIST_CLOSING_CHARS.gsub(')', '')\n  name, types, text = *extract_types_and_name_from_text(text, open, close)\n  name, text = *extract_name_from_text(text) unless name\n  if text =~ /\\A\\(/\n    _, default, text = *extract_types_and_name_from_text(text, '(', ')')\n    DefaultTag.new(tag_name, text, types, name, default)\n  else\n    DefaultTag.new(tag_name, text, types, name, nil)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%23parse_tag_with_types_name_and_default"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "TYPELIST_CLOSING_CHARS",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "path":                         "YARD::Tags::DefaultFactory::TYPELIST_CLOSING_CHARS",
            "signature":                    "TYPELIST_CLOSING_CHARS = '>})]'",
            "source":                       "TYPELIST_CLOSING_CHARS = '>})]'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'>})]'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%3A%3ATYPELIST_CLOSING_CHARS"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/default_factory.rb"}],
            "name":                         "TYPELIST_OPENING_CHARS",
            "namespace":                    "YARD::Tags::DefaultFactory",
            "path":                         "YARD::Tags::DefaultFactory::TYPELIST_OPENING_CHARS",
            "signature":                    "TYPELIST_OPENING_CHARS = '[({<'",
            "source":                       "TYPELIST_OPENING_CHARS = '[({<'",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "'[({<'",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fdefault_factory.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultFactory%3A%3ATYPELIST_OPENING_CHARS"
        },
        {
            "attributes":                   {"class":{},"instance":{"defaults":{"write":null,"read":"YARD::Tags::DefaultTag#defaults"}}},
            "children":                     ["YARD::Tags::DefaultTag#defaults","YARD::Tags::DefaultTag#initialize"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/default_tag.rb"}],
            "name":                         "DefaultTag",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::DefaultTag",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Tag",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ADefaultTag%23defaults","YARD%3A%3ATags%3A%3ADefaultTag%23initialize"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Fdefault_tag.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultTag",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ATag"
        },
        {
            "docstring":                    "Returns the value of attribute defaults",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/default_tag.rb"}],
            "name":                         "defaults",
            "namespace":                    "YARD::Tags::DefaultTag",
            "path":                         "YARD::Tags::DefaultTag#defaults",
            "scope":                        "instance",
            "signature":                    "def defaults",
            "source":                       "def defaults\n  @defaults\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fdefault_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultTag%23defaults"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/tags/default_tag.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::DefaultTag",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"},{"parm_type":"nil","parm_name":"types"},{"parm_type":"nil","parm_name":"name"},{"parm_type":"nil","parm_name":"defaults"}],
            "path":                         "YARD::Tags::DefaultTag#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag_name, text, types = nil, name = nil, defaults = nil)",
            "source":                       "def initialize(tag_name, text, types = nil, name = nil, defaults = nil)\n  super(tag_name, text, types, name)\n  @defaults = defaults\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftags%2Fdefault_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADefaultTag%23initialize"
        },
        {
            "attributes":                   {"class":{},"instance":{"parser":{"write":"YARD::Tags::Directive#parser=","read":"YARD::Tags::Directive#parser"},"tag":{"write":"YARD::Tags::Directive#tag=","read":"YARD::Tags::Directive#tag"},"expanded_text":{"write":"YARD::Tags::Directive#expanded_text=","read":"YARD::Tags::Directive#expanded_text"},"handler":{"write":null,"read":"YARD::Tags::Directive#handler"},"object":{"write":null,"read":"YARD::Tags::Directive#object"}}},
            "children":                     ["YARD::Tags::Directive#tag=","YARD::Tags::Directive#tag","YARD::Tags::Directive#expanded_text=","YARD::Tags::Directive#expanded_text","YARD::Tags::Directive#parser=","YARD::Tags::Directive#parser","YARD::Tags::Directive#object","YARD::Tags::Directive#handler","YARD::Tags::Directive#initialize","YARD::Tags::Directive#call","YARD::Tags::Directive#after_parse"],
            "current_file_has_comments":    true,
            "docstring":                    "The base directive class. Subclass this class to create a custom\ndirective, registering it with {Library.define_directive}. Directive\nclasses are executed via the {#call} method, which perform all directive\nprocessing on the object.\n\nIf processing occurs within a handler, the {#handler} attribute is\navailable to access more information about parsing context and state.\nHandlers are only available when parsing from {Parser::SourceParser},\nnot when parsing directly from {DocstringParser}. If the docstring is\nattached to an object declaration, {#object} will be set and available\nto modify the generated code object directly. Note that both of these\nattributes may be nil, and directives should test their existence\nbefore attempting to use them.",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/tags/directives.rb"}],
            "groups":                       ["Parser callbacks"],
            "name":                         "Directive",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::Directive",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ADirective%23tag%3D","YARD%3A%3ATags%3A%3ADirective%23tag","YARD%3A%3ATags%3A%3ADirective%23expanded_text%3D","YARD%3A%3ATags%3A%3ADirective%23expanded_text","YARD%3A%3ATags%3A%3ADirective%23parser%3D","YARD%3A%3ATags%3A%3ADirective%23parser","YARD%3A%3ATags%3A%3ADirective%23object","YARD%3A%3ATags%3A%3ADirective%23handler","YARD%3A%3ATags%3A%3ADirective%23initialize","YARD%3A%3ATags%3A%3ADirective%23call","YARD%3A%3ATags%3A%3ADirective%23after_parse"],
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called after parsing all directives and tags in the docstring. Used\nto perform any cleanup after all directives perform their main task.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "after_parse",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#after_parse",
            "scope":                        "instance",
            "signature":                    "def after_parse; end",
            "source":                       "def after_parse; end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23after_parse"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Called when processing the directive. Subclasses should implement\nthis method to perform all functionality of the directive.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#call",
            "scope":                        "instance",
            "signature":                    "def call; raise NotImplementedError end",
            "source":                       "def call; raise NotImplementedError end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Set this field to replace the directive definition inside of a docstring\nwith arbitrary text. For instance, the {MacroDirective} uses this field\nto expand its macro data in place of the call to a +@!macro+.",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "expanded_text",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#expanded_text",
            "scope":                        "instance",
            "signature":                    "def expanded_text",
            "source":                       "def expanded_text\n  @expanded_text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23expanded_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Set this field to replace the directive definition inside of a docstring\nwith arbitrary text. For instance, the {MacroDirective} uses this field\nto expand its macro data in place of the call to a +@!macro+.",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "expanded_text=",
            "namespace":                    "YARD::Tags::Directive",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Directive#expanded_text=",
            "scope":                        "instance",
            "signature":                    "def expanded_text=(value)",
            "source":                       "def expanded_text=(value)\n  @expanded_text = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23expanded_text%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "handler",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#handler",
            "scope":                        "instance",
            "signature":                    "def handler",
            "source":                       "def handler; parser.handler end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23handler"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::Directive",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"},{"parm_type":null,"parm_name":"parser"}],
            "path":                         "YARD::Tags::Directive#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag, parser)",
            "source":                       "def initialize(tag, parser)\n  self.tag = tag\n  self.parser = parser\n  self.expanded_text = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":42,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object; parser.object end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":42,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "parser",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#parser",
            "scope":                        "instance",
            "signature":                    "def parser",
            "source":                       "def parser\n  @parser\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23parser"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "parser=",
            "namespace":                    "YARD::Tags::Directive",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Directive#parser=",
            "scope":                        "instance",
            "signature":                    "def parser=(value)",
            "source":                       "def parser=(value)\n  @parser = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23parser%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "tag",
            "namespace":                    "YARD::Tags::Directive",
            "path":                         "YARD::Tags::Directive#tag",
            "scope":                        "instance",
            "signature":                    "def tag",
            "source":                       "def tag\n  @tag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/tags/directives.rb"}],
            "name":                         "tag=",
            "namespace":                    "YARD::Tags::Directive",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Directive#tag=",
            "scope":                        "instance",
            "signature":                    "def tag=(value)",
            "source":                       "def tag=(value)\n  @tag = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ADirective%23tag%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::EndGroupDirective#call"],
            "current_file_has_comments":    true,
            "docstring":                    "Ends a group listing definition. Group definition automatically end\nwhen class or module blocks are closed, and defining a new group overrides\nthe last group definition, but occasionally you need to end the current\ngroup to return to the default listing. Use {tag:!group} to begin a\ngroup listing.",
            "dynamic":                      true,
            "files":                        [{"file_line":97,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "EndGroupDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::EndGroupDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AEndGroupDirective%23call"],
            "y_ld:files":                   [{"file_line":97,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AEndGroupDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::EndGroupDirective",
            "path":                         "YARD::Tags::EndGroupDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  return unless handler\n  handler.extra_state.group = nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AEndGroupDirective%23call"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::GroupDirective#call"],
            "current_file_has_comments":    true,
            "docstring":                    "Defines a group listing. All methods (and attributes) seen after this\ndirective are placed into a group with the given description as the\ngroup name. The group listing is used by templates to organize methods\nand attributes into respective logical groups. To end a group listing\nuse {tag:!endgroup}.",
            "dynamic":                      true,
            "files":                        [{"file_line":120,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "GroupDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::GroupDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AGroupDirective%23call"],
            "y_ld:files":                   [{"file_line":120,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AGroupDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":121,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::GroupDirective",
            "path":                         "YARD::Tags::GroupDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  return unless handler\n  handler.extra_state.group = tag.text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":121,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AGroupDirective%23call"
        },
        {
            "attributes":                   {"class":{"transitive_tags":{"write":"YARD::Tags::Library.transitive_tags=","read":"YARD::Tags::Library.transitive_tags"},"instance":{"write":"YARD::Tags::Library.instance=","read":"YARD::Tags::Library.instance"},"labels":{"write":null,"read":"YARD::Tags::Library.labels"},"default_factory":{"write":"YARD::Tags::Library.default_factory=","read":"YARD::Tags::Library.default_factory"},"visible_tags":{"write":"YARD::Tags::Library.visible_tags=","read":"YARD::Tags::Library.visible_tags"}},"instance":{"factory":{"write":"YARD::Tags::Library#factory=","read":"YARD::Tags::Library#factory"}}},
            "children":                     ["YARD::Tags::Library.labels","YARD::Tags::Library.instance","YARD::Tags::Library.instance=","YARD::Tags::Library.default_factory","YARD::Tags::Library.default_factory=","YARD::Tags::Library.factory_method_for","YARD::Tags::Library.factory_method_for_directive","YARD::Tags::Library.visible_tags=","YARD::Tags::Library.visible_tags","YARD::Tags::Library.transitive_tags=","YARD::Tags::Library.transitive_tags","YARD::Tags::Library.sorted_labels","YARD::Tags::Library.define_tag","YARD::Tags::Library.define_directive","YARD::Tags::Library.tag_method_name","YARD::Tags::Library.directive_method_name","YARD::Tags::Library.tag_or_directive_method_name","YARD::Tags::Library#send_to_factory","YARD::Tags::Library#directive_call","YARD::Tags::Library#factory=","YARD::Tags::Library#factory","YARD::Tags::Library#initialize","YARD::Tags::Library#has_tag?","YARD::Tags::Library#tag_create","YARD::Tags::Library#has_directive?","YARD::Tags::Library#directive_create","YARD::Tags::Library#abstract_tag","YARD::Tags::Library#api_tag","YARD::Tags::Library#attr_tag","YARD::Tags::Library#attr_reader_tag","YARD::Tags::Library#attr_writer_tag","YARD::Tags::Library#author_tag","YARD::Tags::Library#deprecated_tag","YARD::Tags::Library#example_tag","YARD::Tags::Library#note_tag","YARD::Tags::Library#option_tag","YARD::Tags::Library#overload_tag","YARD::Tags::Library#param_tag","YARD::Tags::Library#private_tag","YARD::Tags::Library#raise_tag","YARD::Tags::Library#return_tag","YARD::Tags::Library#see_tag","YARD::Tags::Library#since_tag","YARD::Tags::Library#todo_tag","YARD::Tags::Library#version_tag","YARD::Tags::Library#yield_tag","YARD::Tags::Library#yieldparam_tag","YARD::Tags::Library#yieldreturn_tag","YARD::Tags::Library#attribute_directive","YARD::Tags::Library#endgroup_directive","YARD::Tags::Library#group_directive","YARD::Tags::Library#macro_directive","YARD::Tags::Library#method_directive","YARD::Tags::Library#parse_directive","YARD::Tags::Library#scope_directive","YARD::Tags::Library#visibility_directive"],
            "current_file_has_comments":    true,
            "docstring":                    "Keeps track of all the registered meta-data tags and directives.\nAlso allows for defining of custom tags and customizing the tag parsing\nsyntax.\n\n== Defining Custom Meta-Data Tags\n\nTo define a custom tag, use {define_tag}. You should pass the tag\nname and the factory method to use when creating the tag. If you do not\nprovide a factory method to use, it will default to {DefaultFactory#parse_tag}\n\nYou can also define tag objects manually by simply implementing a \"tagname_tag\"\nmethod that returns a {Tag} object, but they will not take advantage of tag factory\nparsing:\n\n  def mytag_tag(text)\n    Tag.new(:mytag, text)\n  end\n\n== Defining Custom Directives\n\nDirectives can be defined by calling the {define_directive} method, taking\nthe directive name, an optional tag factory parser method (to parse the\ndata in the directive into a temporary {Tag} object) and a {Directive} subclass\nthat performs the directive processing. For more information on creating a\nDirective subclass, see the {Directive} class documentation.\n\nSimilar to tags, Directives can also be defined manually, in this case using\nthe method name \"mydirective_directive\" and returning a new {Directive} object:\n\n  def mydirective_directive(tag, parser)\n    MyDirective.new(tag, parser)\n  end\n\n== Namespaced Tags\n\nIn YARD 0.8.0+, tags can be namespaced using the '.' character. It is recommended\nto namespace project specific tags, like +@yard.tag_name+, so that tags do not\ncollide with other plugins or new built-in tags.\n\n== Adding/Changing the Tag Syntax\n\nIf you have specialized tag parsing needs you can substitute the {#factory}\nobject with your own by setting {Library.default_factory= Library.default_factory}\nto a new class with its own parsing methods before running YARD. This is useful\nif you want to change the syntax of existing tags (@see, @since, etc.)",
            "dynamic":                      true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "Library",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::Library",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ALibrary.labels","YARD%3A%3ATags%3A%3ALibrary.instance","YARD%3A%3ATags%3A%3ALibrary.instance%3D","YARD%3A%3ATags%3A%3ALibrary.default_factory","YARD%3A%3ATags%3A%3ALibrary.default_factory%3D","YARD%3A%3ATags%3A%3ALibrary.factory_method_for","YARD%3A%3ATags%3A%3ALibrary.factory_method_for_directive","YARD%3A%3ATags%3A%3ALibrary.visible_tags%3D","YARD%3A%3ATags%3A%3ALibrary.visible_tags","YARD%3A%3ATags%3A%3ALibrary.transitive_tags%3D","YARD%3A%3ATags%3A%3ALibrary.transitive_tags","YARD%3A%3ATags%3A%3ALibrary.sorted_labels","YARD%3A%3ATags%3A%3ALibrary.define_tag","YARD%3A%3ATags%3A%3ALibrary.define_directive","YARD%3A%3ATags%3A%3ALibrary.tag_method_name","YARD%3A%3ATags%3A%3ALibrary.directive_method_name","YARD%3A%3ATags%3A%3ALibrary.tag_or_directive_method_name","YARD%3A%3ATags%3A%3ALibrary%23send_to_factory","YARD%3A%3ATags%3A%3ALibrary%23directive_call","YARD%3A%3ATags%3A%3ALibrary%23factory%3D","YARD%3A%3ATags%3A%3ALibrary%23factory","YARD%3A%3ATags%3A%3ALibrary%23initialize","YARD%3A%3ATags%3A%3ALibrary%23has_tag%3F","YARD%3A%3ATags%3A%3ALibrary%23tag_create","YARD%3A%3ATags%3A%3ALibrary%23has_directive%3F","YARD%3A%3ATags%3A%3ALibrary%23directive_create","YARD%3A%3ATags%3A%3ALibrary%23abstract_tag","YARD%3A%3ATags%3A%3ALibrary%23api_tag","YARD%3A%3ATags%3A%3ALibrary%23attr_tag","YARD%3A%3ATags%3A%3ALibrary%23attr_reader_tag","YARD%3A%3ATags%3A%3ALibrary%23attr_writer_tag","YARD%3A%3ATags%3A%3ALibrary%23author_tag","YARD%3A%3ATags%3A%3ALibrary%23deprecated_tag","YARD%3A%3ATags%3A%3ALibrary%23example_tag","YARD%3A%3ATags%3A%3ALibrary%23note_tag","YARD%3A%3ATags%3A%3ALibrary%23option_tag","YARD%3A%3ATags%3A%3ALibrary%23overload_tag","YARD%3A%3ATags%3A%3ALibrary%23param_tag","YARD%3A%3ATags%3A%3ALibrary%23private_tag","YARD%3A%3ATags%3A%3ALibrary%23raise_tag","YARD%3A%3ATags%3A%3ALibrary%23return_tag","YARD%3A%3ATags%3A%3ALibrary%23see_tag","YARD%3A%3ATags%3A%3ALibrary%23since_tag","YARD%3A%3ATags%3A%3ALibrary%23todo_tag","YARD%3A%3ATags%3A%3ALibrary%23version_tag","YARD%3A%3ATags%3A%3ALibrary%23yield_tag","YARD%3A%3ATags%3A%3ALibrary%23yieldparam_tag","YARD%3A%3ATags%3A%3ALibrary%23yieldreturn_tag","YARD%3A%3ATags%3A%3ALibrary%23attribute_directive","YARD%3A%3ATags%3A%3ALibrary%23endgroup_directive","YARD%3A%3ATags%3A%3ALibrary%23group_directive","YARD%3A%3ATags%3A%3ALibrary%23macro_directive","YARD%3A%3ATags%3A%3ALibrary%23method_directive","YARD%3A%3ATags%3A%3ALibrary%23parse_directive","YARD%3A%3ATags%3A%3ALibrary%23scope_directive","YARD%3A%3ATags%3A%3ALibrary%23visibility_directive"],
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Marks a class/module/method as abstract with optional\nimplementor information.",
            "files":                        [{"file_line":315,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "abstract_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#abstract_tag",
            "scope":                        "instance",
            "signature":                    "def abstract_tag",
            "source":                       "define_tag \"Abstract\",           :abstract",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":315,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23abstract_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares the API that the object belongs to. Does not display in\noutput, but useful for performing queries (+yardoc --query+). Any text is\nallowable in this tag, and there are no predefined values.",
            "files":                        [{"file_line":330,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "api_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#api_tag",
            "scope":                        "instance",
            "signature":                    "def api_tag",
            "source":                       "define_tag \"API Visibility\",     :api",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":330,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23api_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares a readonly attribute on a Struct or class.",
            "files":                        [{"file_line":350,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "attr_reader_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#attr_reader_tag",
            "scope":                        "instance",
            "signature":                    "def attr_reader_tag",
            "source":                       "define_tag \"Attribute Getter\",   :attr_reader, :with_types_and_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":350,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23attr_reader_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares a readwrite attribute on a Struct or class.",
            "files":                        [{"file_line":340,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "attr_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#attr_tag",
            "scope":                        "instance",
            "signature":                    "def attr_tag",
            "source":                       "define_tag \"Attribute\",          :attr,        :with_types_and_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":340,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23attr_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares a writeonly attribute on a Struct or class.",
            "files":                        [{"file_line":360,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "attr_writer_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#attr_writer_tag",
            "scope":                        "instance",
            "signature":                    "def attr_writer_tag",
            "source":                       "define_tag \"Attribute Setter\",   :attr_writer, :with_types_and_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":360,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23attr_writer_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":598,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "attribute_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#attribute_directive",
            "scope":                        "instance",
            "signature":                    "def attribute_directive",
            "source":                       "define_directive :attribute, :with_types_and_title, AttributeDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":598,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23attribute_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "List the author or authors of a class, module, or method.",
            "files":                        [{"file_line":367,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "author_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#author_tag",
            "scope":                        "instance",
            "signature":                    "def author_tag",
            "source":                       "define_tag \"Author\",             :author",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":367,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23author_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Marks a method/class as deprecated with an optional description.\nThe description should be used to inform users of the recommended\nmigration path, and/or any useful information about why the object\nwas marked as deprecated.",
            "files":                        [{"file_line":383,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "deprecated_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#deprecated_tag",
            "scope":                        "instance",
            "signature":                    "def deprecated_tag",
            "source":                       "define_tag \"Deprecated\",         :deprecated",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":383,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23deprecated_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":247,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "directive_call",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"},{"parm_type":null,"parm_name":"parser"}],
            "path":                         "YARD::Tags::Library#directive_call",
            "scope":                        "instance",
            "signature":                    "def directive_call(tag, parser)",
            "source":                       "def directive_call(tag, parser)\n  meth = self.class.factory_method_for_directive(tag.tag_name)\n  if meth <= Directive\n    meth = meth.new(tag, parser)\n    meth.call\n    meth\n  else\n    meth.call(tag, parser)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":247,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23directive_call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new directive with tag information and a docstring parser\nobject.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":293,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "directive_create",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"tag_buf"},{"parm_type":null,"parm_name":"parser"}],
            "path":                         "YARD::Tags::Library#directive_create",
            "scope":                        "instance",
            "signature":                    "def directive_create(tag_name, tag_buf, parser)",
            "source":                       "def directive_create(tag_name, tag_buf, parser)\n  meth = self.class.factory_method_for(tag_name)\n  tag = send_to_factory(tag_name, meth, tag_buf)\n  meth = self.class.directive_method_name(tag_name)\n  send(meth, tag, parser)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":293,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23directive_create"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":601,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "endgroup_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#endgroup_directive",
            "scope":                        "instance",
            "signature":                    "def endgroup_directive",
            "source":                       "define_directive :endgroup,                         EndGroupDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":601,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23endgroup_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Show an example snippet of code for an object. The first line\nis an optional title.",
            "files":                        [{"file_line":394,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "example_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#example_tag",
            "scope":                        "instance",
            "signature":                    "def example_tag",
            "source":                       "define_tag \"Example\",            :example,     :with_title_and_text",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":394,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23example_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "A factory class to handle parsing of tags, defaults to {default_factory}",
            "dynamic":                      true,
            "files":                        [{"file_line":261,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "factory",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#factory",
            "scope":                        "instance",
            "signature":                    "def factory",
            "source":                       "def factory\n  @factory\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":261,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23factory"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "A factory class to handle parsing of tags, defaults to {default_factory}",
            "dynamic":                      true,
            "files":                        [{"file_line":261,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "factory=",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Library#factory=",
            "scope":                        "instance",
            "signature":                    "def factory=(value)",
            "source":                       "def factory=(value)\n  @factory = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":261,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23factory%3D"
        },
        {
            "docstring":                    "",
            "files":                        [{"file_line":603,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "group_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#group_directive",
            "scope":                        "instance",
            "signature":                    "def group_directive",
            "source":                       "define_directive :group,                            GroupDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":603,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23group_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":283,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "has_directive?",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"}],
            "path":                         "YARD::Tags::Library#has_directive?",
            "scope":                        "instance",
            "signature":                    "def has_directive?(tag_name)",
            "source":                       "def has_directive?(tag_name)\n  tag_name && respond_to?(self.class.directive_method_name(tag_name))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":283,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23has_directive%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":270,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "has_tag?",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"}],
            "path":                         "YARD::Tags::Library#has_tag?",
            "scope":                        "instance",
            "signature":                    "def has_tag?(tag_name)",
            "source":                       "def has_tag?(tag_name)\n  tag_name && respond_to?(self.class.tag_method_name(tag_name))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":270,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23has_tag%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":"Library.default_factory","parm_name":"factory"}],
            "path":                         "YARD::Tags::Library#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(factory = Library.default_factory)",
            "source":                       "def initialize(factory = Library.default_factory)\n  self.factory = factory\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":607,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "macro_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#macro_directive",
            "scope":                        "instance",
            "signature":                    "def macro_directive",
            "source":                       "define_directive :macro, :with_types_and_title,     MacroDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":607,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23macro_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":611,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "method_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#method_directive",
            "scope":                        "instance",
            "signature":                    "def method_directive",
            "source":                       "define_directive :method, :with_title_and_text,     MethodDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":611,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23method_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds an emphasized note at the top of the docstring for the object",
            "files":                        [{"file_line":402,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "note_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#note_tag",
            "scope":                        "instance",
            "signature":                    "def note_tag",
            "source":                       "define_tag \"Note\",               :note",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":402,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23note_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Describe an options hash in a method. The tag takes the\nname of the options parameter first, followed by optional types,\nthe option key name, a default value for the key and a\ndescription of the option. The default value should be placed within\nparentheses and is optional (can be omitted).\n\nNote that a +@param+ tag need not be defined for the options\nhash itself, though it is useful to do so for completeness.",
            "files":                        [{"file_line":421,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "option_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#option_tag",
            "scope":                        "instance",
            "signature":                    "def option_tag",
            "source":                       "define_tag \"Options Hash\",       :option,      :with_options",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":421,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23option_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Describe that your method can be used in various\ncontexts with various parameters or return types. The first\nline should declare the new method signature, and the following\nindented tag data will be a new documentation string with its\nown tags adding metadata for such an overload.",
            "files":                        [{"file_line":440,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "overload_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#overload_tag",
            "scope":                        "instance",
            "signature":                    "def overload_tag",
            "source":                       "define_tag \"Overloads\",          :overload,    OverloadTag",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":440,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23overload_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Documents a single method parameter with a given name, type\nand optional description.",
            "files":                        [{"file_line":448,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "param_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#param_tag",
            "scope":                        "instance",
            "signature":                    "def param_tag",
            "source":                       "define_tag \"Parameters\",         :param,       :with_types_and_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":448,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23param_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":614,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "parse_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#parse_directive",
            "scope":                        "instance",
            "signature":                    "def parse_directive",
            "source":                       "define_directive :parse, :with_types,               ParseDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":614,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23parse_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Declares that the _logical_ visibility of an object is private.\nIn other words, it specifies that this method should be marked\nprivate but cannot due to Ruby's visibility restrictions. This\nexists for classes, modules and constants that do not obey Ruby's\nvisibility rules. For instance, an inner class might be considered\n\"private\", though Ruby would make no such distinction.\n\nThis tag is meant to be used in conjunction with the +--no-private+\ncommand-line option, and is required to actually remove these objects\nfrom documentation output. See {file:README.md} for more information on\nswitches.\n\nIf you simply want to set the API visibility of a method, you should\nlook at the {tag:api} tag instead.",
            "files":                        [{"file_line":476,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "private_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#private_tag",
            "scope":                        "instance",
            "signature":                    "def private_tag",
            "source":                       "define_tag \"Private\",            :private",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":476,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23private_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Describes that a method may raise a given exception, with\nan optional description of what it may mean.",
            "files":                        [{"file_line":485,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "raise_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#raise_tag",
            "scope":                        "instance",
            "signature":                    "def raise_tag",
            "source":                       "define_tag \"Raises\",             :raise,       :with_types",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":485,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23raise_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Describes the return value (and type or types) of a method.\nYou can list multiple return tags for a method in the case\nwhere a method has distinct return cases. In this case, each\ncase should begin with \"if ...\".",
            "files":                        [{"file_line":501,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "return_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#return_tag",
            "scope":                        "instance",
            "signature":                    "def return_tag",
            "source":                       "define_tag \"Returns\",            :return,      :with_types",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":501,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23return_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the scope of a DSL method. Only applicable to DSL method\ncalls. Acceptable values are 'class' or 'instance'",
            "files":                        [{"file_line":619,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "scope_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#scope_directive",
            "scope":                        "instance",
            "signature":                    "def scope_directive",
            "source":                       "define_directive :scope,                            ScopeDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":619,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23scope_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "\"See Also\" references for an object. Accepts URLs or\nother code objects with an optional description at the end.\nNote that the URL or object will be automatically linked by\nYARD and does not need to be formatted with markup.",
            "files":                        [{"file_line":513,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "see_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#see_tag",
            "scope":                        "instance",
            "signature":                    "def see_tag",
            "source":                       "define_tag \"See Also\",           :see,         :with_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":513,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23see_tag"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":235,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "send_to_factory",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"meth"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::Library#send_to_factory",
            "scope":                        "instance",
            "signature":                    "def send_to_factory(tag_name, meth, text)",
            "source":                       "def send_to_factory(tag_name, meth, text)\n  meth = meth.to_s\n  send_name = \"parse_tag\" + (meth.empty? ? \"\" : \"_\" + meth)\n  if @factory.respond_to?(send_name)\n    arity = @factory.method(send_name).arity\n    @factory.send(send_name, tag_name, text)\n  else\n    raise NoMethodError, \"Factory #{@factory.class_name} does not implement factory method :#{meth}.\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":235,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23send_to_factory"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Lists the version that the object was first added.",
            "files":                        [{"file_line":521,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "since_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#since_tag",
            "scope":                        "instance",
            "signature":                    "def since_tag",
            "source":                       "define_tag \"Since\",              :since",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":521,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23since_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new {Tag} object with a given tag name and data",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":276,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "tag_create",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"tag_buf"}],
            "path":                         "YARD::Tags::Library#tag_create",
            "scope":                        "instance",
            "signature":                    "def tag_create(tag_name, tag_buf)",
            "source":                       "def tag_create(tag_name, tag_buf)\n  send(self.class.tag_method_name(tag_name), tag_buf)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":276,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23tag_create"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Marks a TODO note in the object being documented.\nFor reference, objects with TODO items can be enumerated\nfrom the command line with a simple command:\n\n  !!!sh\n  mocker$ yard list --query '@todo'\n  lib/mocker/mocker.rb:15: Mocker\n  lib/mocker/report/html.rb:5: Mocker::Report::Html\n\nYARD can also be used to enumerate the TODO items from\na short script:\n\n  !!!ruby\n  require 'yard'\n  YARD::Registry.load!.all.each do |o|\n    puts o.tag(:todo).text if o.tag(:todo)\n  end",
            "files":                        [{"file_line":547,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "todo_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#todo_tag",
            "scope":                        "instance",
            "signature":                    "def todo_tag",
            "source":                       "define_tag \"Todo Item\",          :todo",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":547,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23todo_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Lists the version of a class, module or method. This is\nsimilar to a library version, but at finer granularity.\nIn some cases, version of specific modules, classes, methods\nor generalized components might change independently between\nreleases. A version tag is used to infer the API compatibility\nof a specific object.",
            "files":                        [{"file_line":560,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "version_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#version_tag",
            "scope":                        "instance",
            "signature":                    "def version_tag",
            "source":                       "define_tag \"Version\",            :version",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":560,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23version_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the visibility of a DSL method. Only applicable to\nDSL method calls. Acceptable values are public, protected, or private.",
            "files":                        [{"file_line":624,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "visibility_directive",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#visibility_directive",
            "scope":                        "instance",
            "signature":                    "def visibility_directive",
            "source":                       "define_directive :visibility,                       VisibilityDirective",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":624,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23visibility_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Describes what a method might yield to a given block.\nThe types specifier list should not list types, but names\nof the parameters yielded to the block. If you define\nparameters with +@yieldparam+, you do not need to define\nthe parameters in the type specification of +@yield+ as\nwell.",
            "files":                        [{"file_line":576,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "yield_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#yield_tag",
            "scope":                        "instance",
            "signature":                    "def yield_tag",
            "source":                       "define_tag \"Yields\",             :yield,       :with_types",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":576,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23yield_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Defines a parameter yielded by a block. If you define the\nparameters with +@yieldparam+, you do not need to define\nthem via +@yield+ as well.",
            "files":                        [{"file_line":585,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "yieldparam_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#yieldparam_tag",
            "scope":                        "instance",
            "signature":                    "def yieldparam_tag",
            "source":                       "define_tag \"Yield Parameters\",   :yieldparam,  :with_types_and_name",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":585,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23yieldparam_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Documents the value and type that the block is expected\nto return to the method.",
            "files":                        [{"file_line":594,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "yieldreturn_tag",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library#yieldreturn_tag",
            "scope":                        "instance",
            "signature":                    "def yieldreturn_tag",
            "source":                       "define_tag \"Yield Returns\",      :yieldreturn, :with_types",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":594,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary%23yieldreturn_tag"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Replace the factory object responsible for parsing tags by setting\nthis to an object (or class) that responds to +parse_TAGNAME+ methods\nwhere +TAGNAME+ is the name of the tag.\n\nYou should set this value before performing any source parsing with\nYARD, otherwise your factory class will not be used.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":84,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "default_factory",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.default_factory",
            "scope":                        "class",
            "signature":                    "def default_factory",
            "source":                       "def default_factory\n  @default_factory ||= DefaultFactory.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":84,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.default_factory"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":84,"file_path":"lib/yard/tags/library.rb"},{"file_line":88,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "default_factory=",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"factory"}],
            "path":                         "YARD::Tags::Library.default_factory=",
            "scope":                        "class",
            "signature":                    "def default_factory=(value)",
            "source":                       "def default_factory\n  @default_factory ||= DefaultFactory.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":84,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"},{"file_line":88,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.default_factory%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":198,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "define_directive",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"},{"parm_type":"nil","parm_name":"tag_meth"},{"parm_type":"nil","parm_name":"directive_class"}],
            "path":                         "YARD::Tags::Library.define_directive",
            "scope":                        "class",
            "signature":                    "def define_directive(tag, tag_meth = nil, directive_class = nil)",
            "source":                       "def define_directive(tag, tag_meth = nil, directive_class = nil)\n  directive_meth = directive_method_name(tag)\n  if directive_class.nil?\n    tag_meth, directive_class = nil, tag_meth\n  end\n  class_eval \"def \\#{directive_meth}(tag, parser)\\ndirective_call(tag, parser)\\nend\\n\", __FILE__, __LINE__\n\n  @factory_methods ||= SymbolHash.new(false)\n  @factory_methods.update(tag => tag_meth)\n  @directive_factory_classes ||= SymbolHash.new(false)\n  @directive_factory_classes.update(tag => directive_class)\n\n  tag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":198,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.define_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Convenience method to define a new tag using one of {Tag}'s factory methods, or the\nregular {DefaultFactory#parse_tag} factory method if none is supplied.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":158,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "define_tag",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"label"},{"parm_type":null,"parm_name":"tag"},{"parm_type":"nil","parm_name":"meth"}],
            "path":                         "YARD::Tags::Library.define_tag",
            "scope":                        "class",
            "signature":                    "def define_tag(label, tag, meth = nil)",
            "source":                       "def define_tag(label, tag, meth = nil)\n  tag_meth = tag_method_name(tag)\n  if meth.is_a?(Class) && Tag > meth\n    class_eval \"def \\#{tag_meth}(text)\\n\\#{meth}.new(\\#{tag.inspect}, text)\\nend\\n\", __FILE__, __LINE__\n  else\n    class_eval \"def \\#{tag_meth}(text)\\nsend_to_factory(\\#{tag.inspect}, \\#{meth.inspect}, text)\\nend\\n\", __FILE__, __LINE__\n  end\n\n  @labels ||= SymbolHash.new(false)\n  @labels.update(tag => label)\n  @factory_methods ||= SymbolHash.new(false)\n  @factory_methods.update(tag => meth)\n  tag\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":158,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.define_tag"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":222,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "directive_method_name",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"}],
            "path":                         "YARD::Tags::Library.directive_method_name",
            "scope":                        "class",
            "signature":                    "def directive_method_name(tag_name)",
            "source":                       "def directive_method_name(tag_name)\n  tag_or_directive_method_name(tag_name, 'directive')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":222,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.directive_method_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the factory method used to parse the tag text for a specific tag",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":100,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "factory_method_for",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag"}],
            "path":                         "YARD::Tags::Library.factory_method_for",
            "scope":                        "class",
            "signature":                    "def factory_method_for(tag)",
            "source":                       "def factory_method_for(tag)\n  @factory_methods[tag]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":100,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.factory_method_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the factory method used to parse the tag text for a specific\ndirective",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":113,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "factory_method_for_directive",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"directive"}],
            "path":                         "YARD::Tags::Library.factory_method_for_directive",
            "scope":                        "class",
            "signature":                    "def factory_method_for_directive(directive)",
            "source":                       "def factory_method_for_directive(directive)\n  @directive_factory_classes[directive]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":113,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.factory_method_for_directive"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":66,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "instance",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.instance",
            "scope":                        "class",
            "signature":                    "def instance",
            "source":                       "def instance\n  @instance ||= new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":66,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.instance"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":66,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "instance=",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Library.instance=",
            "scope":                        "class",
            "signature":                    "def instance=(value)",
            "source":                       "def instance\n  @instance ||= new\nend",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":66,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.instance%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "labels",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.labels",
            "scope":                        "class",
            "signature":                    "def labels",
            "source":                       "def labels\n  @labels\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.labels"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sorts the labels lexically by their label name, often used when displaying\nthe tags.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "sorted_labels",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.sorted_labels",
            "scope":                        "class",
            "signature":                    "def sorted_labels",
            "source":                       "def sorted_labels\n  labels.sort_by {|a| a.last.downcase }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.sorted_labels"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":218,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "tag_method_name",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"}],
            "path":                         "YARD::Tags::Library.tag_method_name",
            "scope":                        "class",
            "signature":                    "def tag_method_name(tag_name)",
            "source":                       "def tag_method_name(tag_name)\n  tag_or_directive_method_name(tag_name)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":218,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.tag_method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":228,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "tag_or_directive_method_name",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":"'tag'","parm_name":"type"}],
            "path":                         "YARD::Tags::Library.tag_or_directive_method_name",
            "scope":                        "class",
            "signature":                    "def tag_or_directive_method_name(tag_name, type = 'tag')",
            "source":                       "def tag_or_directive_method_name(tag_name, type = 'tag')\n  \"#{tag_name.to_s.gsub('.', '_')}_#{type}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":228,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.tag_or_directive_method_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the list of tags that should apply to any children inside the\nnamespace they are defined in. For instance, a \"@since\" tag should\napply to all methods inside a module it is defined in. Transitive\ntags can be overridden by directly defining a tag on the child object.",
            "dynamic":                      true,
            "files":                        [{"file_line":137,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "transitive_tags",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.transitive_tags",
            "scope":                        "class",
            "signature":                    "def transitive_tags",
            "source":                       "def transitive_tags\n  @transitive_tags\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":137,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.transitive_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the list of tags that should apply to any children inside the\nnamespace they are defined in. For instance, a \"@since\" tag should\napply to all methods inside a module it is defined in. Transitive\ntags can be overridden by directly defining a tag on the child object.",
            "dynamic":                      true,
            "files":                        [{"file_line":137,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "transitive_tags=",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Library.transitive_tags=",
            "scope":                        "class",
            "signature":                    "def transitive_tags=(value)",
            "source":                       "def transitive_tags=(value)\n  @transitive_tags = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":137,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.transitive_tags%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the list of tags to display when rendering templates. The order of\ntags in the list is also significant, as it represents the order that\ntags are displayed in templates.\n\nYou can use the {Array#place} to insert new tags to be displayed in\nthe templates at specific positions:\n\n  Library.visible_tags.place(:mytag).before(:return)",
            "dynamic":                      true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "visible_tags",
            "namespace":                    "YARD::Tags::Library",
            "path":                         "YARD::Tags::Library.visible_tags",
            "scope":                        "class",
            "signature":                    "def visible_tags",
            "source":                       "def visible_tags\n  @visible_tags\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.visible_tags"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the list of tags to display when rendering templates. The order of\ntags in the list is also significant, as it represents the order that\ntags are displayed in templates.\n\nYou can use the {Array#place} to insert new tags to be displayed in\nthe templates at specific positions:\n\n  Library.visible_tags.place(:mytag).before(:return)",
            "dynamic":                      true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/tags/library.rb"}],
            "name":                         "visible_tags=",
            "namespace":                    "YARD::Tags::Library",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Library.visible_tags=",
            "scope":                        "class",
            "signature":                    "def visible_tags=(value)",
            "source":                       "def visible_tags=(value)\n  @visible_tags = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Ftags%2Flibrary.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ALibrary.visible_tags%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::MacroDirective#call","YARD::Tags::MacroDirective#new?","YARD::Tags::MacroDirective#attach?","YARD::Tags::MacroDirective#class_method?","YARD::Tags::MacroDirective#anonymous?","YARD::Tags::MacroDirective#expand","YARD::Tags::MacroDirective#find_or_create","YARD::Tags::MacroDirective#warn"],
            "current_file_has_comments":    true,
            "docstring":                    "Defines a block of text to be expanded whenever the macro is called by name\nin subsequent docstrings. The macro data can be any arbitrary text data, be\nit regular documentation, meta-data tags or directives.\n\n== Defining a Macro\n\nA macro must first be defined in order to be used. Note that a macro is also\nexpanded upon definition if it defined on an object (the docstring of a\nmethod, class, module or constant object as opposed to a free standing\ncomment). To define a macro, use the \"new\" or \"attach\" identifier in the\ntypes specifier list. A macro will also automatically be created if an\nindented macro data block is given, so the keywords are not strictly needed.\n\n=== Anonymous Macros\n\nIn addition to standard named macros, macros can be defined anonymously if\nno name is given. In this case, they can not be re-used in future docstrings,\nbut they will expand in the first definition. This is useful when needing\nto take advantage of the macro expansion variables (described below).\n\n== Using a Macro\n\nTo re-use a macro in another docstring after it is defined, simply use\n<tt>@!macro the_name</tt> with no indented block of macro data. The resulting\ndata will be expanded in place.\n\n== Attaching a Macro to a DSL Method\n\nMacros can be defined to auto-expand on DSL-style class method calls. To\ndefine a macro to be auto expanded in this way, use the \"attach\" keyword\nin the type specifier list (\"new\" is implied).\n\nAttached macros can also be attached directly on the class method declaration\nthat provides the DSL method to its subclasses. The syntax in either case\nis the same.\n\n== Macro Expansion Variables\n\nIn the case of using macros on DSL-style method calls, a number of expansion\nvariables can be used for interpolation inside of the macro data. The variables,\nsimilar in syntax to Ruby's global variables, are as follows:\n\n* $0 - the method name being called\n* $1, $2, $3, ... - the Nth argument in the method call\n* $& - the full source line\n\nThe following example shows what the expansion variables might hold for a given\nDSL method call:\n\n  property :foo, :a, :b, :c, String\n  # $0 => \"property\"\n  # $1 => \"foo\"\n  # $2 => \"a\"\n  # $& => \"property :foo, :a, :b, :c, String\"\n\n=== Ranges\n\nRanges are also acceptable with the syntax <tt>${N-M}</tt>. Negative values\non either N or M are valid, and refer to indexes from the end of the list.\nConsider a DSL method that creates a method using the first argument with\nargument names following, ending with the return type of the method. This\ncould be documented as:\n\n    # @!macro dsl_method\n    #   @!method $1(${2--2})\n    #   @return [${-1}] the return value of $0\n    create_method_with_args :foo, :a, :b, :c, String\n\nAs described, the method is using the signature <tt>foo(a, b, c)</tt> and the return\ntype from the last argument, +String+. When using ranges, tokens are joined\nwith commas. Note that this includes using $0:\n\n    !!!plain\n    $0-1 # => Interpolates to \"create_method_with_args, foo\"\n\nIf you want to separate them with spaces, use <tt>$1 $2 $3 $4 ...</tt>. Note that\nif the token cannot be expanded, it will return the empty string (not an error),\nso it would be safe to list <tt>$1 $2 ... $10</tt>, for example.\n\n=== Escaping Interpolation\n\nInterpolation can be escaped by prefixing the +$+ with +\\+, like so:\n\n    # @!macro foo\n    #   I have \\$2.00 USD.",
            "dynamic":                      true,
            "files":                        [{"file_line":250,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "MacroDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::MacroDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AMacroDirective%23call","YARD%3A%3ATags%3A%3AMacroDirective%23new%3F","YARD%3A%3ATags%3A%3AMacroDirective%23attach%3F","YARD%3A%3ATags%3A%3AMacroDirective%23class_method%3F","YARD%3A%3ATags%3A%3AMacroDirective%23anonymous%3F","YARD%3A%3ATags%3A%3AMacroDirective%23expand","YARD%3A%3ATags%3A%3AMacroDirective%23find_or_create","YARD%3A%3ATags%3A%3AMacroDirective%23warn"],
            "y_ld:files":                   [{"file_line":250,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":278,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "anonymous?",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#anonymous?",
            "scope":                        "instance",
            "signature":                    "def anonymous?",
            "source":                       "def anonymous?\n  tag.name.nil? || tag.name.empty?\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":278,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23anonymous%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":268,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "attach?",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#attach?",
            "scope":                        "instance",
            "signature":                    "def attach?",
            "source":                       "def attach?\n   class_method? || # always attach to class methods\n    (tag.types && tag.types.include?('attach'))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":268,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23attach%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":251,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  raise TagFormatError if tag.name.nil? && tag.text.to_s.empty?\n  unless macro_data = find_or_create\n    warn\n    return\n  end\n\n  self.expanded_text = expand(macro_data)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":251,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23call"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":273,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "class_method?",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#class_method?",
            "scope":                        "instance",
            "signature":                    "def class_method?",
            "source":                       "def class_method?\n  object && object.is_a?(CodeObjects::MethodObject) &&\n    object.scope == :class\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":273,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23class_method%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":282,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "expand",
            "namespace":                    "YARD::Tags::MacroDirective",
            "parameters":                   [{"parm_type":null,"parm_name":"macro_data"}],
            "path":                         "YARD::Tags::MacroDirective#expand",
            "scope":                        "instance",
            "signature":                    "def expand(macro_data)",
            "source":                       "def expand(macro_data)\n  return if attach? && class_method?\n  return if !anonymous? && new? &&\n    (!handler || handler.statement.source.empty?)\n  call_params = []\n  caller_method = nil\n  full_source = ''\n  if handler\n    call_params = handler.call_params\n    caller_method = handler.caller_method\n    full_source = handler.statement.source\n  end\n  all_params = ([caller_method] + call_params).compact\n  CodeObjects::MacroObject.expand(macro_data, all_params, full_source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":282,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23expand"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":298,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "find_or_create",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#find_or_create",
            "scope":                        "instance",
            "signature":                    "def find_or_create",
            "source":                       "def find_or_create\n  if new? || attach?\n    if handler && attach?\n      obj = object ? object :\n        P(\"#{handler.namespace}.#{handler.caller_method}\")\n    else\n      obj = nil\n    end\n    if anonymous? # anonymous macro\n      return tag.text || \"\"\n    else\n      macro = CodeObjects::MacroObject.create(tag.name, tag.text, obj)\n    end\n  else\n    macro = CodeObjects::MacroObject.find(tag.name)\n  end\n\n  macro ? macro.macro_data : nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":298,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23find_or_create"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "new?",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#new?",
            "scope":                        "instance",
            "signature":                    "def new?",
            "source":                       "def new?\n  (tag.types && tag.types.include?('new')) ||\n    (tag.text && !tag.text.strip.empty?)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23new%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":318,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "warn",
            "namespace":                    "YARD::Tags::MacroDirective",
            "path":                         "YARD::Tags::MacroDirective#warn",
            "scope":                        "instance",
            "signature":                    "def warn",
            "source":                       "def warn\n  if object && handler\n    log.warn \"Invalid/missing macro name for \" +\n      \"#{object.path} (#{handler.parser.file}:#{handler.statement.line})\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":318,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMacroDirective%23warn"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::MethodDirective::SCOPE_MATCH","YARD::Tags::MethodDirective#call","YARD::Tags::MethodDirective#after_parse","YARD::Tags::MethodDirective#method_name","YARD::Tags::MethodDirective#method_signature","YARD::Tags::MethodDirective#sanitized_tag_signature","YARD::Tags::MethodDirective#use_indented_text","YARD::Tags::MethodDirective#create_object"],
            "current_file_has_comments":    true,
            "docstring":                    "Defines a method object with a given method signature, using indented\nblock data as the method's docstring. The signature is similar to the\n{tag:overload} tag. The comment containing this directive does not need\nto be attached to any source, but if it is, that source code will be\nused as the method's source.\n\nTo define an attribute method, see {tag:!attribute}",
            "dynamic":                      true,
            "files":                        [{"file_line":350,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "MethodDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::MethodDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AMethodDirective%3A%3ASCOPE_MATCH","YARD%3A%3ATags%3A%3AMethodDirective%23call","YARD%3A%3ATags%3A%3AMethodDirective%23after_parse","YARD%3A%3ATags%3A%3AMethodDirective%23method_name","YARD%3A%3ATags%3A%3AMethodDirective%23method_signature","YARD%3A%3ATags%3A%3AMethodDirective%23sanitized_tag_signature","YARD%3A%3ATags%3A%3AMethodDirective%23use_indented_text","YARD%3A%3ATags%3A%3AMethodDirective%23create_object"],
            "y_ld:files":                   [{"file_line":350,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":355,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "after_parse",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#after_parse",
            "scope":                        "instance",
            "signature":                    "def after_parse",
            "source":                       "def after_parse\n  return unless handler\n  use_indented_text\n  create_object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":355,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23after_parse"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":353,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#call",
            "scope":                        "instance",
            "signature":                    "def call; end",
            "source":                       "def call; end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":353,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23call"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":393,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "create_object",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#create_object",
            "scope":                        "instance",
            "signature":                    "def create_object",
            "source":                       "def create_object\n  name = method_name\n  scope = parser.state.scope || handler.scope\n  visibility = parser.state.visibility || handler.visibility\n  ns = CodeObjects::NamespaceObject === object ? object : handler.namespace\n  obj = CodeObjects::MethodObject.new(ns, name, scope)\n  handler.register_file_info(obj)\n  handler.register_source(obj)\n  handler.register_visibility(obj, visibility)\n  handler.register_group(obj)\n  obj.signature = method_signature\n  obj.docstring = Docstring.new!(parser.text, parser.tags, obj,\n    parser.raw_text)\n  handler.register_module_function(obj)\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":393,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23create_object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":363,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "method_name",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#method_name",
            "scope":                        "instance",
            "signature":                    "def method_name",
            "source":                       "def method_name\n  sig = sanitized_tag_signature\n  if sig && sig =~ /^#{CodeObjects::METHODNAMEMATCH}(\\s|\\(|$)/\n    sig[/\\A\\s*([^\\(; \\t]+)/, 1]\n  else\n    handler.call_params.first\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":363,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23method_name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":372,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "method_signature",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#method_signature",
            "scope":                        "instance",
            "signature":                    "def method_signature",
            "source":                       "def method_signature\n  \"def #{sanitized_tag_signature || method_name}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":372,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23method_signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":376,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "sanitized_tag_signature",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#sanitized_tag_signature",
            "scope":                        "instance",
            "signature":                    "def sanitized_tag_signature",
            "source":                       "def sanitized_tag_signature\n  if tag.name && tag.name =~ SCOPE_MATCH\n    parser.state.scope = :class\n    $'\n  else\n    tag.name\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":376,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23sanitized_tag_signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":385,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "use_indented_text",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective#use_indented_text",
            "scope":                        "instance",
            "signature":                    "def use_indented_text",
            "source":                       "def use_indented_text\n  return if tag.text.empty?\n  handler = parser.handler\n  object = parser.object\n  self.parser = parser.class.new(parser.library)\n  parser.parse(tag.text, object, handler)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":385,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%23use_indented_text"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":351,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "SCOPE_MATCH",
            "namespace":                    "YARD::Tags::MethodDirective",
            "path":                         "YARD::Tags::MethodDirective::SCOPE_MATCH",
            "signature":                    "SCOPE_MATCH = /\\A\\s*self\\s*\\.\\s*/",
            "source":                       "SCOPE_MATCH = /\\A\\s*self\\s*\\.\\s*/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A\\s*self\\s*\\.\\s*/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":351,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AMethodDirective%3A%3ASCOPE_MATCH"
        },
        {
            "attributes":                   {"class":{},"instance":{"pair":{"write":"YARD::Tags::OptionTag#pair=","read":"YARD::Tags::OptionTag#pair"}}},
            "children":                     ["YARD::Tags::OptionTag#pair=","YARD::Tags::OptionTag#pair","YARD::Tags::OptionTag#initialize"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/option_tag.rb"}],
            "name":                         "OptionTag",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::OptionTag",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Tag",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AOptionTag%23pair%3D","YARD%3A%3ATags%3A%3AOptionTag%23pair","YARD%3A%3ATags%3A%3AOptionTag%23initialize"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOptionTag",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ATag"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/tags/option_tag.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::OptionTag",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"pair"}],
            "path":                         "YARD::Tags::OptionTag#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag_name, name, pair)",
            "source":                       "def initialize(tag_name, name, pair)\n  super(tag_name, nil, nil, name)\n  @pair = pair\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOptionTag%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute pair",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/option_tag.rb"}],
            "name":                         "pair",
            "namespace":                    "YARD::Tags::OptionTag",
            "path":                         "YARD::Tags::OptionTag#pair",
            "scope":                        "instance",
            "signature":                    "def pair",
            "source":                       "def pair\n  @pair\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOptionTag%23pair"
        },
        {
            "docstring":                    "Sets the attribute pair",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/option_tag.rb"}],
            "name":                         "pair=",
            "namespace":                    "YARD::Tags::OptionTag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::OptionTag#pair=",
            "scope":                        "instance",
            "signature":                    "def pair=(value)",
            "source":                       "def pair=(value)\n  @pair = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Foption_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOptionTag%23pair%3D"
        },
        {
            "aliases":                      {"YARD::Tags::OverloadTag#kind_of?":"is_a?"},
            "attributes":                   {"class":{},"instance":{"signature":{"write":null,"read":"YARD::Tags::OverloadTag#signature"},"docstring":{"write":null,"read":"YARD::Tags::OverloadTag#docstring"},"parameters":{"write":null,"read":"YARD::Tags::OverloadTag#parameters"}}},
            "children":                     ["YARD::Tags::OverloadTag#signature","YARD::Tags::OverloadTag#parameters","YARD::Tags::OverloadTag#docstring","YARD::Tags::OverloadTag#initialize","YARD::Tags::OverloadTag#tag","YARD::Tags::OverloadTag#tags","YARD::Tags::OverloadTag#has_tag?","YARD::Tags::OverloadTag#object=","YARD::Tags::OverloadTag#name","YARD::Tags::OverloadTag#method_missing","YARD::Tags::OverloadTag#type","YARD::Tags::OverloadTag#is_a?","YARD::Tags::OverloadTag#kind_of?","YARD::Tags::OverloadTag#parse_tag","YARD::Tags::OverloadTag#parse_signature"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "OverloadTag",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::OverloadTag",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Tag",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AOverloadTag%23signature","YARD%3A%3ATags%3A%3AOverloadTag%23parameters","YARD%3A%3ATags%3A%3AOverloadTag%23docstring","YARD%3A%3ATags%3A%3AOverloadTag%23initialize","YARD%3A%3ATags%3A%3AOverloadTag%23tag","YARD%3A%3ATags%3A%3AOverloadTag%23tags","YARD%3A%3ATags%3A%3AOverloadTag%23has_tag%3F","YARD%3A%3ATags%3A%3AOverloadTag%23object%3D","YARD%3A%3ATags%3A%3AOverloadTag%23name","YARD%3A%3ATags%3A%3AOverloadTag%23method_missing","YARD%3A%3ATags%3A%3AOverloadTag%23type","YARD%3A%3ATags%3A%3AOverloadTag%23is_a%3F","YARD%3A%3ATags%3A%3AOverloadTag%23kind_of%3F","YARD%3A%3ATags%3A%3AOverloadTag%23parse_tag","YARD%3A%3ATags%3A%3AOverloadTag%23parse_signature"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ATag"
        },
        {
            "docstring":                    "Returns the value of attribute docstring",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "docstring",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#docstring",
            "scope":                        "instance",
            "signature":                    "def docstring",
            "source":                       "def docstring\n  @docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23docstring"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "has_tag?",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Tags::OverloadTag#has_tag?",
            "scope":                        "instance",
            "signature":                    "def has_tag?(name) docstring.has_tag?(name) end",
            "source":                       "def has_tag?(name) docstring.has_tag?(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23has_tag%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::OverloadTag#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag_name, text)",
            "source":                       "def initialize(tag_name, text)\n  super(tag_name, nil)\n  parse_tag(text)\n  parse_signature\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "is_a?",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Tags::OverloadTag#is_a?",
            "scope":                        "instance",
            "signature":                    "def is_a?(other)",
            "source":                       "def is_a?(other)\n  object.is_a?(other) || self.class >= other.class || false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23is_a%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "kind_of?",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#kind_of?",
            "scope":                        "instance",
            "signature":                    "def is_a?(other)",
            "source":                       "def is_a?(other)\n  object.is_a?(other) || self.class >= other.class || false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23kind_of%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Tags::OverloadTag#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(*args, &block)",
            "source":                       "def method_missing(*args, &block)\n  object.send(*args, &block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23method_missing"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":"false","parm_name":"prefix"}],
            "path":                         "YARD::Tags::OverloadTag#name",
            "scope":                        "instance",
            "signature":                    "def name(prefix = false)",
            "source":                       "def name(prefix = false)\n  return @name unless prefix\n  object.scope == :class ? @name.to_s : \"#{object.send(:sep)}#{@name}\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::OverloadTag#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  super(value)\n  docstring.object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23object%3D"
        },
        {
            "docstring":                    "Returns the value of attribute parameters",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "parameters",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#parameters",
            "scope":                        "instance",
            "signature":                    "def parameters",
            "source":                       "def parameters\n  @parameters\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23parameters"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "parse_signature",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#parse_signature",
            "scope":                        "instance",
            "signature":                    "def parse_signature",
            "source":                       "def parse_signature\n  if signature =~ /^(?:def\\s)?\\s*(#{CodeObjects::METHODMATCH})(?:(?:\\s+|\\s*\\()(.*)(?:\\)\\s*$)?)?/m\n    meth, args = $1, $2\n    meth.gsub!(/\\s+/,'')\n    # FIXME refactor this code to not make use of the Handlers::Base class (tokval_list should be moved)\n    toks = YARD::Parser::Ruby::Legacy::TokenList.new(args)\n    args = YARD::Handlers::Ruby::Legacy::Base.new(nil, nil).send(:tokval_list, toks, :all)\n    args.map! {|a| k, v = *a.split('=', 2); [k.strip.to_sym, (v ? v.strip : nil)] } if args\n    @name = meth.to_sym\n    @parameters = args\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23parse_signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":41,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "parse_tag",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Tags::OverloadTag#parse_tag",
            "scope":                        "instance",
            "signature":                    "def parse_tag(text)",
            "source":                       "def parse_tag(text)\n  @signature, text = *text.split(/\\r?\\n/, 2)\n  @signature.strip!\n  text ||= \"\"\n  numspaces = text[/\\A(\\s*)/, 1].length\n  text.gsub!(/^[ \\t]{#{numspaces}}/, '')\n  text.strip!\n  @docstring = Docstring.new(text, nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":41,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23parse_tag"
        },
        {
            "docstring":                    "Returns the value of attribute signature",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "signature",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#signature",
            "scope":                        "instance",
            "signature":                    "def signature",
            "source":                       "def signature\n  @signature\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23signature"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "tag",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":null,"parm_name":"name"}],
            "path":                         "YARD::Tags::OverloadTag#tag",
            "scope":                        "instance",
            "signature":                    "def tag(name) docstring.tag(name) end",
            "source":                       "def tag(name) docstring.tag(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23tag"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":13,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "tags",
            "namespace":                    "YARD::Tags::OverloadTag",
            "parameters":                   [{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::Tags::OverloadTag#tags",
            "scope":                        "instance",
            "signature":                    "def tags(name = nil) docstring.tags(name) end",
            "source":                       "def tags(name = nil) docstring.tags(name) end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":13,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23tags"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/tags/overload_tag.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::Tags::OverloadTag",
            "path":                         "YARD::Tags::OverloadTag#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  object.type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Ftags%2Foverload_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AOverloadTag%23type"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::ParseDirective#call"],
            "current_file_has_comments":    true,
            "docstring":                    "Parses a block of code as if it were present in the source file at that\nlocation. This directive is useful if a class has dynamic meta-programmed\nbehaviour that cannot be recognized by YARD.\n\nYou can specify the language of the code block using the types\nspecification list. By default, the code language is \"ruby\".",
            "dynamic":                      true,
            "files":                        [{"file_line":517,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "ParseDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::ParseDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AParseDirective%23call"],
            "y_ld:files":                   [{"file_line":517,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AParseDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":518,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::ParseDirective",
            "path":                         "YARD::Tags::ParseDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  lang = tag.types ? tag.types.first.to_sym :\n    (handler ? handler.parser.parser_type : :ruby)\n  if handler && lang == handler.parser.parser_type\n    pclass = Parser::SourceParser.parser_types[handler.parser.parser_type]\n    pobj = pclass.new(tag.text, handler.parser.file)\n    pobj.parse\n    handler.parser.process(pobj.enumerator)\n  else # initialize a new parse chain\n    src_parser = Parser::SourceParser.new(lang, handler ? handler.globals : nil)\n    src_parser.file = handler.parser.file if handler\n    src_parser.parse(StringIO.new(tag.text))\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":518,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AParseDirective%23call"
        },
        {
            "attributes":                   {"class":{},"instance":{"owner":{"write":"YARD::Tags::RefTag#owner=","read":"YARD::Tags::RefTag#owner"}}},
            "children":                     ["YARD::Tags::RefTag#owner=","YARD::Tags::RefTag#owner"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/ref_tag.rb"}],
            "name":                         "RefTag",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::RefTag",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ARefTag%23owner%3D","YARD%3A%3ATags%3A%3ARefTag%23owner"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Fref_tag.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTag"
        },
        {
            "docstring":                    "Returns the value of attribute owner",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag.rb"}],
            "name":                         "owner",
            "namespace":                    "YARD::Tags::RefTag",
            "path":                         "YARD::Tags::RefTag#owner",
            "scope":                        "instance",
            "signature":                    "def owner",
            "source":                       "def owner\n  @owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTag%23owner"
        },
        {
            "docstring":                    "Sets the attribute owner",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag.rb"}],
            "name":                         "owner=",
            "namespace":                    "YARD::Tags::RefTag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::RefTag#owner=",
            "scope":                        "instance",
            "signature":                    "def owner=(value)",
            "source":                       "def owner=(value)\n  @owner = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTag%23owner%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{"owner":{"write":"YARD::Tags::RefTagList#owner=","read":"YARD::Tags::RefTagList#owner"},"name":{"write":"YARD::Tags::RefTagList#name=","read":"YARD::Tags::RefTagList#name"},"tag_name":{"write":"YARD::Tags::RefTagList#tag_name=","read":"YARD::Tags::RefTagList#tag_name"}}},
            "children":                     ["YARD::Tags::RefTagList#owner=","YARD::Tags::RefTagList#owner","YARD::Tags::RefTagList#tag_name=","YARD::Tags::RefTagList#tag_name","YARD::Tags::RefTagList#name=","YARD::Tags::RefTagList#name","YARD::Tags::RefTagList#initialize","YARD::Tags::RefTagList#tags"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "RefTagList",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::RefTagList",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ARefTagList%23owner%3D","YARD%3A%3ATags%3A%3ARefTagList%23owner","YARD%3A%3ATags%3A%3ARefTagList%23tag_name%3D","YARD%3A%3ATags%3A%3ARefTagList%23tag_name","YARD%3A%3ATags%3A%3ARefTagList%23name%3D","YARD%3A%3ATags%3A%3ARefTagList%23name","YARD%3A%3ATags%3A%3ARefTagList%23initialize","YARD%3A%3ATags%3A%3ARefTagList%23tags"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::RefTagList",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"owner"},{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::Tags::RefTagList#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag_name, owner, name = nil)",
            "source":                       "def initialize(tag_name, owner, name = nil)\n  @owner = CodeObjects::Proxy === owner ? owner : P(owner)\n  @tag_name = tag_name.to_s\n  @name = name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23initialize"
        },
        {
            "docstring":                    "Returns the value of attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Tags::RefTagList",
            "path":                         "YARD::Tags::RefTagList#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23name"
        },
        {
            "docstring":                    "Sets the attribute name",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::Tags::RefTagList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::RefTagList#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23name%3D"
        },
        {
            "docstring":                    "Returns the value of attribute owner",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "owner",
            "namespace":                    "YARD::Tags::RefTagList",
            "path":                         "YARD::Tags::RefTagList#owner",
            "scope":                        "instance",
            "signature":                    "def owner",
            "source":                       "def owner\n  @owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23owner"
        },
        {
            "docstring":                    "Sets the attribute owner",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "owner=",
            "namespace":                    "YARD::Tags::RefTagList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::RefTagList#owner=",
            "scope":                        "instance",
            "signature":                    "def owner=(value)",
            "source":                       "def owner=(value)\n  @owner = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23owner%3D"
        },
        {
            "docstring":                    "Returns the value of attribute tag_name",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "tag_name",
            "namespace":                    "YARD::Tags::RefTagList",
            "path":                         "YARD::Tags::RefTagList#tag_name",
            "scope":                        "instance",
            "signature":                    "def tag_name",
            "source":                       "def tag_name\n  @tag_name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23tag_name"
        },
        {
            "docstring":                    "Sets the attribute tag_name",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "tag_name=",
            "namespace":                    "YARD::Tags::RefTagList",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::RefTagList#tag_name=",
            "scope":                        "instance",
            "signature":                    "def tag_name=(value)",
            "source":                       "def tag_name=(value)\n  @tag_name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23tag_name%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/tags/ref_tag_list.rb"}],
            "name":                         "tags",
            "namespace":                    "YARD::Tags::RefTagList",
            "path":                         "YARD::Tags::RefTagList#tags",
            "scope":                        "instance",
            "signature":                    "def tags",
            "source":                       "def tags\n  if owner.is_a?(CodeObjects::Base)\n    o = owner.tags(tag_name)\n    o = o.select {|t| t.name.to_s == name.to_s } if name\n    o.each do |t|\n      t.extend(RefTag)\n      t.owner = owner\n    end\n    o\n  else\n    []\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Ftags%2Fref_tag_list.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ARefTagList%23tags"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::ScopeDirective#call"],
            "current_file_has_comments":    true,
            "docstring":                    "Modifies the current parsing scope (class or instance). If this\ndirective is defined on a docstring attached to an object definition,\nit is applied only to that object. Otherwise, it applies the scope\nto all future objects in the namespace.",
            "dynamic":                      true,
            "files":                        [{"file_line":551,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "ScopeDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::ScopeDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AScopeDirective%23call"],
            "y_ld:files":                   [{"file_line":551,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AScopeDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":552,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::ScopeDirective",
            "path":                         "YARD::Tags::ScopeDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  if %w(class instance module).include?(tag.text)\n    if object.is_a?(CodeObjects::MethodObject)\n      object.scope = tag.text.to_sym\n    else\n      parser.state.scope = tag.text.to_sym\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":552,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AScopeDirective%23call"
        },
        {
            "attributes":                   {"class":{},"instance":{"text":{"write":"YARD::Tags::Tag#text=","read":"YARD::Tags::Tag#text"},"types":{"write":"YARD::Tags::Tag#types=","read":"YARD::Tags::Tag#types"},"name":{"write":"YARD::Tags::Tag#name=","read":"YARD::Tags::Tag#name"},"tag_name":{"write":"YARD::Tags::Tag#tag_name=","read":"YARD::Tags::Tag#tag_name"},"object":{"write":"YARD::Tags::Tag#object=","read":"YARD::Tags::Tag#object"}}},
            "children":                     ["YARD::Tags::Tag#tag_name=","YARD::Tags::Tag#tag_name","YARD::Tags::Tag#text=","YARD::Tags::Tag#text","YARD::Tags::Tag#types=","YARD::Tags::Tag#types","YARD::Tags::Tag#name=","YARD::Tags::Tag#name","YARD::Tags::Tag#object=","YARD::Tags::Tag#object","YARD::Tags::Tag#initialize","YARD::Tags::Tag#type"],
            "current_file_has_comments":    true,
            "docstring":                    "Represents a metadata tag value (+@tag+). Tags can have any combination of\n{#types}, {#name} and {#text}, or none of the above.",
            "dynamic":                      true,
            "files":                        [{"file_line":12,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "Tag",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::Tag",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3ATag%23tag_name%3D","YARD%3A%3ATags%3A%3ATag%23tag_name","YARD%3A%3ATags%3A%3ATag%23text%3D","YARD%3A%3ATags%3A%3ATag%23text","YARD%3A%3ATags%3A%3ATag%23types%3D","YARD%3A%3ATags%3A%3ATag%23types","YARD%3A%3ATags%3A%3ATag%23name%3D","YARD%3A%3ATags%3A%3ATag%23name","YARD%3A%3ATags%3A%3ATag%23object%3D","YARD%3A%3ATags%3A%3ATag%23object","YARD%3A%3ATags%3A%3ATag%23initialize","YARD%3A%3ATags%3A%3ATag%23type"],
            "y_ld:files":                   [{"file_line":12,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new tag object with a tag name and text. Optionally, formally declared types\nand a key name can be specified.\n\nTypes are mainly for meta tags that rely on type information, such as +param+, +return+, etc.\n\nKey names are for tags that declare meta data for a specific key or name, such as +param+,\n+raise+, etc.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"tag_name"},{"parm_type":null,"parm_name":"text"},{"parm_type":"nil","parm_name":"types"},{"parm_type":"nil","parm_name":"name"}],
            "path":                         "YARD::Tags::Tag#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(tag_name, text, types = nil, name = nil)",
            "source":                       "def initialize(tag_name, text, types = nil, name = nil)\n  @tag_name, @text, @name, @types = tag_name.to_s, text, name, (types ? [types].flatten.compact : nil)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Tag#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23name%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Tag#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "tag_name",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#tag_name",
            "scope":                        "instance",
            "signature":                    "def tag_name",
            "source":                       "def tag_name\n  @tag_name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23tag_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "tag_name=",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Tag#tag_name=",
            "scope":                        "instance",
            "signature":                    "def tag_name=(value)",
            "source":                       "def tag_name=(value)\n  @tag_name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23tag_name%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "text",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#text",
            "scope":                        "instance",
            "signature":                    "def text",
            "source":                       "def text\n  @text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":18,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "text=",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Tag#text=",
            "scope":                        "instance",
            "signature":                    "def text=(value)",
            "source":                       "def text=(value)\n  @text = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":18,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23text%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Convenience method to access the first type specified. This should mainly\nbe used for tags that only specify one type.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  types.first\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "types",
            "namespace":                    "YARD::Tags::Tag",
            "path":                         "YARD::Tags::Tag#types",
            "scope":                        "instance",
            "signature":                    "def types",
            "source":                       "def types\n  @types\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/tags/tag.rb"}],
            "name":                         "types=",
            "namespace":                    "YARD::Tags::Tag",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Tags::Tag#types=",
            "scope":                        "instance",
            "signature":                    "def types=(value)",
            "source":                       "def types=(value)\n  @types = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Ftags%2Ftag.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATag%23types%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/tags/tag_format_error.rb"}],
            "name":                         "TagFormatError",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::TagFormatError",
            "source_type":                  "ruby",
            "superclass":                   "Exception",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftags%2Ftag_format_error.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3ATagFormatError",
            "y_ld:superclass":              "Exception"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Tags::VisibilityDirective#call"],
            "current_file_has_comments":    true,
            "docstring":                    "Modifies the current parsing visibility (public, protected, or private).\nIf this directive is defined on a docstring attached to an object\ndefinition, it is applied only to that object. Otherwise, it applies\nthe visibility to all future objects in the namespace.",
            "dynamic":                      true,
            "files":                        [{"file_line":581,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "groups":                       ["Parser callbacks"],
            "name":                         "VisibilityDirective",
            "namespace":                    "YARD::Tags",
            "path":                         "YARD::Tags::VisibilityDirective",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Tags::Directive",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATags%3A%3AVisibilityDirective%23call"],
            "y_ld:files":                   [{"file_line":581,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AVisibilityDirective",
            "y_ld:superclass":              "YARD%3A%3ATags%3A%3ADirective"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":582,"file_path":"lib/yard/tags/directives.rb"}],
            "group":                        "Parser callbacks",
            "name":                         "call",
            "namespace":                    "YARD::Tags::VisibilityDirective",
            "path":                         "YARD::Tags::VisibilityDirective#call",
            "scope":                        "instance",
            "signature":                    "def call",
            "source":                       "def call\n  if %w(public protected private).include?(tag.text)\n    if object.is_a?(CodeObjects::Base)\n      object.visibility = tag.text.to_sym\n    else\n      parser.state.visibility = tag.text.to_sym\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":582,"file_path":"lib%2Fyard%2Ftags%2Fdirectives.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATags%3A%3AVisibilityDirective%23call"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers","YARD::Templates::Engine","YARD::Templates::Section","YARD::Templates::Template","YARD::Templates::ErbCache","YARD::Templates::TemplateOptions"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for templating system",
            "dynamic":                      true,
            "files":                        [{"file_line":248,"file_path":"lib/yard/autoload.rb"},{"file_line":4,"file_path":"lib/yard/templates/engine.rb"},{"file_line":2,"file_path":"lib/yard/templates/section.rb"},{"file_line":4,"file_path":"lib/yard/templates/template.rb"},{"file_line":2,"file_path":"lib/yard/templates/erb_cache.rb"},{"file_line":4,"file_path":"lib/yard/templates/template_options.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/text_helper.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/module_helper.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "Templates",
            "namespace":                    "YARD",
            "path":                         "YARD::Templates",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers","YARD%3A%3ATemplates%3A%3AEngine","YARD%3A%3ATemplates%3A%3ASection","YARD%3A%3ATemplates%3A%3ATemplate","YARD%3A%3ATemplates%3A%3AErbCache","YARD%3A%3ATemplates%3A%3ATemplateOptions"],
            "y_ld:files":                   [{"file_line":248,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Ferb_cache.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmodule_helper.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3ATemplates"
        },
        {
            "attributes":                   {"class":{"template_paths":{"write":"YARD::Templates::Engine.template_paths=","read":"YARD::Templates::Engine.template_paths"}},"instance":{}},
            "children":                     ["YARD::Templates::Engine.template_paths=","YARD::Templates::Engine.template_paths","YARD::Templates::Engine.register_template_path","YARD::Templates::Engine.template","YARD::Templates::Engine.template!","YARD::Templates::Engine.render","YARD::Templates::Engine.generate","YARD::Templates::Engine.with_serializer","YARD::Templates::Engine.set_default_options","YARD::Templates::Engine.find_template_paths","YARD::Templates::Engine.template_module_name"],
            "current_file_has_comments":    true,
            "docstring":                    "This module manages all creation, handling and rendering of {Template}\nobjects.\n\n* To create a template object at a path, use {template}.\n* To render a template, call {render}.\n* To register a template path in the lookup paths, call {register_template_path}.",
            "dynamic":                      true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "Engine",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::Engine",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AEngine.template_paths%3D","YARD%3A%3ATemplates%3A%3AEngine.template_paths","YARD%3A%3ATemplates%3A%3AEngine.register_template_path","YARD%3A%3ATemplates%3A%3AEngine.template","YARD%3A%3ATemplates%3A%3AEngine.template%21","YARD%3A%3ATemplates%3A%3AEngine.render","YARD%3A%3ATemplates%3A%3AEngine.generate","YARD%3A%3ATemplates%3A%3AEngine.with_serializer","YARD%3A%3ATemplates%3A%3AEngine.set_default_options","YARD%3A%3ATemplates%3A%3AEngine.find_template_paths","YARD%3A%3ATemplates%3A%3AEngine.template_module_name"],
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches through the registered {template_paths} and returns\nall full directories that have the +path+ within them on disk.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":153,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "find_template_paths",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"from_template"},{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Templates::Engine.find_template_paths",
            "scope":                        "class",
            "signature":                    "def find_template_paths(from_template, path)",
            "source":                       "def find_template_paths(from_template, path)\n  paths = template_paths.dup\n  paths = from_template.full_paths + paths if from_template\n\n  paths.inject([]) do |acc, tp|\n    full_path = File.cleanpath(File.join(tp, path))\n    acc.unshift(full_path) if File.directory?(full_path)\n    acc\n  end.uniq\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":153,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.find_template_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Passes a set of objects to the +:fulldoc+ template for full documentation generation.\nThis is called by {CLI::Yardoc} to most commonly perform HTML\ndocumentation generation.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":100,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "generate",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"objects"},{"parm_type":"{}","parm_name":"options"}],
            "path":                         "YARD::Templates::Engine.generate",
            "scope":                        "class",
            "signature":                    "def generate(objects, options = {})",
            "source":                       "def generate(objects, options = {})\n  options = set_default_options(options)\n  options.objects = objects\n  options.object = Registry.root\n  template(options.template, :fulldoc, options.format).run(options)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":100,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.generate"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Registers a new template path in {template_paths}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "register_template_path",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Templates::Engine.register_template_path",
            "scope":                        "class",
            "signature":                    "def register_template_path(path)",
            "source":                       "def register_template_path(path)\n  template_paths.push path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.register_template_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Renders a template on a {CodeObjects::Base code object} using\na set of default (overridable) options. Either the +:object+\nor +:type+ keys must be provided.\n\nIf a +:serializer+ key is provided and +:serialize+ is not set to\nfalse, the rendered contents will be serialized through the {Serializers::Base}\nobject. See {with_serializer}.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":81,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "render",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":"{}","parm_name":"options"}],
            "path":                         "YARD::Templates::Engine.render",
            "scope":                        "class",
            "signature":                    "def render(options = {})",
            "source":                       "def render(options = {})\n  options = set_default_options(options)\n  mod = template(options.template, options.type, options.format)\n\n  if options.serialize != false\n    with_serializer(options.object, options.serializer) { mod.run(options) }\n  else\n    mod.run(options)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":81,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.render"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets default options on the options hash",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":133,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "set_default_options",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":"{}","parm_name":"options"}],
            "path":                         "YARD::Templates::Engine.set_default_options",
            "scope":                        "class",
            "signature":                    "def set_default_options(options = {})",
            "source":                       "def set_default_options(options = {})\n  if options.is_a?(Hash)\n    options = TemplateOptions.new.tap do |o|\n      o.reset_defaults\n      o.update(options)\n    end\n  end\n  options.type ||= options.object.type if options.object\n  options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":133,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.set_default_options"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a template module representing the path. Searches on disk\nfor the first directory named +path+ (joined by '/') within the\ntemplate paths and builds a template module for. All other matching\ndirectories in other template paths will be included in the\ngenerated module as mixins (for overriding).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "template",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"*path"}],
            "path":                         "YARD::Templates::Engine.template",
            "scope":                        "class",
            "signature":                    "def template(*path)",
            "source":                       "def template(*path)\n  from_template = nil\n  from_template = path.shift if path.first.is_a?(Template)\n  path = path.join('/')\n  full_paths = find_template_paths(from_template, path)\n\n  path = File.cleanpath(path).gsub('../', '')\n  raise ArgumentError, \"No such template for #{path}\" if full_paths.empty?\n  mod = template!(path, full_paths)\n\n  mod\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.template"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Forces creation of a template at +path+ within a +full_path+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "template!",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"path"},{"parm_type":"nil","parm_name":"full_paths"}],
            "path":                         "YARD::Templates::Engine.template!",
            "scope":                        "class",
            "signature":                    "def template!(path, full_paths = nil)",
            "source":                       "def template!(path, full_paths = nil)\n  full_paths ||= [path]\n  full_paths = [full_paths] unless full_paths.is_a?(Array)\n  name = template_module_name(full_paths.first)\n  begin; return const_get(name); rescue NameError; end\n\n  mod = const_set(name, Module.new)\n  mod.send(:include, Template)\n  mod.send(:initialize, path, full_paths)\n  mod\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.template%21"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The name of the module that represents a +path+",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":168,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "template_module_name",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"path"}],
            "path":                         "YARD::Templates::Engine.template_module_name",
            "scope":                        "class",
            "signature":                    "def template_module_name(path)",
            "source":                       "def template_module_name(path)\n  'Template_' + path.to_s.gsub(/[^a-z0-9]/i, '_')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":168,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.template_module_name"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "template_paths",
            "namespace":                    "YARD::Templates::Engine",
            "path":                         "YARD::Templates::Engine.template_paths",
            "scope":                        "class",
            "signature":                    "def template_paths",
            "source":                       "def template_paths\n  @template_paths\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.template_paths"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "template_paths=",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Engine.template_paths=",
            "scope":                        "class",
            "signature":                    "def template_paths=(value)",
            "source":                       "def template_paths=(value)\n  @template_paths = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.template_paths%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Serializes the results of a block with a +serializer+ object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":114,"file_path":"lib/yard/templates/engine.rb"}],
            "name":                         "with_serializer",
            "namespace":                    "YARD::Templates::Engine",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":null,"parm_name":"serializer"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Engine.with_serializer",
            "scope":                        "class",
            "signature":                    "def with_serializer(object, serializer, &block)",
            "source":                       "def with_serializer(object, serializer, &block)\n  serializer.before_serialize if serializer\n  output = yield\n  if serializer\n    serializer.serialize(object, output)\n    serializer.after_serialize(output)\n  end\n  output\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":114,"file_path":"lib%2Fyard%2Ftemplates%2Fengine.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AEngine.with_serializer"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::ErbCache.method_for","YARD::Templates::ErbCache.clear!"],
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/erb_cache.rb"}],
            "name":                         "ErbCache",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::ErbCache",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AErbCache.method_for","YARD%3A%3ATemplates%3A%3AErbCache.clear%21"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Ferb_cache.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AErbCache"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/templates/erb_cache.rb"}],
            "name":                         "clear!",
            "namespace":                    "YARD::Templates::ErbCache",
            "path":                         "YARD::Templates::ErbCache.clear!",
            "scope":                        "class",
            "signature":                    "def self.clear!",
            "source":                       "def self.clear!\n  return unless @methods\n  @methods.clear\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Ftemplates%2Ferb_cache.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AErbCache.clear%21"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/templates/erb_cache.rb"}],
            "name":                         "method_for",
            "namespace":                    "YARD::Templates::ErbCache",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::ErbCache.method_for",
            "scope":                        "class",
            "signature":                    "def self.method_for(filename, &block)",
            "source":                       "def self.method_for(filename, &block)\n  @methods ||= {}\n  return @methods[filename] if @methods[filename]\n  @methods[filename] = name = \"_erb_cache_#{@methods.size}\"\n  erb = yield.src\n  encoding = erb[/\\A(#coding[:=].*\\r?\\n)/, 1] || ''\n  module_eval \"#{encoding}def #{name}; #{erb}; end\", filename\n\n  name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftemplates%2Ferb_cache.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AErbCache.method_for"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::Markup","YARD::Templates::Helpers::UMLHelper","YARD::Templates::Helpers::TextHelper","YARD::Templates::Helpers::HtmlHelper","YARD::Templates::Helpers::BaseHelper","YARD::Templates::Helpers::ModuleHelper","YARD::Templates::Helpers::MethodHelper","YARD::Templates::Helpers::FilterHelper","YARD::Templates::Helpers::MarkupHelper","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for template helpers",
            "dynamic":                      true,
            "files":                        [{"file_line":249,"file_path":"lib/yard/autoload.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/uml_helper.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/text_helper.rb"},{"file_line":4,"file_path":"lib/yard/templates/helpers/html_helper.rb"},{"file_line":1,"file_path":"lib/yard/templates/helpers/base_helper.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/module_helper.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/method_helper.rb"},{"file_line":2,"file_path":"lib/yard/templates/helpers/filter_helper.rb"},{"file_line":4,"file_path":"lib/yard/templates/helpers/markup_helper.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"},{"file_line":3,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "Helpers",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::Helpers",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AModuleHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper"],
            "y_ld:files":                   [{"file_line":249,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"},{"file_line":1,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmodule_helper.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"},{"file_line":2,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"},{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers"
        },
        {
            "attributes":                   {"class":{},"instance":{"owner":{"write":null,"read":"YARD::Templates::Helpers::BaseHelper#owner"},"object":{"write":"YARD::Templates::Helpers::BaseHelper#object=","read":"YARD::Templates::Helpers::BaseHelper#object"},"serializer":{"write":"YARD::Templates::Helpers::BaseHelper#serializer=","read":"YARD::Templates::Helpers::BaseHelper#serializer"}}},
            "children":                     ["YARD::Templates::Helpers::BaseHelper#object=","YARD::Templates::Helpers::BaseHelper#object","YARD::Templates::Helpers::BaseHelper#serializer=","YARD::Templates::Helpers::BaseHelper#serializer","YARD::Templates::Helpers::BaseHelper#owner","YARD::Templates::Helpers::BaseHelper#globals","YARD::Templates::Helpers::BaseHelper#run_verifier","YARD::Templates::Helpers::BaseHelper#h","YARD::Templates::Helpers::BaseHelper#linkify","YARD::Templates::Helpers::BaseHelper#link_include_object","YARD::Templates::Helpers::BaseHelper#link_include_file","YARD::Templates::Helpers::BaseHelper#link_object","YARD::Templates::Helpers::BaseHelper#link_url","YARD::Templates::Helpers::BaseHelper#link_file","YARD::Templates::Helpers::BaseHelper#format_types","YARD::Templates::Helpers::BaseHelper#format_object_type","YARD::Templates::Helpers::BaseHelper#format_object_title","YARD::Templates::Helpers::BaseHelper#format_source"],
            "current_file_has_comments":    true,
            "docstring":                    "The base helper module included in all templates.",
            "dynamic":                      true,
            "files":                        [{"file_line":3,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "groups":                       ["Managing Global Template State","Running the Verifier","Escaping Text","Linking Objects and URLs","Formatting Object Attributes"],
            "name":                         "BaseHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::BaseHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23object%3D","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23object","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23serializer%3D","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23serializer","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23owner","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23globals","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23run_verifier","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23h","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23linkify","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_include_object","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_include_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_object","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_url","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_types","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_object_type","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_object_title","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_source"],
            "y_ld:files":                   [{"file_line":3,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":193,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Formatting Object Attributes",
            "name":                         "format_object_title",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#format_object_title",
            "scope":                        "instance",
            "signature":                    "def format_object_title(object)",
            "source":                       "def format_object_title(object)\n  case object\n  when YARD::CodeObjects::RootObject\n    \"Top Level Namespace\"\n  else\n    format_object_type(object) + \": \" + object.path\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":193,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_object_title"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":179,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Formatting Object Attributes",
            "name":                         "format_object_type",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#format_object_type",
            "scope":                        "instance",
            "signature":                    "def format_object_type(object)",
            "source":                       "def format_object_type(object)\n  case object\n  when YARD::CodeObjects::ClassObject\n    object.is_exception? ? \"Exception\" : \"Class\"\n  else\n    object.type.to_s.capitalize\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":179,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_object_type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Indents and formats source code",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":206,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Formatting Object Attributes",
            "name":                         "format_source",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#format_source",
            "scope":                        "instance",
            "signature":                    "def format_source(value)",
            "source":                       "def format_source(value)\n  sp = value.split(\"\\n\").last[/^(\\s+)/, 1]\n  num = sp ? sp.size : 0\n  value.gsub(/^\\s{#{num}}/, '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":206,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_source"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats a list of return types for output and links each type.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Formatting Object Attributes",
            "name":                         "format_types",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"list"},{"parm_type":"true","parm_name":"brackets"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#format_types",
            "scope":                        "instance",
            "signature":                    "def format_types(list, brackets = true)",
            "source":                       "def format_types(list, brackets = true)\n  list.nil? || list.empty? ? \"\" : (brackets ? \"(#{list.join(\", \")})\" : list.join(\", \"))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23format_types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "An object that keeps track of global state throughout the entire template\nrendering process (including any sub-templates).",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Managing Global Template State",
            "name":                         "globals",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "path":                         "YARD::Templates::Helpers::BaseHelper#globals",
            "scope":                        "instance",
            "signature":                    "def globals; options.globals end",
            "source":                       "def globals; options.globals end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23globals"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Escapes text. This is used a lot by the HtmlHelper and there should\nbe some helper to \"clean up\" text for whatever, this is it.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Escaping Text",
            "name":                         "h",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#h",
            "scope":                        "instance",
            "signature":                    "def h(text)",
            "source":                       "def h(text)\n  text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23h"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Links to an extra file",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_file",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":"nil","parm_name":"title"},{"parm_type":"nil","parm_name":"anchor"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#link_file",
            "scope":                        "instance",
            "signature":                    "def link_file(filename, title = nil, anchor = nil)",
            "source":                       "def link_file(filename, title = nil, anchor = nil)\n  return filename.filename if CodeObjects::ExtraFileObject === filename\n  filename\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Include a file as a docstring in output",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":110,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_include_file",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"file"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#link_include_file",
            "scope":                        "instance",
            "signature":                    "def link_include_file(file)",
            "source":                       "def link_include_file(file)\n  File.read(file)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":110,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_include_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Includes an object's docstring into output.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":102,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_include_object",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#link_include_object",
            "scope":                        "instance",
            "signature":                    "def link_include_object(object)",
            "source":                       "def link_include_object(object)\n  object.docstring\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":102,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_include_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Links to an object with an optional title",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":119,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_object",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"nil","parm_name":"title"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#link_object",
            "scope":                        "instance",
            "signature":                    "def link_object(object, title = nil)",
            "source":                       "def link_object(object, title = nil)\n  return title if title\n\n  case object\n  when YARD::CodeObjects::Base, YARD::CodeObjects::Proxy\n    object.path\n  when String, Symbol\n    P(object).path\n  else\n    object\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":119,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Links to a URL",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":138,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_url",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"url"},{"parm_type":"nil","parm_name":"title"},{"parm_type":"nil","parm_name":"params"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#link_url",
            "scope":                        "instance",
            "signature":                    "def link_url(url, title = nil, params = nil)",
            "source":                       "def link_url(url, title = nil, params = nil)\n  url\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":138,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23link_url"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Links objects or URLs. This method will delegate to the correct +link_+\nmethod depending on the arguments passed in.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "linkify",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#linkify",
            "scope":                        "instance",
            "signature":                    "def linkify(*args)",
            "source":                       "def linkify(*args)\n  if args.first.is_a?(String)\n    case args.first\n    when %r{://}, /^mailto:/\n      link_url(args[0], args[1], {:target => '_parent'}.merge(args[2]||{}))\n    when /^include:file:(\\S+)/\n      file = $1\n      relpath = File.relative_path(Dir.pwd, File.expand_path(file))\n      if relpath =~ /^\\.\\./\n        log.warn \"Cannot include file from path `#{file}'\"\n        \"\"\n      elsif File.file?(file)\n        link_include_file(file)\n      else\n        log.warn \"Cannot find file at `#{file}' for inclusion\"\n        \"\"\n      end\n    when /^include:(\\S+)/\n      path = $1\n      if obj = YARD::Registry.resolve(object.namespace, path)\n        link_include_object(obj)\n      else\n        log.warn \"Cannot find object at `#{path}' for inclusion\"\n        \"\"\n      end\n    when /^render:(\\S+)/\n      path = $1\n      if obj = YARD::Registry.resolve(object, path)\n        opts = options.dup\n        opts.delete(:serializer)\n        obj.format(opts)\n      else\n        ''\n      end\n    when /^file:(\\S+?)(?:#(\\S+))?$/\n      link_file($1, args[1] ? args[1] : nil, $2)\n    else\n      link_object(*args)\n    end\n  else\n    link_object(*args)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23linkify"
        },
        {
            "docstring":                    "Returns the value of attribute object",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "path":                         "YARD::Templates::Helpers::BaseHelper#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23object"
        },
        {
            "docstring":                    "Sets the attribute object",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/templates/helpers/base_helper.rb"},{"file_line":10,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "name":                         "owner",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "path":                         "YARD::Templates::Helpers::BaseHelper#owner",
            "scope":                        "instance",
            "signature":                    "def owner",
            "source":                       "def owner\n  @owner\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"},{"file_line":10,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23owner"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a list of objects against the {Verifier} object passed into the\ntemplate and returns the subset of verified objects.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "group":                        "Running the Verifier",
            "name":                         "run_verifier",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"list"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#run_verifier",
            "scope":                        "instance",
            "signature":                    "def run_verifier(list)",
            "source":                       "def run_verifier(list)\n  options.verifier ? options.verifier.run(list) : list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23run_verifier"
        },
        {
            "docstring":                    "Returns the value of attribute serializer",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "name":                         "serializer",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "path":                         "YARD::Templates::Helpers::BaseHelper#serializer",
            "scope":                        "instance",
            "signature":                    "def serializer",
            "source":                       "def serializer\n  @serializer\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23serializer"
        },
        {
            "docstring":                    "Sets the attribute serializer",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/base_helper.rb"}],
            "name":                         "serializer=",
            "namespace":                    "YARD::Templates::Helpers::BaseHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::BaseHelper#serializer=",
            "scope":                        "instance",
            "signature":                    "def serializer=(value)",
            "source":                       "def serializer=(value)\n  @serializer = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fbase_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ABaseHelper%23serializer%3D"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::FilterHelper#is_method?","YARD::Templates::Helpers::FilterHelper#is_namespace?","YARD::Templates::Helpers::FilterHelper#is_class?","YARD::Templates::Helpers::FilterHelper#is_module?"],
            "current_file_has_comments":    true,
            "docstring":                    "Helpers for various object types",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/filter_helper.rb"}],
            "name":                         "FilterHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::FilterHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_method%3F","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_namespace%3F","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_class%3F","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_module%3F"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/templates/helpers/filter_helper.rb"}],
            "name":                         "is_class?",
            "namespace":                    "YARD::Templates::Helpers::FilterHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::FilterHelper#is_class?",
            "scope":                        "instance",
            "signature":                    "def is_class?(object)",
            "source":                       "def is_class?(object)\n  object.is_a?(CodeObjects::ClassObject)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_class%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/helpers/filter_helper.rb"}],
            "name":                         "is_method?",
            "namespace":                    "YARD::Templates::Helpers::FilterHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::FilterHelper#is_method?",
            "scope":                        "instance",
            "signature":                    "def is_method?(object)",
            "source":                       "def is_method?(object)\n  object.type == :method\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_method%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":21,"file_path":"lib/yard/templates/helpers/filter_helper.rb"}],
            "name":                         "is_module?",
            "namespace":                    "YARD::Templates::Helpers::FilterHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::FilterHelper#is_module?",
            "scope":                        "instance",
            "signature":                    "def is_module?(object)",
            "source":                       "def is_module?(object)\n  object.is_a?(CodeObjects::ModuleObject)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":21,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_module%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":11,"file_path":"lib/yard/templates/helpers/filter_helper.rb"}],
            "name":                         "is_namespace?",
            "namespace":                    "YARD::Templates::Helpers::FilterHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::FilterHelper#is_namespace?",
            "scope":                        "instance",
            "signature":                    "def is_namespace?(object)",
            "source":                       "def is_namespace?(object)\n  object.is_a?(CodeObjects::NamespaceObject)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ffilter_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AFilterHelper%23is_namespace%3F"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::HtmlHelper#h","YARD::Templates::Helpers::HtmlHelper#urlencode","YARD::Templates::Helpers::HtmlHelper#htmlify","YARD::Templates::Helpers::HtmlHelper#html_markup_markdown","YARD::Templates::Helpers::HtmlHelper#html_markup_textile","YARD::Templates::Helpers::HtmlHelper#html_markup_textile_strict","YARD::Templates::Helpers::HtmlHelper#html_markup_rdoc","YARD::Templates::Helpers::HtmlHelper#html_markup_pre","YARD::Templates::Helpers::HtmlHelper#html_markup_text","YARD::Templates::Helpers::HtmlHelper#html_markup_none","YARD::Templates::Helpers::HtmlHelper#html_markup_html","YARD::Templates::Helpers::HtmlHelper#html_markup_ruby","YARD::Templates::Helpers::HtmlHelper#htmlify_line","YARD::Templates::Helpers::HtmlHelper#html_syntax_highlight","YARD::Templates::Helpers::HtmlHelper#html_syntax_highlight_plain","YARD::Templates::Helpers::HtmlHelper#resolve_links","YARD::Templates::Helpers::HtmlHelper#link_file","YARD::Templates::Helpers::HtmlHelper#link_include_file","YARD::Templates::Helpers::HtmlHelper#link_include_object","YARD::Templates::Helpers::HtmlHelper#link_object","YARD::Templates::Helpers::HtmlHelper#link_url","YARD::Templates::Helpers::HtmlHelper#anchor_for","YARD::Templates::Helpers::HtmlHelper#url_for","YARD::Templates::Helpers::HtmlHelper#url_for_file","YARD::Templates::Helpers::HtmlHelper#url_for_list","YARD::Templates::Helpers::HtmlHelper#url_for_frameset","YARD::Templates::Helpers::HtmlHelper#url_for_main","YARD::Templates::Helpers::HtmlHelper#url_for_index","YARD::Templates::Helpers::HtmlHelper#format_object_name_list","YARD::Templates::Helpers::HtmlHelper#format_types","YARD::Templates::Helpers::HtmlHelper#signature_types","YARD::Templates::Helpers::HtmlHelper#signature","YARD::Templates::Helpers::HtmlHelper#charset","YARD::Templates::Helpers::HtmlHelper#tag_attrs","YARD::Templates::Helpers::HtmlHelper#convert_method_to_overload","YARD::Templates::Helpers::HtmlHelper#parse_lang_for_codeblock","YARD::Templates::Helpers::HtmlHelper#parse_codeblocks"],
            "current_file_has_comments":    true,
            "docstring":                    "The helper module for HTML templates.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "groups":                       ["Escaping Template Data","Converting Markup to HTML","Syntax Highlighting Source Code","Linking Objects and URLs","URL Helpers","Formatting Objects and Attributes","Getting the Character Encoding"],
            "instance_mixins":              ["YARD::Templates::Helpers::HtmlSyntaxHighlightHelper","YARD::Templates::Helpers::MarkupHelper"],
            "name":                         "HtmlHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::HtmlHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23h","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23urlencode","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23htmlify","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_markdown","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_textile","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_textile_strict","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_rdoc","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_pre","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_text","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_none","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_html","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_ruby","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23htmlify_line","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_syntax_highlight","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_syntax_highlight_plain","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23resolve_links","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_include_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_include_object","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_object","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_url","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23anchor_for","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_list","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_frameset","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_main","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_index","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23format_object_name_list","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23format_types","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23signature_types","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23signature","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23charset","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23tag_attrs","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23convert_method_to_overload","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23parse_lang_for_codeblock","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23parse_codeblocks"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":288,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "anchor_for",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#anchor_for",
            "scope":                        "instance",
            "signature":                    "def anchor_for(object)",
            "source":                       "def anchor_for(object)\n  case object\n  when CodeObjects::MethodObject\n    \"#{object.name}-#{object.scope}_#{object.type}\"\n  when CodeObjects::ClassVariableObject\n    \"#{object.name.to_s.gsub('@@', '')}-#{object.type}\"\n  when CodeObjects::Base\n    \"#{object.name}-#{object.type}\"\n  when CodeObjects::Proxy\n    object.path\n  else\n    object.to_s\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":288,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23anchor_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the current character set. The default value can be overridden\nby setting the +LANG+ environment variable or by overriding this\nmethod. In Ruby 1.9 you can also modify this value by setting\n+Encoding.default_external+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":510,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Getting the Character Encoding",
            "name":                         "charset",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "path":                         "YARD::Templates::Helpers::HtmlHelper#charset",
            "scope":                        "instance",
            "signature":                    "def charset",
            "source":                       "def charset\n  if @file && RUBY19\n    lang = @file.contents.encoding.to_s\n  else\n    return 'utf-8' unless RUBY19 || lang = ENV['LANG']\n    if RUBY19\n      lang = ::Encoding.default_external.name.downcase\n    else\n      lang = lang.downcase.split('.').last\n    end\n  end\n  case lang\n  when \"ascii-8bit\", \"us-ascii\", \"ascii-7bit\"; 'iso-8859-1'\n  when \"utf8\"; 'utf-8'\n  else; lang\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":510,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23charset"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts a {CodeObjects::MethodObject} into an overload object",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":542,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Getting the Character Encoding",
            "name":                         "convert_method_to_overload",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#convert_method_to_overload",
            "scope":                        "instance",
            "signature":                    "def convert_method_to_overload(meth)",
            "source":                       "def convert_method_to_overload(meth)\n  # use first overload tag if it has a return type and method itself does not\n  if !meth.tag(:return) && meth.tags(:overload).size == 1 && meth.tag(:overload).tag(:return)\n    return meth.tag(:overload)\n  end\n  meth\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":542,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23convert_method_to_overload"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats a list of objects and links them",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":396,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Formatting Objects and Attributes",
            "name":                         "format_object_name_list",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"objects"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#format_object_name_list",
            "scope":                        "instance",
            "signature":                    "def format_object_name_list(objects)",
            "source":                       "def format_object_name_list(objects)\n  objects.sort_by {|o| o.name.to_s.downcase }.map do |o|\n    \"<span class='name'>\" + linkify(o, o.name) + \"</span>\"\n  end.join(\", \")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":396,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23format_object_name_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats a list of types from a tag.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":414,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Formatting Objects and Attributes",
            "name":                         "format_types",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"typelist"},{"parm_type":"true","parm_name":"brackets"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#format_types",
            "scope":                        "instance",
            "signature":                    "def format_types(typelist, brackets = true)",
            "source":                       "def format_types(typelist, brackets = true)\n  return unless typelist.is_a?(Array)\n  list = typelist.map do |type|\n    type = type.gsub(/([<>])/) { h($1) }\n    type = type.gsub(/([\\w:]+)/) { $1 == \"lt\" || $1 == \"gt\" ? $1 : linkify($1, $1) }\n    \"<tt>\" + type + \"</tt>\"\n  end\n  list.empty? ? \"\" : (brackets ? \"(#{list.join(\", \")})\" : list.join(\", \"))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":414,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23format_types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Escapes HTML entities",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":16,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Escaping Template Data",
            "name":                         "h",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#h",
            "scope":                        "instance",
            "signature":                    "def h(text)",
            "source":                       "def h(text)\n  CGI.escapeHTML(text.to_s)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":16,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23h"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts HTML to HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":123,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_html",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_html",
            "scope":                        "instance",
            "signature":                    "def html_markup_html(text)",
            "source":                       "def html_markup_html(text)\n  text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":123,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_html"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts Markdown to HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_markdown",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_markdown",
            "scope":                        "instance",
            "signature":                    "def html_markup_markdown(text)",
            "source":                       "def html_markup_markdown(text)\n  # TODO: other libraries might be more complex\n  provider = markup_class(:markdown)\n  if provider.to_s == 'RDiscount'\n    provider.new(text, :autolink).to_html\n  elsif provider.to_s == 'RedcarpetCompat'\n    provider.new(text, :gh_blockcode, :fenced_code, :autolink).to_html\n  else\n    provider.new(text).to_html\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_markdown"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":115,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_none",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_none",
            "scope":                        "instance",
            "signature":                    "def html_markup_none(text)",
            "source":                       "def html_markup_none(text)\n  h(text)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":115,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_none"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts plaintext to pre-formatted HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":101,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_pre",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_pre",
            "scope":                        "instance",
            "signature":                    "def html_markup_pre(text)",
            "source":                       "def html_markup_pre(text)\n  \"<pre>\" + h(text) + \"</pre>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":101,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_pre"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts RDoc formatting (SimpleMarkup) to HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":91,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_rdoc",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_rdoc",
            "scope":                        "instance",
            "signature":                    "def html_markup_rdoc(text)",
            "source":                       "def html_markup_rdoc(text)\n  doc = markup_class(:rdoc).new(text)\n  doc.from_path = url_for(object) if doc.respond_to?(:from_path=)\n  doc.to_html\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":91,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_rdoc"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Highlights Ruby source. Similar to {#html_syntax_highlight}, but\nthis method is meant to be called from {#htmlify} when markup is\nset to \"ruby\".",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":134,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_ruby",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_ruby",
            "scope":                        "instance",
            "signature":                    "def html_markup_ruby(source)",
            "source":                       "def html_markup_ruby(source)\n  '<pre class=\"code ruby\">' + html_syntax_highlight(source, :ruby) + '</pre>'\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":134,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_ruby"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts plaintext to regular HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_text",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_text",
            "scope":                        "instance",
            "signature":                    "def html_markup_text(text)",
            "source":                       "def html_markup_text(text)\n  h(text).gsub(/\\r?\\n/, '<br/>')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_text"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts Textile to HTML",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":73,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_textile",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_textile",
            "scope":                        "instance",
            "signature":                    "def html_markup_textile(text)",
            "source":                       "def html_markup_textile(text)\n  doc = markup_class(:textile).new(text)\n  doc.hard_breaks = false if doc.respond_to?(:hard_breaks=)\n  doc.to_html\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":73,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_textile"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts plaintext to strict Textile (hard breaks)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":83,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "html_markup_textile_strict",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_markup_textile_strict",
            "scope":                        "instance",
            "signature":                    "def html_markup_textile_strict(text)",
            "source":                       "def html_markup_textile_strict(text)\n  markup_class(:textile).new(text).to_html\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":83,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_markup_textile_strict"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Syntax highlights +source+ in language +type+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":154,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Syntax Highlighting Source Code",
            "name":                         "html_syntax_highlight",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"},{"parm_type":"nil","parm_name":"type"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_syntax_highlight",
            "scope":                        "instance",
            "signature":                    "def html_syntax_highlight(source, type = nil)",
            "source":                       "def html_syntax_highlight(source, type = nil)\n  return \"\" unless source\n  return h(source) unless options.highlight\n\n  new_type, source = parse_lang_for_codeblock(source)\n  type ||= new_type || :ruby\n  meth = \"html_syntax_highlight_#{type}\"\n  respond_to?(meth) ? send(meth, source) : h(source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":154,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_syntax_highlight"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":165,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Syntax Highlighting Source Code",
            "name":                         "html_syntax_highlight_plain",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#html_syntax_highlight_plain",
            "scope":                        "instance",
            "signature":                    "def html_syntax_highlight_plain(source)",
            "source":                       "def html_syntax_highlight_plain(source)\n  h(source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":165,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23html_syntax_highlight_plain"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Turns text into HTML using +markup+ style formatting.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "htmlify",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"options.markup","parm_name":"markup"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#htmlify",
            "scope":                        "instance",
            "signature":                    "def htmlify(text, markup = options.markup)",
            "source":                       "def htmlify(text, markup = options.markup)\n  markup_meth = \"html_markup_#{markup}\"\n  return text unless respond_to?(markup_meth)\n  return \"\" unless text\n  return text unless markup\n  html = send(markup_meth, text)\n  if html.respond_to?(:encode)\n    html = html.force_encoding(text.encoding) # for libs that mess with encoding\n    html = html.encode(:invalid => :replace, :replace => '?')\n  end\n  html = resolve_links(html)\n  unless [:text, :none, :pre].include?(markup)\n    html = parse_codeblocks(html)\n  end\n  html\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23htmlify"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":139,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Converting Markup to HTML",
            "name":                         "htmlify_line",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#htmlify_line",
            "scope":                        "instance",
            "signature":                    "def htmlify_line(*args)",
            "source":                       "def htmlify_line(*args)\n  \"<div class='inline'>\" + htmlify(*args) + \"</div>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":139,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23htmlify_line"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#link_file",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":219,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_file",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":"nil","parm_name":"title"},{"parm_type":"nil","parm_name":"anchor"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#link_file",
            "scope":                        "instance",
            "signature":                    "def link_file(filename, title = nil, anchor = nil)",
            "source":                       "def link_file(filename, title = nil, anchor = nil)\n  if CodeObjects::ExtraFileObject === filename\n    file = filename\n  else\n    contents = File.file?(filename) ? nil : ''\n    file = CodeObjects::ExtraFileObject.new(filename, contents)\n  end\n  return title || file.title unless serializer\n  link_url(url_for_file(file, anchor), title || file.title)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":219,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#link_include_file",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":231,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_include_file",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"file"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#link_include_file",
            "scope":                        "instance",
            "signature":                    "def link_include_file(file)",
            "source":                       "def link_include_file(file)\n  unless file.is_a?(CodeObjects::ExtraFileObject)\n    file = CodeObjects::ExtraFileObject.new(file)\n  end\n  file.attributes[:markup] ||= markup_for_file('', file.filename)\n  htmlify(file.contents, file.attributes[:markup] || options.markup)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":231,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_include_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#link_include_object",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":240,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_include_object",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#link_include_object",
            "scope":                        "instance",
            "signature":                    "def link_include_object(obj)",
            "source":                       "def link_include_object(obj)\n  htmlify(obj.docstring)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":240,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_include_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#link_object",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":245,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_object",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"},{"parm_type":"nil","parm_name":"otitle"},{"parm_type":"nil","parm_name":"anchor"},{"parm_type":"true","parm_name":"relative"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#link_object",
            "scope":                        "instance",
            "signature":                    "def link_object(obj, otitle = nil, anchor = nil, relative = true)",
            "source":                       "def link_object(obj, otitle = nil, anchor = nil, relative = true)\n  return otitle if obj.nil?\n  obj = Registry.resolve(object, obj, true, true) if obj.is_a?(String)\n  if !otitle && obj.root?\n    title = \"Top Level Namespace\"\n  elsif otitle\n    title = otitle.to_s\n  elsif object.is_a?(CodeObjects::Base)\n    # Check if we're linking to a class method in the current\n    # object. If we are, create a title in the format of\n    # \"CurrentClass.method_name\"\n    if obj.is_a?(CodeObjects::MethodObject) && obj.scope == :class && obj.parent == object\n      title = h([object.name, obj.sep, obj.name].join)\n    else\n      title = h(object.relative_path(obj))\n    end\n  else\n    title = h(obj.to_s)\n  end\n  return title unless serializer\n  return title if obj.is_a?(CodeObjects::Proxy)\n\n  link = url_for(obj, anchor, relative)\n  link = link ? link_url(link, title, :title => h(\"#{obj.path} (#{obj.type})\")) : title\n  \"<span class='object_link'>\" + link + \"</span>\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":245,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "YARD::Templates::Helpers::BaseHelper#link_url",
            "docstring_extra":              "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":273,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "link_url",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"url"},{"parm_type":"nil","parm_name":"title"},{"parm_type":"{}","parm_name":"params"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#link_url",
            "scope":                        "instance",
            "signature":                    "def link_url(url, title = nil, params = {})",
            "source":                       "def link_url(url, title = nil, params = {})\n  title ||= url\n  title.gsub!(/[\\r\\n]/, ' ')\n  params = SymbolHash.new(false).update(\n    :href => url,\n    :title  => h(title)\n  ).update(params)\n  params[:target] ||= '_parent' if url =~ /^(\\w+):\\/\\//\n  \"<a #{tag_attrs(params)}>#{title}</a>\".gsub(/[\\r\\n]/, ' ')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":273,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23link_url"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses code blocks out of html and performs syntax highlighting\non code inside of the blocks.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":572,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Getting the Character Encoding",
            "name":                         "parse_codeblocks",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"html"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#parse_codeblocks",
            "scope":                        "instance",
            "signature":                    "def parse_codeblocks(html)",
            "source":                       "def parse_codeblocks(html)\n  html.gsub(/<pre\\s*(?:lang=\"(.+?)\")?>(?:\\s*<code\\s*(?:class=\"(.+?)\")?\\s*>)?(.+?)(?:<\\/code>\\s*)?<\\/pre>/m) do\n    string = $3\n    # handle !!!LANG prefix to send to html_syntax_highlight_LANG\n    language, _ = parse_lang_for_codeblock(string)\n    language ||= $1 || $2 || object.source_type\n\n    if options.highlight\n      string = html_syntax_highlight(CGI.unescapeHTML(string), language)\n    end\n    classes = ['code', language].compact.join(' ')\n    %Q{<pre class=\"#{classes}\"><code>#{string}</code></pre>}\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":572,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23parse_codeblocks"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses !!!lang out of codeblock, returning the codeblock language\nfollowed by the source code.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":557,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Getting the Character Encoding",
            "name":                         "parse_lang_for_codeblock",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#parse_lang_for_codeblock",
            "scope":                        "instance",
            "signature":                    "def parse_lang_for_codeblock(source)",
            "source":                       "def parse_lang_for_codeblock(source)\n  type = nil\n  if source =~ /\\A(?:[ \\t]*\\r?\\n)?[ \\t]*!!!([\\w.+-]+)[ \\t]*\\r?\\n/\n    type, source = $1, $'\n  end\n\n  [type, source]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":557,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23parse_lang_for_codeblock"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Resolves any text in the form of +{Name}+ to the object specified by\nName. Also supports link titles in the form +{Name title}+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":180,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Linking Objects and URLs",
            "name":                         "resolve_links",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#resolve_links",
            "scope":                        "instance",
            "signature":                    "def resolve_links(text)",
            "source":                       "def resolve_links(text)\n  code_tags = 0\n  text.gsub(/<(\\/)?(pre|code|tt)|(\\\\|!)?\\{(?!\\})(\\S+?)(?:\\s([^\\}]*?\\S))?\\}(?=[\\W<]|.+<\\/|$)/m) do |str|\n    closed, tag, escape, name, title, match = $1, $2, $3, $4, $5, $&\n    if tag\n      code_tags += (closed ? -1 : 1)\n      next str\n    end\n    next str unless code_tags == 0\n\n    next(match[1..-1]) if escape\n\n    next(match) if name[0,1] == '|'\n\n    if name == '<a' && title =~ /href=[\"'](.+?)[\"'].*>.*<\\/a>\\s*(.*)\\Z/\n      name, title = $1, $2\n      title = nil if title.empty?\n    end\n\n    name = CGI.unescapeHTML(name)\n\n    if object.is_a?(String)\n      object\n    else\n      link = linkify(name, title)\n      if (link == name || link == title) && (name+' '+link !~ /\\A<a\\s.*>/)\n        match = /(.+)?(\\{#{Regexp.quote name}(?:\\s.*?)?\\})(.+)?/.match(text)\n        file = (@file ? @file.filename : object.file) || '(unknown)'\n        line = (@file ? 1 : (object.docstring.line_range ? object.docstring.line_range.first : 1)) + (match ? $`.count(\"\\n\") : 0)\n        log.warn \"In file `#{file}':#{line}: Cannot resolve link to #{name} from text\" + (match ? \":\" : \".\")\n        log.warn((match[1] ? '...' : '') + match[2].gsub(\"\\n\",\"\") + (match[3] ? '...' : '')) if match\n      end\n\n      link\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":180,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23resolve_links"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats the signature of method +meth+.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":467,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Formatting Objects and Attributes",
            "name":                         "signature",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":"true","parm_name":"link"},{"parm_type":"true","parm_name":"show_extras"},{"parm_type":"true","parm_name":"full_attr_name"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#signature",
            "scope":                        "instance",
            "signature":                    "def signature(meth, link = true, show_extras = true, full_attr_name = true)",
            "source":                       "def signature(meth, link = true, show_extras = true, full_attr_name = true)\n  meth = convert_method_to_overload(meth)\n\n  type = signature_types(meth, link)\n  scope = meth.scope == :class ? \"+\" : \"-\"\n  name = full_attr_name ? meth.name : meth.name.to_s.gsub(/^(\\w+)=$/, '\\1')\n  blk = format_block(meth)\n  args = !full_attr_name && meth.writer? ? \"\" : format_args(meth)\n  extras = []\n  extras_text = ''\n  if show_extras\n    if rw = meth.attr_info\n      attname = [rw[:read] ? 'read' : nil, rw[:write] ? 'write' : nil].compact\n      attname = attname.size == 1 ? attname.join('') + 'only' : nil\n      extras << attname if attname\n    end\n    extras << meth.visibility if meth.visibility != :public\n    extras_text = ' <span class=\"extras\">(' + extras.join(\", \") + ')</span>' unless extras.empty?\n  end\n  title = \"%s %s<strong>%s</strong>%s %s\" % [scope, type, h(name), args, blk]\n  if link\n    if meth.is_a?(YARD::CodeObjects::MethodObject)\n      link_title = \"#{h meth.name(true)} (#{meth.scope} #{meth.type})\"\n    else\n      link_title = \"#{h name} (#{meth.type})\"\n    end\n    obj = meth.respond_to?(:object) ? meth.object : meth\n    url = url_for(object, obj)\n    link_url(url, title, :title => link_title) + extras_text\n  else\n    title + extras_text\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":467,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23signature"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Get the return types for a method signature.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":430,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Formatting Objects and Attributes",
            "name":                         "signature_types",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"},{"parm_type":"true","parm_name":"link"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#signature_types",
            "scope":                        "instance",
            "signature":                    "def signature_types(meth, link = true)",
            "source":                       "def signature_types(meth, link = true)\n  meth = convert_method_to_overload(meth)\n  if meth.respond_to?(:object) && !meth.has_tag?(:return)\n    meth = meth.object\n  end\n\n  type = options.default_return || \"\"\n  if meth.tag(:return) && meth.tag(:return).types\n    types = meth.tags(:return).map {|t| t.types ? t.types : [] }.flatten.uniq\n    first = link ? h(types.first) : format_types([types.first], false)\n    if types.size == 2 && types.last == 'nil'\n      type = first + '<sup>?</sup>'\n    elsif types.size == 2 && types.last =~ /^(Array)?<#{Regexp.quote types.first}>$/\n      type = first + '<sup>+</sup>'\n    elsif types.size > 2\n      type = [first, '...'].join(', ')\n    elsif types == ['void'] && options.hide_void_return\n      type = \"\"\n    else\n      type = link ? h(types.join(\", \")) : format_types(types, false)\n    end\n  elsif !type.empty?\n    type = link ? h(type) : format_types([type], false)\n  end\n  type = \"(#{type}) \" unless type.empty?\n  type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":430,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23signature_types"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Converts a set of hash options into HTML attributes for a tag",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":536,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Getting the Character Encoding",
            "name":                         "tag_attrs",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":"{}","parm_name":"opts"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#tag_attrs",
            "scope":                        "instance",
            "signature":                    "def tag_attrs(opts = {})",
            "source":                       "def tag_attrs(opts = {})\n  opts.sort_by {|k, v| k.to_s }.map {|k,v| \"#{k}=#{v.to_s.inspect}\" if v }.join(\" \")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":536,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23tag_attrs"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for an object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":309,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"obj"},{"parm_type":"nil","parm_name":"anchor"},{"parm_type":"true","parm_name":"relative"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for",
            "scope":                        "instance",
            "signature":                    "def url_for(obj, anchor = nil, relative = true)",
            "source":                       "def url_for(obj, anchor = nil, relative = true)\n  link = nil\n  return link unless serializer\n\n  if obj.is_a?(CodeObjects::Base) && !obj.is_a?(CodeObjects::NamespaceObject)\n    # If the obj is not a namespace obj make it the anchor.\n    anchor, obj = obj, obj.namespace\n  end\n\n  objpath = serializer.serialized_path(obj)\n  return link unless objpath\n\n  if relative\n    fromobj = object\n    if object.is_a?(CodeObjects::Base) &&\n        !object.is_a?(CodeObjects::NamespaceObject)\n      fromobj = owner\n    end\n\n    from = serializer.serialized_path(fromobj)\n    link = File.relative_path(from, objpath)\n  else\n    link = objpath\n  end\n\n  link + (anchor ? '#' + urlencode(anchor_for(anchor)) : '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":309,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for a specific file",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":342,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for_file",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"filename"},{"parm_type":"nil","parm_name":"anchor"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for_file",
            "scope":                        "instance",
            "signature":                    "def url_for_file(filename, anchor = nil)",
            "source":                       "def url_for_file(filename, anchor = nil)\n  return '' unless serializer\n  fromobj = object\n  if CodeObjects::Base === fromobj && !fromobj.is_a?(CodeObjects::NamespaceObject)\n    fromobj = fromobj.namespace\n  end\n  from = serializer.serialized_path(fromobj)\n  if filename == options.readme\n    path = 'index.html'\n  else\n    path = serializer.serialized_path(filename)\n  end\n  link = File.relative_path(from, path)\n  link += (anchor ? '#' + urlencode(anchor) : '')\n  link\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":342,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for the frameset page",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":372,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for_frameset",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for_frameset",
            "scope":                        "instance",
            "signature":                    "def url_for_frameset",
            "source":                       "def url_for_frameset\n  url_for_file(\"frames.html\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":372,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_frameset"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for the alphabetic index page",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":388,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for_index",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for_index",
            "scope":                        "instance",
            "signature":                    "def url_for_index",
            "source":                       "def url_for_index\n  url_for_file(\"_index.html\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":388,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_index"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for a list type",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":364,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for_list",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"type"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for_list",
            "scope":                        "instance",
            "signature":                    "def url_for_list(type)",
            "source":                       "def url_for_list(type)\n  url_for_file(\"#{type}_list.html\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":364,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_list"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the URL for the main page (README or alphabetic index)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":380,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "URL Helpers",
            "name":                         "url_for_main",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "path":                         "YARD::Templates::Helpers::HtmlHelper#url_for_main",
            "scope":                        "instance",
            "signature":                    "def url_for_main",
            "source":                       "def url_for_main\n  url_for_file(\"index.html\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":380,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23url_for_main"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Escapes a URL",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/templates/helpers/html_helper.rb"}],
            "group":                        "Escaping Template Data",
            "name":                         "urlencode",
            "namespace":                    "YARD::Templates::Helpers::HtmlHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::HtmlHelper#urlencode",
            "scope":                        "instance",
            "signature":                    "def urlencode(text)",
            "source":                       "def urlencode(text)\n  CGI.escape(text.to_s)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlHelper%23urlencode"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby_ripper","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby_legacy"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods for syntax highlighting.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "HtmlSyntaxHighlightHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby_ripper","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby_legacy"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Highlights Ruby source",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "html_syntax_highlight_ruby",
            "namespace":                    "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby",
            "scope":                        "instance",
            "signature":                    "def html_syntax_highlight_ruby(source)",
            "source":                       "def html_syntax_highlight_ruby(source)\n  if Parser::SourceParser.parser_type == :ruby\n    html_syntax_highlight_ruby_ripper(source)\n  else\n    html_syntax_highlight_ruby_legacy(source)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":39,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "html_syntax_highlight_ruby_legacy",
            "namespace":                    "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby_legacy",
            "scope":                        "instance",
            "signature":                    "def html_syntax_highlight_ruby_legacy(source)",
            "source":                       "def html_syntax_highlight_ruby_legacy(source)\n  tokenlist = Parser::Ruby::Legacy::TokenList.new(source)\n  tokenlist.map do |s|\n    prettyclass = s.class.class_name.sub(/^Tk/, '').downcase\n    prettysuper = s.class.superclass.class_name.sub(/^Tk/, '').downcase\n\n    case s\n    when Parser::Ruby::Legacy::RubyToken::TkWhitespace, Parser::Ruby::Legacy::RubyToken::TkUnknownChar\n      h s.text\n    when Parser::Ruby::Legacy::RubyToken::TkId\n      prettyval = h(s.text)\n      \"<span class='rubyid_#{prettyval} #{prettyclass} #{prettysuper}'>#{prettyval}</span>\"\n    else\n      \"<span class='#{prettyclass} #{prettysuper}'>#{h s.text}</span>\"\n    end\n  end.join\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":39,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby_legacy"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/templates/helpers/html_syntax_highlight_helper.rb"}],
            "name":                         "html_syntax_highlight_ruby_ripper",
            "namespace":                    "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"source"}],
            "path":                         "YARD::Templates::Helpers::HtmlSyntaxHighlightHelper#html_syntax_highlight_ruby_ripper",
            "scope":                        "instance",
            "signature":                    "def html_syntax_highlight_ruby_ripper(source)",
            "source":                       "def html_syntax_highlight_ruby_ripper(source)\n  tokenlist = Parser::Ruby::RubyParser.parse(source, \"(syntax_highlight)\").tokens\n  output = \"\"\n  tokenlist.each do |s|\n    output << \"<span class='tstring'>\" if [:tstring_beg, :regexp_beg].include?(s[0])\n    case s.first\n    when :nl, :ignored_nl, :sp\n      output << h(s.last)\n    when :ident\n      output << \"<span class='id identifier rubyid_#{h(s.last)}'>#{h(s.last)}</span>\"\n    else\n      output << \"<span class='#{s.first}'>#{h(s.last)}</span>\"\n    end\n    output << \"</span>\" if [:tstring_end, :regexp_end].include?(s[0])\n  end\n  output\nrescue Parser::ParserSyntaxError\n  h(source)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fhtml_syntax_highlight_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AHtmlSyntaxHighlightHelper%23html_syntax_highlight_ruby_ripper"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::Markup::RDocMarkup","YARD::Templates::Helpers::Markup::RDocMarkupToHtml"],
            "current_file_has_comments":    true,
            "docstring":                    "Namespace for markup providers",
            "dynamic":                      true,
            "files":                        [{"file_line":250,"file_path":"lib/yard/autoload.rb"},{"file_line":4,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "Markup",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::Markup",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml"],
            "y_ld:files":                   [{"file_line":250,"file_path":"lib%2Fyard%2Fautoload.rb"},{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup"
        },
        {
            "attributes":                   {"class":{},"instance":{"from_path":{"write":"YARD::Templates::Helpers::Markup::RDocMarkup#from_path=","read":"YARD::Templates::Helpers::Markup::RDocMarkup#from_path"}}},
            "children":                     ["YARD::Templates::Helpers::Markup::RDocMarkup#from_path=","YARD::Templates::Helpers::Markup::RDocMarkup#from_path","YARD::Templates::Helpers::Markup::RDocMarkup#initialize","YARD::Templates::Helpers::Markup::RDocMarkup#to_html","YARD::Templates::Helpers::Markup::RDocMarkup#fix_typewriter","YARD::Templates::Helpers::Markup::RDocMarkup#fix_dash_dash"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "RDocMarkup",
            "namespace":                    "YARD::Templates::Helpers::Markup",
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23from_path%3D","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23from_path","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23initialize","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23to_html","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23fix_typewriter","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23fix_dash_dash"],
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Don't allow -- to turn into &#8212; element. The chances of this being\nsome --option is far more likely than the typographical meaning.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "fix_dash_dash",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#fix_dash_dash",
            "scope":                        "instance",
            "signature":                    "def fix_dash_dash(text)",
            "source":                       "def fix_dash_dash(text)\n  text.gsub(/&#8212;(?=\\S)/, '--')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23fix_dash_dash"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Fixes RDoc behaviour with ++ only supporting alphanumeric text.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":44,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "fix_typewriter",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#fix_typewriter",
            "scope":                        "instance",
            "signature":                    "def fix_typewriter(text)",
            "source":                       "def fix_typewriter(text)\n  code_tags = 0\n  text.gsub(/<(\\/)?(pre|code|tt)|(\\s|^|>)\\+(?! )([^\\n\\+]{1,900})(?! )\\+/) do |str|\n    closed, tag, first_text, type_text, pre_text, no_match = $1, $2, $3, $4, $`, $&\n\n    if tag\n      code_tags += (closed ? -1 : 1)\n      next str\n    end\n    next str unless code_tags == 0\n    first_text + '<tt>' + CGI.escapeHTML(type_text) + '</tt>'\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":44,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23fix_typewriter"
        },
        {
            "docstring":                    "Returns the value of attribute from_path",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "from_path",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#from_path",
            "scope":                        "instance",
            "signature":                    "def from_path",
            "source":                       "def from_path\n  @from_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23from_path"
        },
        {
            "docstring":                    "Sets the attribute from_path",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "from_path=",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#from_path=",
            "scope":                        "instance",
            "signature":                    "def from_path=(value)",
            "source":                       "def from_path=(value)\n  @from_path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23from_path%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(text)",
            "source":                       "def initialize(text)\n  @text = text\n  @markup = MARKUP.new\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":30,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "to_html",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkup",
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkup#to_html",
            "scope":                        "instance",
            "signature":                    "def to_html",
            "source":                       "def to_html\n  formatter = RDocMarkupToHtml.new\n  formatter.from_path = from_path\n  html = @markup.convert(@text, formatter)\n  html = fix_dash_dash(html)\n  html = fix_typewriter(html)\n  html\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":30,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkup%23to_html"
        },
        {
            "attributes":                   {"class":{},"instance":{"from_path":{"write":"YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path=","read":"YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path"}}},
            "children":                     ["YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path=","YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path","YARD::Templates::Helpers::Markup::RDocMarkupToHtml#handle_special_HYPERLINK","YARD::Templates::Helpers::Markup::RDocMarkupToHtml#accept_paragraph"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":67,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "RDocMarkupToHtml",
            "namespace":                    "YARD::Templates::Helpers::Markup",
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkupToHtml",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23from_path%3D","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23from_path","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23handle_special_HYPERLINK","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23accept_paragraph"],
            "y_ld:files":                   [{"file_line":67,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml",
            "y_ld:superclass":              "Object"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":75,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "accept_paragraph",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkupToHtml",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkupToHtml#accept_paragraph",
            "scope":                        "instance",
            "signature":                    "def accept_paragraph(*args)",
            "source":                       "def accept_paragraph(*args)\n  par = args.last\n  text = par.respond_to?(:txt) ? par.txt : par.text\n  @hyperlink = !!(text =~ /\\{(https?:|mailto:|link:|www\\.)/)\n  super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":75,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23accept_paragraph"
        },
        {
            "docstring":                    "Returns the value of attribute from_path",
            "dynamic":                      true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "from_path",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkupToHtml",
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path",
            "scope":                        "instance",
            "signature":                    "def from_path",
            "source":                       "def from_path\n  @from_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23from_path"
        },
        {
            "docstring":                    "Sets the attribute from_path",
            "dynamic":                      true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "from_path=",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkupToHtml",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkupToHtml#from_path=",
            "scope":                        "instance",
            "signature":                    "def from_path=(value)",
            "source":                       "def from_path=(value)\n  @from_path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23from_path%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Disable auto-link of URLs",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/templates/helpers/markup/rdoc_markup.rb"}],
            "name":                         "handle_special_HYPERLINK",
            "namespace":                    "YARD::Templates::Helpers::Markup::RDocMarkupToHtml",
            "parameters":                   [{"parm_type":null,"parm_name":"special"}],
            "path":                         "YARD::Templates::Helpers::Markup::RDocMarkupToHtml#handle_special_HYPERLINK",
            "scope":                        "instance",
            "signature":                    "def handle_special_HYPERLINK(special)",
            "source":                       "def handle_special_HYPERLINK(special)\n  @hyperlink ? special.text : super\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup%2Frdoc_markup.rb"}],
            "y_ld:level":                   7,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkup%3A%3ARDocMarkupToHtml%23handle_special_HYPERLINK"
        },
        {
            "attributes":                   {"class":{"markup_cache":{"write":"YARD::Templates::Helpers::MarkupHelper.markup_cache=","read":"YARD::Templates::Helpers::MarkupHelper.markup_cache"}},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::MarkupHelper.clear_markup_cache","YARD::Templates::Helpers::MarkupHelper.markup_cache=","YARD::Templates::Helpers::MarkupHelper.markup_cache","YARD::Templates::Helpers::MarkupHelper::MARKUP_PROVIDERS","YARD::Templates::Helpers::MarkupHelper::MARKUP_EXTENSIONS","YARD::Templates::Helpers::MarkupHelper::MARKUP_FILE_SHEBANG","YARD::Templates::Helpers::MarkupHelper#load_markup_provider","YARD::Templates::Helpers::MarkupHelper#markup_for_file","YARD::Templates::Helpers::MarkupHelper#markup_file_contents","YARD::Templates::Helpers::MarkupHelper#markup_class","YARD::Templates::Helpers::MarkupHelper#markup_provider"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods for loading and managing markup types.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "MarkupHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::MarkupHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.clear_markup_cache","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.markup_cache%3D","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.markup_cache","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_PROVIDERS","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_EXTENSIONS","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_FILE_SHEBANG","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23load_markup_provider","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_for_file","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_file_contents","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_class","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_provider"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Attempts to load the first valid markup provider in {MARKUP_PROVIDERS}.\nIf a provider is specified, immediately try to load it.\n\nOn success this sets `@markup_provider` and `@markup_class` to\nthe provider name and library constant class/module respectively for\nthe loaded provider.\n\nOn failure this method will inform the user that no provider could be\nfound and exit the program.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":76,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "load_markup_provider",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":"options.markup","parm_name":"type"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper#load_markup_provider",
            "scope":                        "instance",
            "signature":                    "def load_markup_provider(type = options.markup)",
            "source":                       "def load_markup_provider(type = options.markup)\n  return true if MarkupHelper.markup_cache[type]\n  MarkupHelper.markup_cache[type] ||= {}\n\n  providers = MARKUP_PROVIDERS[type.to_sym]\n  return true if providers && providers.empty?\n  if providers && options.markup_provider\n    providers = providers.select {|p| p[:lib] == options.markup_provider }\n  end\n\n  if providers == nil || providers.empty?\n    log.error \"Invalid markup type '#{type}' or markup provider \" +\n      \"(#{options.markup_provider}) is not registered.\"\n    return false\n  end\n\n  # Search for provider, return the library class name as const if found\n  providers.each do |provider|\n    begin require provider[:lib].to_s; rescue LoadError; next end if provider[:lib]\n    begin klass = eval(\"::\" + provider[:const]); rescue NameError; next end\n    MarkupHelper.markup_cache[type][:provider] = provider[:lib] # Cache the provider\n    MarkupHelper.markup_cache[type][:class] = klass\n    return true\n  end\n\n  # Show error message telling user to install first potential provider\n  name, lib = *[providers.first[:const], providers.first[:lib] || type]\n  log.error \"Missing '#{lib}' gem for #{type.to_s.capitalize} formatting. Install it with `gem install #{lib}`\"\n  false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":76,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23load_markup_provider"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets the markup provider class/module constant for a markup type\nCall {#load_markup_provider} before using this method.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":149,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_class",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":"options.markup","parm_name":"type"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper#markup_class",
            "scope":                        "instance",
            "signature":                    "def markup_class(type = options.markup)",
            "source":                       "def markup_class(type = options.markup)\n  load_markup_provider(type)\n  MarkupHelper.markup_cache[type][:class]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":149,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_class"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Strips any shebang lines on the file contents that pertain to\nmarkup or preprocessing data.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":140,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_file_contents",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"contents"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper#markup_file_contents",
            "scope":                        "instance",
            "signature":                    "def markup_file_contents(contents)",
            "source":                       "def markup_file_contents(contents)\n  contents =~ MARKUP_FILE_SHEBANG ? $' : contents\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":140,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_file_contents"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Checks for a shebang or looks at the file extension to determine\nthe markup type for the file contents. File extensions are registered\nfor a markup type in {MARKUP_EXTENSIONS}.\n\nA shebang should be on the first line of a file and be in the form:\n\n  #!markup_type\n\nStandard markup types are text, html, rdoc, markdown, textile",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_for_file",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"contents"},{"parm_type":null,"parm_name":"filename"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper#markup_for_file",
            "scope":                        "instance",
            "signature":                    "def markup_for_file(contents, filename)",
            "source":                       "def markup_for_file(contents, filename)\n  if contents && contents =~ MARKUP_FILE_SHEBANG # Shebang support\n    return $1.to_sym\n  end\n\n  ext = (File.extname(filename)[1..-1] || '').downcase\n  MARKUP_EXTENSIONS.each do |type, exts|\n    return type if exts.include?(ext)\n  end\n  options.markup\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_for_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Gets the markup provider name for a markup type\nCall {#load_markup_provider} before using this method.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":159,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_provider",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":"options.markup","parm_name":"type"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper#markup_provider",
            "scope":                        "instance",
            "signature":                    "def markup_provider(type = options.markup)",
            "source":                       "def markup_provider(type = options.markup)\n  MarkupHelper.markup_cache[type][:provider]\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":159,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%23markup_provider"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Clears the markup provider cache information. Mainly used for testing.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "clear_markup_cache",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "path":                         "YARD::Templates::Helpers::MarkupHelper.clear_markup_cache",
            "scope":                        "class",
            "signature":                    "def clear_markup_cache",
            "source":                       "def clear_markup_cache\n  self.markup_cache = {}\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.clear_markup_cache"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_cache",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "path":                         "YARD::Templates::Helpers::MarkupHelper.markup_cache",
            "scope":                        "class",
            "signature":                    "def markup_cache",
            "source":                       "def markup_cache\n  @markup_cache\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.markup_cache"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":17,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "markup_cache=",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::MarkupHelper.markup_cache=",
            "scope":                        "class",
            "signature":                    "def markup_cache=(value)",
            "source":                       "def markup_cache=(value)\n  @markup_cache = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper.markup_cache%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns a list of extensions for various markup types. To register\nextensions for a type, add them to the array of extensions for the\ntype.",
            "dynamic":                      true,
            "files":                        [{"file_line":52,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "MARKUP_EXTENSIONS",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "path":                         "YARD::Templates::Helpers::MarkupHelper::MARKUP_EXTENSIONS",
            "signature":                    "MARKUP_EXTENSIONS = {",
            "source":                       "MARKUP_EXTENSIONS = {\n  :html => ['htm', 'html', 'shtml'],\n  :text => ['txt'],\n  :textile => ['textile', 'txtile'],\n  :markdown => ['markdown', 'md', 'mdown', 'mkd'],\n  :rdoc => ['rdoc'],\n  :ruby => ['rb', 'ru']\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  :html => ['htm', 'html', 'shtml'],\n  :text => ['txt'],\n  :textile => ['textile', 'txtile'],\n  :markdown => ['markdown', 'md', 'mdown', 'mkd'],\n  :rdoc => ['rdoc'],\n  :ruby => ['rb', 'ru']\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":52,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_EXTENSIONS"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Contains the Regexp object that matches the shebang line of extra\nfiles to detect the markup type.",
            "dynamic":                      true,
            "files":                        [{"file_line":63,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "MARKUP_FILE_SHEBANG",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "path":                         "YARD::Templates::Helpers::MarkupHelper::MARKUP_FILE_SHEBANG",
            "signature":                    "MARKUP_FILE_SHEBANG = /\\A#!(\\S+)\\s*$/",
            "source":                       "MARKUP_FILE_SHEBANG = /\\A#!(\\S+)\\s*$/",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "/\\A#!(\\S+)\\s*$/",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":63,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_FILE_SHEBANG"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "The default list of markup providers for each markup type",
            "dynamic":                      true,
            "files":                        [{"file_line":23,"file_path":"lib/yard/templates/helpers/markup_helper.rb"}],
            "name":                         "MARKUP_PROVIDERS",
            "namespace":                    "YARD::Templates::Helpers::MarkupHelper",
            "path":                         "YARD::Templates::Helpers::MarkupHelper::MARKUP_PROVIDERS",
            "signature":                    "MARKUP_PROVIDERS = {",
            "source":                       "MARKUP_PROVIDERS = {\n  :markdown => [\n    {:lib => :redcarpet, :const => 'RedcarpetCompat'},\n    {:lib => :rdiscount, :const => 'RDiscount'},\n    {:lib => :kramdown, :const => 'Kramdown::Document'},\n    {:lib => :bluecloth, :const => 'BlueCloth'},\n    {:lib => :maruku, :const => 'Maruku'},\n    {:lib => :'rpeg-markdown', :const => 'PEGMarkdown'},\n  ],\n  :textile => [\n    {:lib => :redcloth, :const => 'RedCloth'},\n  ],\n  :textile_strict => [\n    {:lib => :redcloth, :const => 'RedCloth'},\n  ],\n  :rdoc => [\n    {:lib => nil, :const => 'YARD::Templates::Helpers::Markup::RDocMarkup'},\n  ],\n  :ruby => [],\n  :text => [],\n  :pre  => [],\n  :html => [],\n  :none => [],\n}",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "{\n  :markdown => [\n    {:lib => :redcarpet, :const => 'RedcarpetCompat'},\n    {:lib => :rdiscount, :const => 'RDiscount'},\n    {:lib => :kramdown, :const => 'Kramdown::Document'},\n    {:lib => :bluecloth, :const => 'BlueCloth'},\n    {:lib => :maruku, :const => 'Maruku'},\n    {:lib => :'rpeg-markdown', :const => 'PEGMarkdown'},\n  ],\n  :textile => [\n    {:lib => :redcloth, :const => 'RedCloth'},\n  ],\n  :textile_strict => [\n    {:lib => :redcloth, :const => 'RedCloth'},\n  ],\n  :rdoc => [\n    {:lib => nil, :const => 'YARD::Templates::Helpers::Markup::RDocMarkup'},\n  ],\n  :ruby => [],\n  :text => [],\n  :pre  => [],\n  :html => [],\n  :none => [],\n}",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmarkup_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMarkupHelper%3A%3AMARKUP_PROVIDERS"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::MethodHelper#format_args","YARD::Templates::Helpers::MethodHelper#format_return_types","YARD::Templates::Helpers::MethodHelper#format_block","YARD::Templates::Helpers::MethodHelper#format_lines","YARD::Templates::Helpers::MethodHelper#format_code","YARD::Templates::Helpers::MethodHelper#format_constant"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods for method objects.",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "MethodHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::MethodHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_args","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_return_types","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_block","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_lines","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_code","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_constant"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_args",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_args",
            "scope":                        "instance",
            "signature":                    "def format_args(object)",
            "source":                       "def format_args(object)\n  return if object.parameters.nil?\n  params = object.parameters\n  if object.has_tag?(:yield) || object.has_tag?(:yieldparam)\n    params.reject! do |param|\n      param[0].to_s[0,1] == \"&\" &&\n        !object.tags(:param).any? {|t| t.name == param[0][1..-1] }\n    end\n  end\n\n  unless params.empty?\n    args = params.map {|n, v| v ? \"#{n} = #{v}\" : n.to_s }.join(\", \")\n    h(\"(#{args})\")\n  else\n    \"\"\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_args"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_block",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_block",
            "scope":                        "instance",
            "signature":                    "def format_block(object)",
            "source":                       "def format_block(object)\n  if object.has_tag?(:yield) && object.tag(:yield).types\n    params = object.tag(:yield).types\n  elsif object.has_tag?(:yieldparam)\n    params = object.tags(:yieldparam).map {|t| t.name }\n  elsif object.has_tag?(:yield)\n    return \"{ ... }\"\n  else\n    params = nil\n  end\n\n  params ? h(\"{|\" + params.join(\", \") + \"| ... }\") : \"\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_block"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_code",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"},{"parm_type":"false","parm_name":"show_lines"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_code",
            "scope":                        "instance",
            "signature":                    "def format_code(object, show_lines = false)",
            "source":                       "def format_code(object, show_lines = false)\n  i = -1\n  lines = object.source.split(/\\n/)\n  longestline = (object.line + lines.size).to_s.length\n  lines.map do |line|\n    lineno = object.line + (i += 1)\n    (\" \" * (longestline - lineno.to_s.length)) + lineno.to_s + \"    \" + line\n  end.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_code"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_constant",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_constant",
            "scope":                        "instance",
            "signature":                    "def format_constant(value)",
            "source":                       "def format_constant(value)\n  sp = value.split(\"\\n\").last[/^(\\s+)/, 1]\n  num = sp ? sp.size : 0\n  html_syntax_highlight value.gsub(/^\\s{#{num}}/, '')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_constant"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_lines",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_lines",
            "scope":                        "instance",
            "signature":                    "def format_lines(object)",
            "source":                       "def format_lines(object)\n  return \"\" if object.source.nil? || object.line.nil?\n  i = -1\n  object.source.split(/\\n/).map { object.line + (i += 1) }.join(\"\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_lines"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":25,"file_path":"lib/yard/templates/helpers/method_helper.rb"}],
            "name":                         "format_return_types",
            "namespace":                    "YARD::Templates::Helpers::MethodHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::MethodHelper#format_return_types",
            "scope":                        "instance",
            "signature":                    "def format_return_types(object)",
            "source":                       "def format_return_types(object)\n  return unless object.has_tag?(:return) && object.tag(:return).types\n  return if object.tag(:return).types.empty?\n  format_types [object.tag(:return).types.first], false\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":25,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmethod_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AMethodHelper%23format_return_types"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::ModuleHelper#prune_method_listing"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods for managing module objects.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/templates/helpers/module_helper.rb"}],
            "name":                         "ModuleHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::ModuleHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AModuleHelper%23prune_method_listing"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmodule_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AModuleHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Prunes the method listing by running the verifier and removing attributes/aliases",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":10,"file_path":"lib/yard/templates/helpers/module_helper.rb"}],
            "name":                         "prune_method_listing",
            "namespace":                    "YARD::Templates::Helpers::ModuleHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"list"},{"parm_type":"true","parm_name":"hide_attributes"}],
            "path":                         "YARD::Templates::Helpers::ModuleHelper#prune_method_listing",
            "scope":                        "instance",
            "signature":                    "def prune_method_listing(list, hide_attributes = true)",
            "source":                       "def prune_method_listing(list, hide_attributes = true)\n  list = run_verifier(list)\n  list = list.reject {|o| o.is_alias? unless CodeObjects::Proxy === o.namespace }\n  list = list.reject {|o| o.is_attribute? unless CodeObjects::Proxy === o.namespace } if hide_attributes\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":10,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fmodule_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AModuleHelper%23prune_method_listing"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::TextHelper#h","YARD::Templates::Helpers::TextHelper#wrap","YARD::Templates::Helpers::TextHelper#indent","YARD::Templates::Helpers::TextHelper#title_align_right","YARD::Templates::Helpers::TextHelper#align_right","YARD::Templates::Helpers::TextHelper#hr","YARD::Templates::Helpers::TextHelper#signature"],
            "current_file_has_comments":    true,
            "docstring":                    "Helper methods for text template formats.",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "TextHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::TextHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23h","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23wrap","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23indent","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23title_align_right","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23align_right","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23hr","YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23signature"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "align_right",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"' '","parm_name":"spacer"},{"parm_type":"72","parm_name":"col"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#align_right",
            "scope":                        "instance",
            "signature":                    "def align_right(text, spacer = ' ', col = 72)",
            "source":                       "def align_right(text, spacer = ' ', col = 72)\n  text = text[0, col - 4] + '...' if (col - 1 - text.length) < 0\n  spacer * (col - 1 - text.length) + \" \" + text\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23align_right"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "h",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#h",
            "scope":                        "instance",
            "signature":                    "def h(text)",
            "source":                       "def h(text)\n  out = \"\"\n  text = text.split(/\\n/)\n  text.each_with_index do |line, i|\n    out <<\n    case line\n    when /^\\s*$/; \"\\n\\n\"\n    when /^\\s+\\S/, /^=/; line + \"\\n\"\n    else; line + (text[i + 1] =~ /^\\s+\\S/ ? \"\\n\" : \" \")\n    end\n  end\n  out\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23h"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":43,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "hr",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":"72","parm_name":"col"},{"parm_type":"\"-\"","parm_name":"sep"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#hr",
            "scope":                        "instance",
            "signature":                    "def hr(col = 72, sep = \"-\")",
            "source":                       "def hr(col = 72, sep = \"-\")\n  sep * col\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23hr"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":27,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "indent",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"4","parm_name":"len"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#indent",
            "scope":                        "instance",
            "signature":                    "def indent(text, len = 4)",
            "source":                       "def indent(text, len = 4)\n  text.gsub(/^/, ' ' * len)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":27,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23indent"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":48,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "signature",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"meth"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#signature",
            "scope":                        "instance",
            "signature":                    "def signature(meth)",
            "source":                       "def signature(meth)\n  # use first overload tag if it has a return type and method itself does not\n  if !meth.tag(:return) && meth.tag(:overload) && meth.tag(:overload).tag(:return)\n    meth = meth.tag(:overload)\n  end\n\n  type = options.default_return || \"\"\n  rmeth = meth\n  if !rmeth.has_tag?(:return) && rmeth.respond_to?(:object)\n    rmeth = meth.object\n  end\n  if rmeth.tag(:return) && rmeth.tag(:return).types\n    types = rmeth.tags(:return).map {|t| t.types ? t.types : [] }.flatten.uniq\n    first = types.first\n    if types.size == 2 && types.last == 'nil'\n      type = first + '?'\n    elsif types.size == 2 && types.last =~ /^(Array)?<#{Regexp.quote types.first}>$/\n      type = first + '+'\n    elsif types.size > 2\n      type = [first, '...'].join(', ')\n    elsif types == ['void'] && options.hide_void_return\n      type = \"\"\n    else\n      type = types.join(\", \")\n    end\n  end\n  type = \"(#{type})\" if type.include?(',')\n  type = \" -> #{type} \" unless type.empty?\n  scope = meth.scope == :class ? \"#{meth.namespace.name}.\" : \"#{meth.namespace.name.to_s.downcase}.\"\n  name = meth.name\n  blk = format_block(meth)\n  args = format_args(meth)\n  extras = []\n  extras_text = ''\n  if rw = meth.namespace.attributes[meth.scope][meth.name]\n    attname = [rw[:read] ? 'read' : nil, rw[:write] ? 'write' : nil].compact\n    attname = attname.size == 1 ? attname.join('') + 'only' : nil\n    extras << attname if attname\n  end\n  extras << meth.visibility if meth.visibility != :public\n  extras_text = '(' + extras.join(\", \") + ')' unless extras.empty?\n  title = \"%s%s%s %s%s%s\" % [scope, name, args, blk, type, extras_text]\n  title.gsub(/\\s+/, ' ')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":48,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23signature"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":32,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "title_align_right",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"72","parm_name":"col"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#title_align_right",
            "scope":                        "instance",
            "signature":                    "def title_align_right(text, col = 72)",
            "source":                       "def title_align_right(text, col = 72)\n  align_right(text, '-', col)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":32,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23title_align_right"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":22,"file_path":"lib/yard/templates/helpers/text_helper.rb"}],
            "name":                         "wrap",
            "namespace":                    "YARD::Templates::Helpers::TextHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"},{"parm_type":"72","parm_name":"col"}],
            "path":                         "YARD::Templates::Helpers::TextHelper#wrap",
            "scope":                        "instance",
            "signature":                    "def wrap(text, col = 72)",
            "source":                       "def wrap(text, col = 72)\n  text.gsub(/(.{1,#{col}})( +|$\\n?)|(.{1,#{col}})/, \"\\\\1\\\\3\\n\")\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":22,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Ftext_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3ATextHelper%23wrap"
        },
        {
            "attributes":                   {"class":{},"instance":{}},
            "children":                     ["YARD::Templates::Helpers::UMLHelper#uml_visibility","YARD::Templates::Helpers::UMLHelper#format_path","YARD::Templates::Helpers::UMLHelper#h","YARD::Templates::Helpers::UMLHelper#tidy"],
            "current_file_has_comments":    true,
            "docstring":                    "Helpers for UML template format",
            "dynamic":                      true,
            "files":                        [{"file_line":4,"file_path":"lib/yard/templates/helpers/uml_helper.rb"}],
            "name":                         "UMLHelper",
            "namespace":                    "YARD::Templates::Helpers",
            "path":                         "YARD::Templates::Helpers::UMLHelper",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23uml_visibility","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23format_path","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23h","YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23tidy"],
            "y_ld:files":                   [{"file_line":4,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Formats the path of an object for Graphviz syntax",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":19,"file_path":"lib/yard/templates/helpers/uml_helper.rb"}],
            "name":                         "format_path",
            "namespace":                    "YARD::Templates::Helpers::UMLHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::UMLHelper#format_path",
            "scope":                        "instance",
            "signature":                    "def format_path(object)",
            "source":                       "def format_path(object)\n  object.path.gsub('::', '_')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":19,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23format_path"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Encodes text in escaped Graphviz syntax",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":26,"file_path":"lib/yard/templates/helpers/uml_helper.rb"}],
            "name":                         "h",
            "namespace":                    "YARD::Templates::Helpers::UMLHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"text"}],
            "path":                         "YARD::Templates::Helpers::UMLHelper#h",
            "scope":                        "instance",
            "signature":                    "def h(text)",
            "source":                       "def h(text)\n  text.to_s.gsub(/(\\W)/, '\\\\\\\\\\1')\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23h"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tidies data by formatting and indenting text",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/templates/helpers/uml_helper.rb"}],
            "name":                         "tidy",
            "namespace":                    "YARD::Templates::Helpers::UMLHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"data"}],
            "path":                         "YARD::Templates::Helpers::UMLHelper#tidy",
            "scope":                        "instance",
            "signature":                    "def tidy(data)",
            "source":                       "def tidy(data)\n  indent = 0\n  data.split(/\\n/).map do |line|\n    line.gsub!(/^\\s*/, '')\n    next if line.empty?\n    indent -= 1 if line =~ /^\\s*\\}\\s*$/\n    line = (' ' * (indent * 2)) + line\n    indent += 1 if line =~ /\\{\\s*$/\n    line\n  end.compact.join(\"\\n\") + \"\\n\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23tidy"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Official UML visibility prefix syntax for an object given its visibility",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":8,"file_path":"lib/yard/templates/helpers/uml_helper.rb"}],
            "name":                         "uml_visibility",
            "namespace":                    "YARD::Templates::Helpers::UMLHelper",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Templates::Helpers::UMLHelper#uml_visibility",
            "scope":                        "instance",
            "signature":                    "def uml_visibility(object)",
            "source":                       "def uml_visibility(object)\n  case object.visibility\n  when :public;    '+'\n  when :protected; '#'\n  when :private;   '-'\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":8,"file_path":"lib%2Fyard%2Ftemplates%2Fhelpers%2Fuml_helper.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3AHelpers%3A%3AUMLHelper%23uml_visibility"
        },
        {
            "aliases":                      {"YARD::Templates::Section#<<":"push"},
            "attributes":                   {"class":{},"instance":{"name":{"write":"YARD::Templates::Section#name=","read":"YARD::Templates::Section#name"}}},
            "children":                     ["YARD::Templates::Section#name=","YARD::Templates::Section#name","YARD::Templates::Section#initialize","YARD::Templates::Section#dup","YARD::Templates::Section#[]","YARD::Templates::Section#eql?","YARD::Templates::Section#==","YARD::Templates::Section#push","YARD::Templates::Section#<<","YARD::Templates::Section#unshift","YARD::Templates::Section#inspect","YARD::Templates::Section#place","YARD::Templates::Section#to_a","YARD::Templates::Section#any","YARD::Templates::Section#parse_sections"],
            "current_file_has_comments":    true,
            "docstring":                    "Abstracts the structure for a section and its subsections into an ordered\nlist of sections and subsections.",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "Section",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::Section",
            "source_type":                  "ruby",
            "superclass":                   "Array",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3ASection%23name%3D","YARD%3A%3ATemplates%3A%3ASection%23name","YARD%3A%3ATemplates%3A%3ASection%23initialize","YARD%3A%3ATemplates%3A%3ASection%23dup","YARD%3A%3ATemplates%3A%3ASection%23%5B%5D","YARD%3A%3ATemplates%3A%3ASection%23eql%3F","YARD%3A%3ATemplates%3A%3ASection%23%3D%3D","YARD%3A%3ATemplates%3A%3ASection%23push","YARD%3A%3ATemplates%3A%3ASection%23%3C%3C","YARD%3A%3ATemplates%3A%3ASection%23unshift","YARD%3A%3ATemplates%3A%3ASection%23inspect","YARD%3A%3ATemplates%3A%3ASection%23place","YARD%3A%3ATemplates%3A%3ASection%23to_a","YARD%3A%3ATemplates%3A%3ASection%23any","YARD%3A%3ATemplates%3A%3ASection%23parse_sections"],
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection",
            "y_ld:superclass":              "Array"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":49,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "<<",
            "namespace":                    "YARD::Templates::Section",
            "path":                         "YARD::Templates::Section#<<",
            "scope":                        "instance",
            "signature":                    "def push(*args)",
            "source":                       "def push(*args)\n  super(*parse_sections(args))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":49,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23%3C%3C"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":35,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "==",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Templates::Section#==",
            "scope":                        "instance",
            "signature":                    "def ==(other)",
            "source":                       "def ==(other)\n  case other\n  when Section\n    eql?(other)\n  when Array\n    to_a == other\n  else\n    name == other\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":35,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23%3D%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":20,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "[]",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Section#[]",
            "scope":                        "instance",
            "signature":                    "def [](*args)",
            "source":                       "def [](*args)\n  if args.first.is_a?(Range) || args.size > 1\n    obj = super(*args)\n    obj.name = name\n    return obj\n  elsif args.first.is_a?(Integer)\n    return super(*args)\n  end\n  find {|o| o.name == args.first }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23%5B%5D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":75,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "any",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"item"}],
            "path":                         "YARD::Templates::Section#any",
            "scope":                        "instance",
            "signature":                    "def any(item)",
            "source":                       "def any(item)\n  find do |section|\n    return section if section == item\n    return section.any(item) unless section.empty?\n  end\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":75,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23any"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":14,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "dup",
            "namespace":                    "YARD::Templates::Section",
            "path":                         "YARD::Templates::Section#dup",
            "scope":                        "instance",
            "signature":                    "def dup",
            "source":                       "def dup\n  obj = super\n  obj.name = name\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23dup"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":31,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "eql?",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"other"}],
            "path":                         "YARD::Templates::Section#eql?",
            "scope":                        "instance",
            "signature":                    "def eql?(other)",
            "source":                       "def eql?(other)\n  super(other) && name == other.name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":31,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23eql%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"name"},{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Section#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(name, *args)",
            "source":                       "def initialize(name, *args)\n  self.name = name\n  replace(parse_sections(args))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":55,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::Templates::Section",
            "path":                         "YARD::Templates::Section#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  n = name.respond_to?(:path) ? \"T('#{name.path}')\" : name.inspect\n  subsects = empty? ? \"\" : \", subsections=#{super}\"\n  \"Section(#{n}#{subsects})\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":55,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23inspect"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "name",
            "namespace":                    "YARD::Templates::Section",
            "path":                         "YARD::Templates::Section#name",
            "scope":                        "instance",
            "signature":                    "def name",
            "source":                       "def name\n  @name\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23name"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "name=",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Section#name=",
            "scope":                        "instance",
            "signature":                    "def name=(value)",
            "source":                       "def name=(value)\n  @name = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23name%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":85,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "parse_sections",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"args"}],
            "path":                         "YARD::Templates::Section#parse_sections",
            "scope":                        "instance",
            "signature":                    "def parse_sections(args)",
            "source":                       "def parse_sections(args)\n  if args.size == 1 && args.first.is_a?(Array) && !args.first.is_a?(Section)\n    args = args.first\n  end\n  sections = []\n  args.each_with_index do |name, index|\n    case name\n    when Section; sections << name\n    when Array;   next\n    else\n      subsections = args[index + 1].is_a?(Array) ? args[index + 1] : []\n      if subsections.is_a?(Section)\n        subsections = []\n      end\n      sections << Section.new(name, subsections)\n    end\n  end\n  sections\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":85,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23parse_sections"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "place",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Section#place",
            "scope":                        "instance",
            "signature":                    "def place(*args)",
            "source":                       "def place(*args)\n  super(*parse_sections(args))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23place"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":46,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "push",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Section#push",
            "scope":                        "instance",
            "signature":                    "def push(*args)",
            "source":                       "def push(*args)\n  super(*parse_sections(args))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":46,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23push"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":65,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "to_a",
            "namespace":                    "YARD::Templates::Section",
            "path":                         "YARD::Templates::Section#to_a",
            "scope":                        "instance",
            "signature":                    "def to_a",
            "source":                       "def to_a\n  list = [name]\n  unless empty?\n    subsects = []\n    each {|s| subsects += s.to_a }\n    list << subsects\n  end\n  list\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23to_a"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/templates/section.rb"}],
            "name":                         "unshift",
            "namespace":                    "YARD::Templates::Section",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Section#unshift",
            "scope":                        "instance",
            "signature":                    "def unshift(*args)",
            "source":                       "def unshift(*args)\n  super(*parse_sections(args))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Ftemplates%2Fsection.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ASection%23unshift"
        },
        {
            "attributes":                   {"class":{"extra_includes":{"write":"YARD::Templates::Template.extra_includes=","read":"YARD::Templates::Template.extra_includes"}},"instance":{"class":{"write":"YARD::Templates::Template#class=","read":"YARD::Templates::Template#class"},"section":{"write":"YARD::Templates::Template#section=","read":"YARD::Templates::Template#section"},"options":{"write":"YARD::Templates::Template#options=","read":"YARD::Templates::Template#options"}}},
            "children":                     ["YARD::Templates::Template#class=","YARD::Templates::Template#class","YARD::Templates::Template#section=","YARD::Templates::Template#section","YARD::Templates::Template#options","YARD::Templates::Template.extra_includes=","YARD::Templates::Template.extra_includes","YARD::Templates::Template.included","YARD::Templates::Template.include_extra","YARD::Templates::Template::ClassMethods","YARD::Templates::Template#initialize","YARD::Templates::Template#T","YARD::Templates::Template#sections","YARD::Templates::Template#init","YARD::Templates::Template#run","YARD::Templates::Template#yieldall","YARD::Templates::Template#erb","YARD::Templates::Template#file","YARD::Templates::Template#superb","YARD::Templates::Template#options=","YARD::Templates::Template#inspect","YARD::Templates::Template#erb_file_for","YARD::Templates::Template#erb_with","YARD::Templates::Template#render_section","YARD::Templates::Template#cache","YARD::Templates::Template#cache_filename","YARD::Templates::Template#set_ivars","YARD::Templates::Template#add_options","YARD::Templates::Template#with_section"],
            "class_mixins":                 ["YARD::Templates::Template::ClassMethods"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":5,"file_path":"lib/yard/templates/template.rb"}],
            "instance_mixins":              ["YARD::Templates::Helpers::MethodHelper","YARD::Templates::Helpers::BaseHelper","YARD::Templates::ErbCache"],
            "name":                         "Template",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::Template",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3ATemplate%23class%3D","YARD%3A%3ATemplates%3A%3ATemplate%23class","YARD%3A%3ATemplates%3A%3ATemplate%23section%3D","YARD%3A%3ATemplates%3A%3ATemplate%23section","YARD%3A%3ATemplates%3A%3ATemplate%23options","YARD%3A%3ATemplates%3A%3ATemplate.extra_includes%3D","YARD%3A%3ATemplates%3A%3ATemplate.extra_includes","YARD%3A%3ATemplates%3A%3ATemplate.included","YARD%3A%3ATemplates%3A%3ATemplate.include_extra","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods","YARD%3A%3ATemplates%3A%3ATemplate%23initialize","YARD%3A%3ATemplates%3A%3ATemplate%23T","YARD%3A%3ATemplates%3A%3ATemplate%23sections","YARD%3A%3ATemplates%3A%3ATemplate%23init","YARD%3A%3ATemplates%3A%3ATemplate%23run","YARD%3A%3ATemplates%3A%3ATemplate%23yieldall","YARD%3A%3ATemplates%3A%3ATemplate%23erb","YARD%3A%3ATemplates%3A%3ATemplate%23file","YARD%3A%3ATemplates%3A%3ATemplate%23superb","YARD%3A%3ATemplates%3A%3ATemplate%23options%3D","YARD%3A%3ATemplates%3A%3ATemplate%23inspect","YARD%3A%3ATemplates%3A%3ATemplate%23erb_file_for","YARD%3A%3ATemplates%3A%3ATemplate%23erb_with","YARD%3A%3ATemplates%3A%3ATemplate%23render_section","YARD%3A%3ATemplates%3A%3ATemplate%23cache","YARD%3A%3ATemplates%3A%3ATemplate%23cache_filename","YARD%3A%3ATemplates%3A%3ATemplate%23set_ivars","YARD%3A%3ATemplates%3A%3ATemplate%23add_options","YARD%3A%3ATemplates%3A%3ATemplate%23with_section"],
            "y_ld:files":                   [{"file_line":5,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Loads a template specified by path. If +:template+ or +:format+ is\nspecified in the {#options} hash, they are prepended and appended\nto the path respectively.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":182,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "T",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"*path"}],
            "path":                         "YARD::Templates::Template#T",
            "scope":                        "instance",
            "signature":                    "def T(*path)",
            "source":                       "def T(*path)\n  path.unshift(options.template) if options.template\n  path.push(options.format) if options.format\n  self.class.T(*path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":182,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23T"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":373,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "add_options",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":"nil","parm_name":"opts"}],
            "path":                         "YARD::Templates::Template#add_options",
            "scope":                        "instance",
            "signature":                    "def add_options(opts = nil)",
            "source":                       "def add_options(opts = nil)\n  return(yield) if opts.nil? && block_given?\n  cur_opts = options if block_given?\n\n  self.options = options.merge(opts)\n\n  if block_given?\n    value = yield\n    self.options = cur_opts\n    value\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":373,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23add_options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":352,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "cache",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"section"}],
            "path":                         "YARD::Templates::Template#cache",
            "scope":                        "instance",
            "signature":                    "def cache(section)",
            "source":                       "def cache(section)\n  content = @cache[section.to_sym]\n  return content if content\n\n  file = cache_filename(section)\n  @cache_filename[section.to_sym] = file\n  raise ArgumentError, \"no template for section '#{section}' in #{self.class.path}\" unless file\n  @cache[section.to_sym] = IO.read(file)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":352,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23cache"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":362,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "cache_filename",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"section"}],
            "path":                         "YARD::Templates::Template#cache_filename",
            "scope":                        "instance",
            "signature":                    "def cache_filename(section)",
            "source":                       "def cache_filename(section)\n  @cache_filename[section.to_sym] ||=\n    self.class.find_file(erb_file_for(section))\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":362,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23cache_filename"
        },
        {
            "docstring":                    "Returns the value of attribute class",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "class",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#class",
            "scope":                        "instance",
            "signature":                    "def class",
            "source":                       "def class\n  @class\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23class"
        },
        {
            "docstring":                    "Sets the attribute class",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "class=",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template#class=",
            "scope":                        "instance",
            "signature":                    "def class=(value)",
            "source":                       "def class=(value)\n  @class = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23class%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":263,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "erb",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"section"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#erb",
            "scope":                        "instance",
            "signature":                    "def erb(section, &block)",
            "source":                       "def erb(section, &block)\n  method_name = ErbCache.method_for(cache_filename(section)) do\n    erb_with(cache(section), cache_filename(section))\n  end\n  send(method_name, &block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":263,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23erb"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":326,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "erb_file_for",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"section"}],
            "path":                         "YARD::Templates::Template#erb_file_for",
            "scope":                        "instance",
            "signature":                    "def erb_file_for(section)",
            "source":                       "def erb_file_for(section)\n  \"#{section}.erb\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":326,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23erb_file_for"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":330,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "erb_with",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"content"},{"parm_type":"nil","parm_name":"filename"}],
            "path":                         "YARD::Templates::Template#erb_with",
            "scope":                        "instance",
            "signature":                    "def erb_with(content, filename = nil)",
            "source":                       "def erb_with(content, filename = nil)\n  erb = ERB.new(content, nil, options.format == :text ? '<>' : nil)\n  erb.filename = filename if filename\n  erb\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":330,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23erb_with"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the contents of a file. If +allow_inherited+ is set to +true+,\nuse +{{{__super__}}}+ inside the file contents to insert the contents\nof the file from an inherited template. For instance, if +templates/b+\ninherits from +templates/a+ and file \"test.css\" exists in both directories,\nboth file contents can be retrieved by having +templates/b/test.css+ look\nlike:\n\n  {{{__super__}}}\n  ...\n  body { css styles here }\n  p.class { other styles }",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":290,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "file",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"basename"},{"parm_type":"false","parm_name":"allow_inherited"}],
            "path":                         "YARD::Templates::Template#file",
            "scope":                        "instance",
            "signature":                    "def file(basename, allow_inherited = false)",
            "source":                       "def file(basename, allow_inherited = false)\n  file = self.class.find_file(basename)\n  raise ArgumentError, \"no file for '#{basename}' in #{self.class.path}\" unless file\n\n  data = IO.read(file)\n  if allow_inherited\n    superfile = self.class.find_nth_file(basename, 2)\n    data.gsub!('{{{__super__}}}', superfile ? IO.read(superfile) : \"\")\n  end\n\n  data\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":290,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Initialization called on the template. Override this in a 'setup.rb'\nfile in the template's path to implement a template",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":217,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "init",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#init",
            "scope":                        "instance",
            "signature":                    "def init",
            "source":                       "def init\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":217,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23init"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":166,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":"TemplateOptions.new","parm_name":"opts"}],
            "path":                         "YARD::Templates::Template#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(opts = TemplateOptions.new)",
            "source":                       "def initialize(opts = TemplateOptions.new)\n  opts_class = opts.class\n  opts_class = TemplateOptions if opts_class == Hash\n  @cache, @cache_filename = {}, {}\n  @sections, @options = [], opts_class.new\n  add_options(opts)\n  Template.include_extra(self, options)\n  init\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":166,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":320,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "inspect",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#inspect",
            "scope":                        "instance",
            "signature":                    "def inspect",
            "source":                       "def inspect\n  \"Template(#{self.class.path}) [section=#{section.name}]\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":320,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23inspect"
        },
        {
            "docstring":                    "Returns the value of attribute options",
            "dynamic":                      true,
            "files":                        [{"file_line":7,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "options",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#options",
            "scope":                        "instance",
            "signature":                    "def options",
            "source":                       "def options\n  @options\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":7,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23options"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":315,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "options=",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template#options=",
            "scope":                        "instance",
            "signature":                    "def options=(value)",
            "source":                       "def options=(value)\n  @options = value\n  set_ivars\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":315,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23options%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":338,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "render_section",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"section"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#render_section",
            "scope":                        "instance",
            "signature":                    "def render_section(section, &block)",
            "source":                       "def render_section(section, &block)\n  section = section.name if section.is_a?(Section)\n  case section\n  when Section, String, Symbol\n    if respond_to?(section)\n      send(section, &block)\n    else\n      erb(section, &block)\n    end\n  when Module, Template\n    section.run(options, &block) if section.is_a?(Template)\n  end || \"\"\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":338,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23render_section"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a template on +sects+ using extra options. This method should\nnot be called directly. Instead, call the class method {ClassMethods#run}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":230,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":"nil","parm_name":"opts"},{"parm_type":"sections","parm_name":"sects"},{"parm_type":"0","parm_name":"start_at"},{"parm_type":"false","parm_name":"break_first"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#run",
            "scope":                        "instance",
            "signature":                    "def run(opts = nil, sects = sections, start_at = 0, break_first = false, &block)",
            "source":                       "def run(opts = nil, sects = sections, start_at = 0, break_first = false, &block)\n  out = \"\"\n  return out if sects.nil?\n  sects = sects[start_at..-1] if start_at > 0\n  sects = Section.new(nil, sects) unless sects.is_a?(Section)\n  add_options(opts) do\n    sects.each do |s|\n      self.section = s\n      subsection_index = 0\n      value = render_section(section) do |*args|\n        value = with_section do\n          run(args.first, section, subsection_index, true, &block)\n        end\n        subsection_index += 1\n        value\n      end\n      out << (value || \"\")\n      break if break_first\n    end\n  end\n  out\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":230,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23run"
        },
        {
            "docstring":                    "Returns the value of attribute section",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "section",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#section",
            "scope":                        "instance",
            "signature":                    "def section",
            "source":                       "def section\n  @section\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23section"
        },
        {
            "docstring":                    "Sets the attribute section",
            "dynamic":                      true,
            "files":                        [{"file_line":6,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "section=",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template#section=",
            "scope":                        "instance",
            "signature":                    "def section=(value)",
            "source":                       "def section=(value)\n  @section = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":6,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23section%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Sets the sections (and subsections) to be rendered for the template",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":204,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "sections",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Template#sections",
            "scope":                        "instance",
            "signature":                    "def sections(*args)",
            "source":                       "def sections(*args)\n  @sections = Section.new(nil, *args) if args.size > 0\n  @sections\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":204,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23sections"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":367,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "set_ivars",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template#set_ivars",
            "scope":                        "instance",
            "signature":                    "def set_ivars",
            "source":                       "def set_ivars\n  options.each do |k, v|\n    instance_variable_set(\"@#{k}\", v)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":367,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23set_ivars"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Calls the ERB file from the last inherited template with {#section}.erb",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":308,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "superb",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":"section","parm_name":"section"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#superb",
            "scope":                        "instance",
            "signature":                    "def superb(section = section, &block)",
            "source":                       "def superb(section = section, &block)\n  filename = self.class.find_nth_file(erb_file_for(section), 2)\n  return \"\" unless filename\n  method_name = ErbCache.method_for(filename) { erb_with(IO.read(filename), filename) }\n  send(method_name, &block)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":308,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23superb"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":386,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "with_section",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#with_section",
            "scope":                        "instance",
            "signature":                    "def with_section(&block)",
            "source":                       "def with_section(&block)\n  sect = section\n  value = yield\n  self.section = sect\n  value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":386,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23with_section"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Yields all subsections with any extra options",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":256,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "yieldall",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":"nil","parm_name":"opts"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Templates::Template#yieldall",
            "scope":                        "instance",
            "signature":                    "def yieldall(opts = nil, &block)",
            "source":                       "def yieldall(opts = nil, &block)\n  with_section { run(opts, section, &block) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":256,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%23yieldall"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extra includes are mixins that are included after a template is created. These\nmixins can be registered by plugins to operate on templates and override behaviour.\n\nNote that this array can be filled with modules or proc objects. If a proc object\nis given, the proc will be called with the {Template#options} hash containing\nrelevant template information like the object, format, and more. The proc should\nreturn a module or nil if there is none.",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "extra_includes",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template.extra_includes",
            "scope":                        "class",
            "signature":                    "def extra_includes",
            "source":                       "def extra_includes\n  @extra_includes\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate.extra_includes"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Extra includes are mixins that are included after a template is created. These\nmixins can be registered by plugins to operate on templates and override behaviour.\n\nNote that this array can be filled with modules or proc objects. If a proc object\nis given, the proc will be called with the {Template#options} hash containing\nrelevant template information like the object, format, and more. The proc should\nreturn a module or nil if there is none.",
            "dynamic":                      true,
            "files":                        [{"file_line":24,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "extra_includes=",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template.extra_includes=",
            "scope":                        "class",
            "signature":                    "def extra_includes=(value)",
            "source":                       "def extra_includes=(value)\n  @extra_includes = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":24,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate.extra_includes%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Includes the {extra_includes} modules into the template object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "include_extra",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"template"},{"parm_type":null,"parm_name":"options"}],
            "path":                         "YARD::Templates::Template.include_extra",
            "scope":                        "class",
            "signature":                    "def include_extra(template, options)",
            "source":                       "def include_extra(template, options)\n  extra_includes.each do |mod|\n    mod = mod.call(options) if mod.is_a?(Proc)\n    next unless mod.is_a?(Module)\n    template.extend(mod)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate.include_extra"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":28,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "included",
            "namespace":                    "YARD::Templates::Template",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::Templates::Template.included",
            "scope":                        "class",
            "signature":                    "def included(klass)",
            "source":                       "def included(klass)\n  klass.extend(ClassMethods)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":28,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate.included"
        },
        {
            "attributes":                   {"class":{},"instance":{"path":{"write":"YARD::Templates::Template::ClassMethods#path=","read":"YARD::Templates::Template::ClassMethods#path"},"full_path":{"write":"YARD::Templates::Template::ClassMethods#full_path=","read":"YARD::Templates::Template::ClassMethods#full_path"}}},
            "children":                     ["YARD::Templates::Template::ClassMethods#path=","YARD::Templates::Template::ClassMethods#path","YARD::Templates::Template::ClassMethods#full_path=","YARD::Templates::Template::ClassMethods#full_path","YARD::Templates::Template::ClassMethods#full_paths","YARD::Templates::Template::ClassMethods#initialize","YARD::Templates::Template::ClassMethods#find_file","YARD::Templates::Template::ClassMethods#find_nth_file","YARD::Templates::Template::ClassMethods#is_a?","YARD::Templates::Template::ClassMethods#new","YARD::Templates::Template::ClassMethods#run","YARD::Templates::Template::ClassMethods#T","YARD::Templates::Template::ClassMethods#S","YARD::Templates::Template::ClassMethods#include_parent","YARD::Templates::Template::ClassMethods#include_inherited","YARD::Templates::Template::ClassMethods#load_setup_rb"],
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":58,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "ClassMethods",
            "namespace":                    "YARD::Templates::Template",
            "path":                         "YARD::Templates::Template::ClassMethods",
            "source_type":                  "ruby",
            "type":                         "module",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23path%3D","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23path","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_path%3D","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_path","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_paths","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23initialize","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23find_file","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23find_nth_file","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23is_a%3F","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23new","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23run","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23T","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23S","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23include_parent","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23include_inherited","YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23load_setup_rb"],
            "y_ld:files":                   [{"file_line":58,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Alias for creating a {Section} with arguments",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":133,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "S",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Template::ClassMethods#S",
            "scope":                        "instance",
            "signature":                    "def S(*args)",
            "source":                       "def S(*args)\n  Section.new(*args)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":133,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23S"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":126,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "T",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"*path"}],
            "path":                         "YARD::Templates::Template::ClassMethods#T",
            "scope":                        "instance",
            "signature":                    "def T(*path)",
            "source":                       "def T(*path)\n  Engine.template(*path)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":126,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23T"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches for a file identified by +basename+ in the template's\npath as well as any mixed in template paths. Equivalent to calling\n{ClassMethods#find_nth_file} with index of 1.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":85,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "find_file",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"basename"}],
            "path":                         "YARD::Templates::Template::ClassMethods#find_file",
            "scope":                        "instance",
            "signature":                    "def find_file(basename)",
            "source":                       "def find_file(basename)\n  find_nth_file(basename)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":85,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23find_file"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Searches for the nth file (where n = +index+) identified\nby basename in the template's path and any mixed in template paths.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":96,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "find_nth_file",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"basename"},{"parm_type":"1","parm_name":"index"}],
            "path":                         "YARD::Templates::Template::ClassMethods#find_nth_file",
            "scope":                        "instance",
            "signature":                    "def find_nth_file(basename, index = 1)",
            "source":                       "def find_nth_file(basename, index = 1)\n  n = 1\n  full_paths.each do |path|\n    file = File.join(path, basename)\n    if File.file?(file)\n      return file if index == n\n      n += 1\n    end\n  end\n\n  nil\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":96,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23find_nth_file"
        },
        {
            "docstring":                    "Returns the value of attribute full_path",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "full_path",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "path":                         "YARD::Templates::Template::ClassMethods#full_path",
            "scope":                        "instance",
            "signature":                    "def full_path",
            "source":                       "def full_path\n  @full_path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_path"
        },
        {
            "docstring":                    "Sets the attribute full_path",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "full_path=",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template::ClassMethods#full_path=",
            "scope":                        "instance",
            "signature":                    "def full_path=(value)",
            "source":                       "def full_path=(value)\n  @full_path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_path%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":61,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "full_paths",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "path":                         "YARD::Templates::Template::ClassMethods#full_paths",
            "scope":                        "instance",
            "signature":                    "def full_paths",
            "source":                       "def full_paths\n  included_modules.inject([full_path]) do |paths, mod|\n    paths |= mod.full_paths if mod.respond_to?(:full_paths)\n    paths\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":61,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23full_paths"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":152,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "include_inherited",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"full_paths"}],
            "path":                         "YARD::Templates::Template::ClassMethods#include_inherited",
            "scope":                        "instance",
            "signature":                    "def include_inherited(full_paths)",
            "source":                       "def include_inherited(full_paths)\n  full_paths.reverse.each do |full_path|\n    include Engine.template!(path, full_path)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":152,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23include_inherited"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":139,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "include_parent",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "path":                         "YARD::Templates::Template::ClassMethods#include_parent",
            "scope":                        "instance",
            "signature":                    "def include_parent",
            "source":                       "def include_parent\n  pc = path.to_s.split('/')\n  if pc.size > 1\n    pc.pop\n    pc = pc.join('/')\n    begin\n      include Engine.template(pc)\n    rescue ArgumentError\n      include Engine.template!(pc, full_path.gsub(%r{/[^/]+$}, ''))\n    end\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":139,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23include_parent"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":68,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"path"},{"parm_type":null,"parm_name":"full_paths"}],
            "path":                         "YARD::Templates::Template::ClassMethods#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(path, full_paths)",
            "source":                       "def initialize(path, full_paths)\n  full_path = full_paths.shift\n  self.path = path\n  self.full_path = full_path\n  include_inherited(full_paths)\n  include_parent\n  load_setup_rb\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":68,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23initialize"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":109,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "is_a?",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"klass"}],
            "path":                         "YARD::Templates::Template::ClassMethods#is_a?",
            "scope":                        "instance",
            "signature":                    "def is_a?(klass)",
            "source":                       "def is_a?(klass)\n  return true if klass == Template\n  super(klass)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":109,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23is_a%3F"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":158,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "load_setup_rb",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "path":                         "YARD::Templates::Template::ClassMethods#load_setup_rb",
            "scope":                        "instance",
            "signature":                    "def load_setup_rb",
            "source":                       "def load_setup_rb\n  setup_file = File.join(full_path, 'setup.rb')\n  if File.file? setup_file\n    module_eval(File.read(setup_file).taint, setup_file, 1)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":158,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23load_setup_rb"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a new template object to be rendered with {Template#run}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":115,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "new",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Template::ClassMethods#new",
            "scope":                        "instance",
            "signature":                    "def new(*args)",
            "source":                       "def new(*args)\n  obj = Object.new.extend(self)\n  obj.class = self\n  obj.send(:initialize, *args)\n  obj\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":115,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23new"
        },
        {
            "docstring":                    "Returns the value of attribute path",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "path",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "path":                         "YARD::Templates::Template::ClassMethods#path",
            "scope":                        "instance",
            "signature":                    "def path",
            "source":                       "def path\n  @path\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23path"
        },
        {
            "docstring":                    "Sets the attribute path",
            "dynamic":                      true,
            "files":                        [{"file_line":59,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "path=",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::Template::ClassMethods#path=",
            "scope":                        "instance",
            "signature":                    "def path=(value)",
            "source":                       "def path=(value)\n  @path = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":59,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23path%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":122,"file_path":"lib/yard/templates/template.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Templates::Template::ClassMethods",
            "parameters":                   [{"parm_type":null,"parm_name":"*args"}],
            "path":                         "YARD::Templates::Template::ClassMethods#run",
            "scope":                        "instance",
            "signature":                    "def run(*args)",
            "source":                       "def run(*args)\n  new(*args).run\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":122,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate.rb"}],
            "y_ld:level":                   6,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplate%3A%3AClassMethods%23run"
        },
        {
            "aliases":                      {"YARD::Templates::TemplateOptions#__globals":"globals"},
            "attributes":                   {"class":{},"instance":{"highlight":{"write":"YARD::Templates::TemplateOptions#highlight=","read":"YARD::Templates::TemplateOptions#highlight"},"type":{"write":"YARD::Templates::TemplateOptions#type=","read":"YARD::Templates::TemplateOptions#type"},"serialize":{"write":"YARD::Templates::TemplateOptions#serialize=","read":"YARD::Templates::TemplateOptions#serialize"},"template":{"write":"YARD::Templates::TemplateOptions#template=","read":"YARD::Templates::TemplateOptions#template"},"default_return":{"write":"YARD::Templates::TemplateOptions#default_return=","read":"YARD::Templates::TemplateOptions#default_return"},"markup":{"write":"YARD::Templates::TemplateOptions#markup=","read":"YARD::Templates::TemplateOptions#markup"},"no_highlight":{"write":"YARD::Templates::TemplateOptions#no_highlight=","read":"YARD::Templates::TemplateOptions#no_highlight"},"hide_void_return":{"write":"YARD::Templates::TemplateOptions#hide_void_return=","read":"YARD::Templates::TemplateOptions#hide_void_return"},"page_title":{"write":"YARD::Templates::TemplateOptions#page_title=","read":"YARD::Templates::TemplateOptions#page_title"},"format":{"write":"YARD::Templates::TemplateOptions#format=","read":"YARD::Templates::TemplateOptions#format"},"globals":{"write":"YARD::Templates::TemplateOptions#globals=","read":"YARD::Templates::TemplateOptions#globals"},"embed_mixins":{"write":"YARD::Templates::TemplateOptions#embed_mixins=","read":"YARD::Templates::TemplateOptions#embed_mixins"},"markup_provider":{"write":"YARD::Templates::TemplateOptions#markup_provider=","read":"YARD::Templates::TemplateOptions#markup_provider"},"object":{"write":"YARD::Templates::TemplateOptions#object=","read":"YARD::Templates::TemplateOptions#object"},"serializer":{"write":"YARD::Templates::TemplateOptions#serializer=","read":"YARD::Templates::TemplateOptions#serializer"}}},
            "children":                     ["YARD::Templates::TemplateOptions#format","YARD::Templates::TemplateOptions#format=","YARD::Templates::TemplateOptions#template","YARD::Templates::TemplateOptions#template=","YARD::Templates::TemplateOptions#markup","YARD::Templates::TemplateOptions#markup=","YARD::Templates::TemplateOptions#default_return","YARD::Templates::TemplateOptions#default_return=","YARD::Templates::TemplateOptions#hide_void_return","YARD::Templates::TemplateOptions#hide_void_return=","YARD::Templates::TemplateOptions#highlight","YARD::Templates::TemplateOptions#highlight=","YARD::Templates::TemplateOptions#markup_provider=","YARD::Templates::TemplateOptions#markup_provider","YARD::Templates::TemplateOptions#globals","YARD::Templates::TemplateOptions#globals=","YARD::Templates::TemplateOptions#__globals","YARD::Templates::TemplateOptions#object=","YARD::Templates::TemplateOptions#object","YARD::Templates::TemplateOptions#type=","YARD::Templates::TemplateOptions#type","YARD::Templates::TemplateOptions#serialize","YARD::Templates::TemplateOptions#serialize=","YARD::Templates::TemplateOptions#serializer=","YARD::Templates::TemplateOptions#serializer","YARD::Templates::TemplateOptions#no_highlight","YARD::Templates::TemplateOptions#no_highlight=","YARD::Templates::TemplateOptions#page_title=","YARD::Templates::TemplateOptions#page_title","YARD::Templates::TemplateOptions#embed_mixins","YARD::Templates::TemplateOptions#embed_mixins=","YARD::Templates::TemplateOptions#embed_mixins_match?"],
            "current_file_has_comments":    true,
            "docstring":                    "An Options class containing default options for base template rendering. For\noptions specific to generation of HTML output, see {CLI::YardocOptions}.",
            "dynamic":                      true,
            "files":                        [{"file_line":9,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "TemplateOptions",
            "namespace":                    "YARD::Templates",
            "path":                         "YARD::Templates::TemplateOptions",
            "source_type":                  "ruby",
            "superclass":                   "YARD::Options",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3ATemplates%3A%3ATemplateOptions%23format","YARD%3A%3ATemplates%3A%3ATemplateOptions%23format%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23template","YARD%3A%3ATemplates%3A%3ATemplateOptions%23template%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup","YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23default_return","YARD%3A%3ATemplates%3A%3ATemplateOptions%23default_return%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23hide_void_return","YARD%3A%3ATemplates%3A%3ATemplateOptions%23hide_void_return%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23highlight","YARD%3A%3ATemplates%3A%3ATemplateOptions%23highlight%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup_provider%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup_provider","YARD%3A%3ATemplates%3A%3ATemplateOptions%23globals","YARD%3A%3ATemplates%3A%3ATemplateOptions%23globals%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23__globals","YARD%3A%3ATemplates%3A%3ATemplateOptions%23object%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23object","YARD%3A%3ATemplates%3A%3ATemplateOptions%23type%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23type","YARD%3A%3ATemplates%3A%3ATemplateOptions%23serialize","YARD%3A%3ATemplates%3A%3ATemplateOptions%23serialize%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23serializer%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23serializer","YARD%3A%3ATemplates%3A%3ATemplateOptions%23no_highlight","YARD%3A%3ATemplates%3A%3ATemplateOptions%23no_highlight%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23page_title%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23page_title","YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins","YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins%3D","YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins_match%3F"],
            "y_ld:files":                   [{"file_line":9,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions",
            "y_ld:superclass":              "YARD%3A%3AOptions"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":34,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "__globals",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#__globals",
            "scope":                        "instance",
            "signature":                    "def globals",
            "source":                       "default_attr :globals, lambda { OpenStruct.new }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":34,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23__globals"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":20,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "default_return",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#default_return",
            "scope":                        "instance",
            "signature":                    "def default_return",
            "source":                       "default_attr :default_return, \"Object\"",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23default_return"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":20,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "default_return=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#default_return=",
            "scope":                        "instance",
            "signature":                    "def default_return=(value)",
            "source":                       "default_attr :default_return, \"Object\"",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":20,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23default_return%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":65,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "embed_mixins",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#embed_mixins",
            "scope":                        "instance",
            "signature":                    "def embed_mixins",
            "source":                       "default_attr :embed_mixins, lambda { [] }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":65,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "embed_mixins=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#embed_mixins=",
            "scope":                        "instance",
            "signature":                    "def embed_mixins=(value)",
            "source":                       "default_attr :embed_mixins, lambda { [] }",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":65,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":71,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "embed_mixins_match?",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"mixin"}],
            "path":                         "YARD::Templates::TemplateOptions#embed_mixins_match?",
            "scope":                        "instance",
            "signature":                    "def embed_mixins_match?(mixin)",
            "source":                       "def embed_mixins_match?(mixin)\n  return nil unless mixin.is_a?(CodeObjects::ModuleObject)\n  embed_mixins.any? do |embed_mixin|\n    re = /\\A#{Regexp.quote(embed_mixin).gsub('\\*', '.*')}\\Z/\n    matchstr = embed_mixin.include?(\"::\") ? mixin.path : mixin.name\n    re.match(matchstr.to_s)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":71,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23embed_mixins_match%3F"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":11,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "format",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#format",
            "scope":                        "instance",
            "signature":                    "def format",
            "source":                       "default_attr :format, :text",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23format"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":11,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "format=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#format=",
            "scope":                        "instance",
            "signature":                    "def format=(value)",
            "source":                       "default_attr :format, :text",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":11,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23format%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":33,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "globals",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#globals",
            "scope":                        "instance",
            "signature":                    "def globals",
            "source":                       "default_attr :globals, lambda { OpenStruct.new }",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23globals"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":33,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "globals=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#globals=",
            "scope":                        "instance",
            "signature":                    "def globals=(value)",
            "source":                       "default_attr :globals, lambda { OpenStruct.new }",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23globals%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":23,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "hide_void_return",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#hide_void_return",
            "scope":                        "instance",
            "signature":                    "def hide_void_return",
            "source":                       "default_attr :hide_void_return, false",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23hide_void_return"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":23,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "hide_void_return=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#hide_void_return=",
            "scope":                        "instance",
            "signature":                    "def hide_void_return=(value)",
            "source":                       "default_attr :hide_void_return, false",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":23,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23hide_void_return%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":26,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "highlight",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#highlight",
            "scope":                        "instance",
            "signature":                    "def highlight",
            "source":                       "default_attr :highlight, true",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23highlight"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":26,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "highlight=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#highlight=",
            "scope":                        "instance",
            "signature":                    "def highlight=(value)",
            "source":                       "default_attr :highlight, true",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":26,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23highlight%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":17,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "markup",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#markup",
            "scope":                        "instance",
            "signature":                    "def markup",
            "source":                       "default_attr :markup, :rdoc",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":17,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "markup=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#markup=",
            "scope":                        "instance",
            "signature":                    "def markup=(value)",
            "source":                       "default_attr :markup, :rdoc",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":17,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "markup_provider",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#markup_provider",
            "scope":                        "instance",
            "signature":                    "def markup_provider",
            "source":                       "def markup_provider\n  @markup_provider\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup_provider"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":29,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "markup_provider=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#markup_provider=",
            "scope":                        "instance",
            "signature":                    "def markup_provider=(value)",
            "source":                       "def markup_provider=(value)\n  @markup_provider = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":29,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23markup_provider%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":51,"file_path":"lib/yard/templates/template_options.rb"},{"file_line":53,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "no_highlight",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#no_highlight",
            "scope":                        "instance",
            "signature":                    "def no_highlight",
            "source":                       "def no_highlight\n  @no_highlight\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":51,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"},{"file_line":53,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23no_highlight"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":54,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "no_highlight=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#no_highlight=",
            "scope":                        "instance",
            "signature":                    "def no_highlight=(value) self.highlight = !value end",
            "source":                       "def no_highlight=(value) self.highlight = !value end",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":54,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23no_highlight%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":37,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "object=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#object=",
            "scope":                        "instance",
            "signature":                    "def object=(value)",
            "source":                       "def object=(value)\n  @object = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":37,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23object%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "page_title",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#page_title",
            "scope":                        "instance",
            "signature":                    "def page_title",
            "source":                       "def page_title\n  @page_title\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23page_title"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "page_title=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#page_title=",
            "scope":                        "instance",
            "signature":                    "def page_title=(value)",
            "source":                       "def page_title=(value)\n  @page_title = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23page_title%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":43,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "serialize",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#serialize",
            "scope":                        "instance",
            "signature":                    "def serialize",
            "source":                       "default_attr :serialize, false",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23serialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":43,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "serialize=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#serialize=",
            "scope":                        "instance",
            "signature":                    "def serialize=(value)",
            "source":                       "default_attr :serialize, false",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":43,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23serialize%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "serializer",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#serializer",
            "scope":                        "instance",
            "signature":                    "def serializer",
            "source":                       "def serializer\n  @serializer\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23serializer"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "serializer=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#serializer=",
            "scope":                        "instance",
            "signature":                    "def serializer=(value)",
            "source":                       "def serializer=(value)\n  @serializer = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23serializer%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":14,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "template",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#template",
            "scope":                        "instance",
            "signature":                    "def template",
            "source":                       "default_attr :template, :default",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23template"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "files":                        [{"file_line":14,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "template=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#template=",
            "scope":                        "instance",
            "signature":                    "def template=(value)",
            "source":                       "default_attr :template, :default",
            "source_type":                  "ruby",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":14,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23template%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "type",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "path":                         "YARD::Templates::TemplateOptions#type",
            "scope":                        "instance",
            "signature":                    "def type",
            "source":                       "def type\n  @type\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23type"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":40,"file_path":"lib/yard/templates/template_options.rb"}],
            "name":                         "type=",
            "namespace":                    "YARD::Templates::TemplateOptions",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Templates::TemplateOptions#type=",
            "scope":                        "instance",
            "signature":                    "def type=(value)",
            "source":                       "def type=(value)\n  @type = value\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":40,"file_path":"lib%2Fyard%2Ftemplates%2Ftemplate_options.rb"}],
            "y_ld:level":                   5,
            "y_ld:path":                    "YARD%3A%3ATemplates%3A%3ATemplateOptions%23type%3D"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":2,"file_path":"lib/yard.rb"}],
            "name":                         "VERSION",
            "namespace":                    "YARD",
            "path":                         "YARD::VERSION",
            "signature":                    "VERSION = \"0.8.1\"",
            "source":                       "VERSION = \"0.8.1\"",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "\"0.8.1\"",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":2,"file_path":"lib%2Fyard.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AVERSION"
        },
        {
            "aliases":                      {"YARD::Verifier#o":"object"},
            "attributes":                   {"class":{},"instance":{"expressions":{"write":"YARD::Verifier#expressions=","read":"YARD::Verifier#expressions"},"object":{"write":null,"read":"YARD::Verifier#object"}}},
            "children":                     ["YARD::Verifier#expressions","YARD::Verifier#expressions=","YARD::Verifier#initialize","YARD::Verifier#add_expressions","YARD::Verifier#method_missing","YARD::Verifier#call","YARD::Verifier#run","YARD::Verifier#object","YARD::Verifier#o","YARD::Verifier::NILCLASS_METHODS","YARD::Verifier#modify_nilclass","YARD::Verifier#unmodify_nilclass","YARD::Verifier#create_method_from_expressions","YARD::Verifier#parse_expression"],
            "current_file_has_comments":    true,
            "docstring":                    "Similar to a Proc, but runs a set of Ruby expressions using a small\nDSL to make tag lookups easier.\n\nThe syntax is as follows:\n* All syntax is Ruby compatible\n* +object+ (+o+ for short) exist to access the object being verified\n* +@TAGNAME+ is translated into +object.tag('TAGNAME')+\n* +@@TAGNAME+ is translated into +object.tags('TAGNAME')+\n* +object+ can be omitted as target for method calls (it is implied)",
            "dynamic":                      true,
            "files":                        [{"file_line":33,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "Verifier",
            "namespace":                    "YARD",
            "path":                         "YARD::Verifier",
            "source_type":                  "ruby",
            "superclass":                   "Object",
            "type":                         "class",
            "visibility":                   "public",
            "y_ld:children":                ["YARD%3A%3AVerifier%23expressions","YARD%3A%3AVerifier%23expressions%3D","YARD%3A%3AVerifier%23initialize","YARD%3A%3AVerifier%23add_expressions","YARD%3A%3AVerifier%23method_missing","YARD%3A%3AVerifier%23call","YARD%3A%3AVerifier%23run","YARD%3A%3AVerifier%23object","YARD%3A%3AVerifier%23o","YARD%3A%3AVerifier%3A%3ANILCLASS_METHODS","YARD%3A%3AVerifier%23modify_nilclass","YARD%3A%3AVerifier%23unmodify_nilclass","YARD%3A%3AVerifier%23create_method_from_expressions","YARD%3A%3AVerifier%23parse_expression"],
            "y_ld:files":                   [{"file_line":33,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   3,
            "y_ld:path":                    "YARD%3A%3AVerifier",
            "y_ld:superclass":              "Object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Adds a set of expressions and recompiles the verifier",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":57,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "add_expressions",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"*expressions"}],
            "path":                         "YARD::Verifier#add_expressions",
            "scope":                        "instance",
            "signature":                    "def add_expressions(*expressions)",
            "source":                       "def add_expressions(*expressions)\n  self.expressions += expressions.flatten\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":57,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23add_expressions"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Tests the expressions on the object.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":75,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "call",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"object"}],
            "path":                         "YARD::Verifier#call",
            "scope":                        "instance",
            "signature":                    "def call(object)",
            "source":                       "def call(object)\n  return true if object.is_a?(CodeObjects::Proxy)\n  modify_nilclass\n  @object = object\n  retval = __execute ? true : false\n  unmodify_nilclass\n  retval\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":75,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23call"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates the +__execute+ method by evaluating the expressions\nas Ruby code",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":128,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "create_method_from_expressions",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#create_method_from_expressions",
            "scope":                        "instance",
            "signature":                    "def create_method_from_expressions",
            "source":                       "def create_method_from_expressions\n  expr = expressions.map {|e| \"(#{parse_expression(e)})\" }.join(\" && \")\n\n  instance_eval(\"def __execute; \\#{expr}; end\\n\", __FILE__, __LINE__ + 1)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":128,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23create_method_from_expressions"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":36,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "expressions",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#expressions",
            "scope":                        "instance",
            "signature":                    "def expressions",
            "source":                       "def expressions\n  @expressions\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":36,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23expressions"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":38,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "expressions=",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"value"}],
            "path":                         "YARD::Verifier#expressions=",
            "scope":                        "instance",
            "signature":                    "def expressions=(value)",
            "source":                       "def expressions=(value)\n  @expressions = value\n  create_method_from_expressions\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":38,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23expressions%3D"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Creates a verifier from a set of expressions",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":47,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "initialize",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"*expressions"}],
            "path":                         "YARD::Verifier#initialize",
            "scope":                        "instance",
            "signature":                    "def initialize(*expressions)",
            "source":                       "def initialize(*expressions)\n  @expressions = []\n  add_expressions(*expressions)\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":47,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23initialize"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Passes any method calls to the object from the {#call}",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":62,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "method_missing",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"sym"},{"parm_type":null,"parm_name":"*args"},{"parm_type":null,"parm_name":"&block"}],
            "path":                         "YARD::Verifier#method_missing",
            "scope":                        "instance",
            "signature":                    "def method_missing(sym, *args, &block)",
            "source":                       "def method_missing(sym, *args, &block)\n  if object.respond_to?(sym)\n    object.send(sym, *args, &block)\n  else\n    super\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":62,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23method_missing"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Modifies nil to not throw NoMethodErrors. This allows\nsyntax like object.tag(:return).text to work if the #tag\ncall returns nil, which means users don't need to perform\nstringent nil checking",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":111,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "modify_nilclass",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#modify_nilclass",
            "scope":                        "instance",
            "signature":                    "def modify_nilclass",
            "source":                       "def modify_nilclass\n  NILCLASS_METHODS.each do |meth|\n    NilClass.send(:define_method, meth) {|*args| }\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":111,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23modify_nilclass"
        },
        {
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":98,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "o",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#o",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":98,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23o"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":97,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "object",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#object",
            "scope":                        "instance",
            "signature":                    "def object",
            "source":                       "def object\n  @object\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "protected",
            "y_ld:files":                   [{"file_line":97,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23object"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Parses a single expression, handling some of the DSL syntax.\n\nThe syntax \"@tag\" should be turned into object.tag(:tag),\nand \"@@tag\" should be turned into object.tags(:tag)",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":143,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "parse_expression",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"expr"}],
            "path":                         "YARD::Verifier#parse_expression",
            "scope":                        "instance",
            "signature":                    "def parse_expression(expr)",
            "source":                       "def parse_expression(expr)\n  expr = expr.gsub(/@@(?:(\\w+)|\\{([\\w\\.]+)\\})/, 'object.tags(\"\\1\\2\")')\n  expr = expr.gsub(/@(?:(\\w+)|\\{([\\w\\.]+)\\})/, 'object.tag(\"\\1\\2\")')\n  expr\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":143,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23parse_expression"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Runs a list of objects against the verifier and returns the subset\nof verified objects.",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":90,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "run",
            "namespace":                    "YARD::Verifier",
            "parameters":                   [{"parm_type":null,"parm_name":"list"}],
            "path":                         "YARD::Verifier#run",
            "scope":                        "instance",
            "signature":                    "def run(list)",
            "source":                       "def run(list)\n  list.reject {|item| call(item).is_a?(FalseClass) }\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "public",
            "y_ld:files":                   [{"file_line":90,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23run"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "Returns the state of NilClass back to normal",
            "dynamic":                      true,
            "explicit":                     true,
            "files":                        [{"file_line":119,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "unmodify_nilclass",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier#unmodify_nilclass",
            "scope":                        "instance",
            "signature":                    "def unmodify_nilclass",
            "source":                       "def unmodify_nilclass\n  NILCLASS_METHODS.each do |meth|\n    NilClass.send(:remove_method, meth)\n  end\nend",
            "source_type":                  "ruby18",
            "type":                         "method",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":119,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%23unmodify_nilclass"
        },
        {
            "current_file_has_comments":    true,
            "docstring":                    "",
            "dynamic":                      true,
            "files":                        [{"file_line":103,"file_path":"lib/yard/verifier.rb"}],
            "name":                         "NILCLASS_METHODS",
            "namespace":                    "YARD::Verifier",
            "path":                         "YARD::Verifier::NILCLASS_METHODS",
            "signature":                    "NILCLASS_METHODS = [:type, :method_missing]",
            "source":                       "NILCLASS_METHODS = [:type, :method_missing]",
            "source_type":                  "ruby",
            "type":                         "constant",
            "value":                        "[:type, :method_missing]",
            "visibility":                   "private",
            "y_ld:files":                   [{"file_line":103,"file_path":"lib%2Fyard%2Fverifier.rb"}],
            "y_ld:level":                   4,
            "y_ld:path":                    "YARD%3A%3AVerifier%3A%3ANILCLASS_METHODS"
        },
        {
            "docstring":                    "",
            "macro_data":                   "",
            "method_object":                "YARD::CodeObjects::MacroObject.apply_macro",
            "name":                         "macro.expand",
            "namespace":                    "",
            "path":                         "macro.expand",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "macro.expand"
        },
        {
            "docstring":                    "",
            "macro_data":                   "@!attribute $1",
            "method_object":                "YARD::Options.default_attr",
            "name":                         "yard.default_attr",
            "namespace":                    "",
            "path":                         "yard.default_attr",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "yard.default_attr"
        },
        {
            "docstring":                    "",
            "macro_data":                   "@!method $1_directive\n@!visibility private\n@yard.directive $1 [$2] $-1",
            "method_object":                "YARD::Tags::Library.define_directive",
            "name":                         "yard.directive",
            "namespace":                    "",
            "path":                         "yard.directive",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "yard.directive"
        },
        {
            "docstring":                    "",
            "macro_data":                   "@!method process\nMain processing callback\n@return [void]",
            "method_object":                "YARD::Handlers::Base.process",
            "name":                         "yard.handlers.process",
            "namespace":                    "",
            "path":                         "yard.handlers.process",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "yard.handlers.process"
        },
        {
            "docstring":                    "",
            "macro_data":                   "@!method $2_tag\n@!visibility private\n@yard.tag $2 [$3] $1",
            "method_object":                "YARD::Tags::Library.define_tag",
            "name":                         "yard.tag",
            "namespace":                    "",
            "path":                         "yard.tag",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "yard.tag"
        },
        {
            "docstring":                    "",
            "macro_data":                   "@note This tag is *transitive*. If it is applied on a\n  namespace (module or class), it will automatically be\n  applied to all children objects of that namespace unless\n  it is redefined on the child object.",
            "name":                         "yard.tag.transitive",
            "namespace":                    "",
            "path":                         "yard.tag.transitive",
            "source_type":                  "ruby",
            "type":                         "macro",
            "visibility":                   "public",
            "y_ld:level":                   2,
            "y_ld:path":                    "yard.tag.transitive"
        }
    ]
}
);
